/**
 *
 * Euler Flow
 *
 * This setup corresponds to the Finite Volume demonstrator code as discussed in
 * Section 2 of the guidebook, but it replaces the Finite Volume stuff with an
 * ADER-DG scheme. To keep stuff here extremely simple, the spec file
 * does not contain any global-optimisations or any parallelisation. How to add parallel
 * features is solely described in the guidebook.
 *
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 */
exahype-project EulerADERDG
  peano-kernel-path const          = ./Peano
  exahype-path const               = ./ExaHyPE
  output-directory const           = ./Demonstrators/EulerADERDG-without-limiter

  computational-domain
    dimension const         = 2
    width                   = 1.0, 1.0
    offset                  = 0.0, 0.0
    time-steps              = 100
  end computational-domain
 
 
  shared-memory
    identifier               = dummy
    configure                = {manual-pinning}
    cores                    = 4
    properties-file          = sharedmemory.properties
  end shared-memory

  distributed-memory
    identifier               = static_load_balancing
    configure                = {hotspot,fair,ranks-per-node:6}
    buffer-size              = 64
    timeout                  = 160
  end distributed-memory
 

  global-optimisation
    fuse-algorithmic-steps          = all
    fuse-algorithmic-steps-rerun-factor   = 0.99
    fuse-algorithmic-steps-diffusion-factor   = 0.99
    spawn-predictor-as-background-thread = on
    spawn-amr-background-threads         = on
    disable-vertex-exchange-in-time-steps = on
    time-step-batch-factor           = 0.0
    disable-metadata-exchange-in-batched-time-steps = off
    double-compression = 0.0
    // try on here as well -> there is a deadlock here - at least with MPI
    spawn-double-compression-as-background-thread = off
  end global-optimisation

  solver ADER-DG MyEulerSolver
    variables const            = rho:1,j:3,E:1
    order const                = 3
    maximum-mesh-size          = 0.01
    maximum-mesh-depth         = 0
    time-stepping              = global
    type const                 = nonlinear, Legendre
    terms const                = flux
    optimisation const         = generic
    language const             = C
   
    // peano::Legendre::vertices::ascii
    plot peano::Legendre::vertices::ascii EulerWriter
      variables const = 5
      time            = 0.0
      repeat          = 0.001
      output          = ./variables
    end plot
  end solver
end exahype-project

