/**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon 
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 */
exahype-project Euler
  peano-kernel-path const          = ./Peano
  exahype-path const               = ./ExaHyPE
  output-directory const           = ./ApplicationExamples/Euler/Euler_FV
  architecture const               = noarch
  log-file                         = mylogfile.log

  computational-domain
    dimension const         = 3
    width                   = 1.0, 1.0, 1.0
    offset                  = 0.0, 0.0, 0.0
    end-time                = 0.22
  end computational-domain
  
  shared-memory
    identifier               = dummy
    configure                = {}
    cores                    = 4
    properties-file          = sharedmemory.properties
  end shared-memory
  
  distributed-memory
    identifier               = static_load_balancing
    configure                = {hotspot,fair,ranks-per-node:1}
    buffer-size              = 64
    timeout                  = 60
  end distributed-memory
  
  global-optimisation
    fuse-algorithmic-steps          = on
    fuse-algorithmic-steps-factor   = 0.99
    spawn-predictor-as-background-thread = off
    spawn-amr-background-threads = off
    /* 0.0 und 0.8 sind schon mal zwei Faktoren */
    disable-vertex-exchange-in-time-steps = on
    time-step-batch-factor           = 0.8
    disable-metadata-exchange-in-batched-time-steps = off
    double-compression = 0.0
    spawn-double-compression-as-background-thread = off
  end global-optimisation
 
  solver Finite-Volumes EulerSolver_FV
    variables const    = rho:1,j:3,E:1
    patch-size const   = 7
    maximum-mesh-size  = 0.038
    time-stepping      = global
    type const         = godunov
    terms const        = flux
    optimisation const = generic
    language const     = C
    // reference either: sod,entropywave,explosion,rarefactionwave
    constants          = reference:entropywave

    // works only properly for single-node runs
    /*
    plot user::defined ErrorWriter
      variables const = 5
      time            = 0.0
      repeat          = 1e-2
      output          = not-available
    end plot
    */
    
    plot vtu::Cartesian::cells::ascii ErrorPlotter
      // absErrorL1perCell[nvar],Q[nvar],QAnalytical[nvar]
      variables const = 15 
      time            = 0.0
      repeat          = 1e-10
      output          = ./errors
    end plot
  end solver
end exahype-project
