/**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon 
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/
 
/**

 The GRMHD PDE in the C++ formulation with FV solver.

 */
exahype-project GRMHD

  peano-kernel-path const          = ./Peano
  exahype-path const               = ./ExaHyPE
  output-directory const           = ./ApplicationExamples/GRMHD/GRMHD_cpp
  architecture const               = noarch
  log-file                         = whatever.log

  computational-domain
    dimension const                = 3
    width                          = 1.0, 1.0, 1.0
    offset                         = 0.0, 0.0, 0.0
    end-time                       = 10.0
  end computational-domain
  
  shared-memory
    identifier               = dummy
    configure                = {}
    cores                    = 1
    properties-file          = sharedmemory.properties
  end shared-memory  
  
  distributed-memory
    identifier               = static_load_balancing
    configure                = {hotspot,fair,ranks-per-node:1}
    buffer-size              = 64
    timeout                  = 60
  end distributed-memory

  global-optimisation
    fuse-algorithmic-steps          = all
    fuse-algorithmic-steps-rerun-factor   = 0.99
    fuse-algorithmic-steps-diffusion-factor   = 0.99
    spawn-predictor-as-background-thread = off
    spawn-amr-background-threads         = off
    disable-vertex-exchange-in-time-steps = on
    time-step-batch-factor           = 0.0
    disable-metadata-exchange-in-batched-time-steps = off
    double-compression = 0.0
    spawn-double-compression-as-background-thread = off
  end global-optimisation

  solver Finite-Volumes GRMHDSolver_FV
    /* NOTE: Since exahype currently does not compute the derivatives of
     * the parameters, we cannot put the material parameters extra.
     * Also currently dont store ,detg:1
     **/
    variables const                = rho:1,vel:3,E:1,B:3,psi:1,lapse:1,shift:3,gij:6,coordinates:3,check:1
    //parameters const               = pos:3,check:1
    patch-size const               = 8
    maximum-mesh-size              = 0.3333333339
    maximum-mesh-depth             = 0
    time-stepping                  = global
    type const         = godunov
    terms const        = flux,ncp,source
    optimisation const = generic
    language const                 = C
    constants  = mexa:stuff,
       initialdata/name:alfenwave,
       boundaries/left:exact,
       boundaries/right:exact,
       boundaries/top:exact,
       boundaries/bottom:exact,
       boundaries/front:exact,
       boundaries/back:exact

    plot vtk::Cartesian::vertices::binary ConservedWriter
      variables const = 23
      time      = 0.0
      repeat    = 0.00001
      output    = ./vtk-output/conserved
    end plot

    /* Carpet for FV does not yet support slicing */
    /*
    plot Carpet::Cartesian::Vertices::HDF5 ConservedWriter
      variables const = 23
      time = 0.0
      repeat = 1000.000001
      output = ./hdf5/conserved
      select = x:0,y:0
    end plot
    */

   plot vtk::Cartesian::vertices::binary PrimitiveWriter
      variables const = 23
      time      = 0.0
      repeat    = 0.000666667
      output    = ./vtk-output/primitive
    end plot

    /* Carpet for FV does not yet support slicing */
    /*
    plot Carpet::Cartesian::Vertices::HDF5 PrimitiveWriter
      variables const = 23
      time = 0.0
      repeat = 10000.000001
      output = ./hdf5/primitive
      select = x:0,y:0
    end plot
    */

    plot vtk::Cartesian::cells::ascii IntegralsWriter
      variables const = 0
      time = 0.0
      repeat = 0.000001
      output = ./output/global-integrals
    end plot

  end solver
end exahype-project
