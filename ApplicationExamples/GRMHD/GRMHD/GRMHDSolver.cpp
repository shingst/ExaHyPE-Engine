// This file is generated by the ExaHyPE toolkit.
// Please do not modify - it will be overwritten by the next
// ExaHyPE toolkit call.
// 
// ========================
//   www.exahype.eu
// ========================
// ==============================================
// Please do not change the implementations below
// =============================---==============
#include "GRMHDSolver.h"

#include "kernels/GRMHD_GRMHDSolver_ADERDG/Kernels.h"



// Just call parent constructor
GRMHD::GRMHDSolver::GRMHDSolver(
        const double maximumMeshSize,
        const int maximumMeshDepth,
        const int haloCells,
        const int regularisedFineGridLevels,
        const exahype::solvers::Solver::TimeStepping timeStepping,
        const int DMPObservables,
        const double DMPRelaxationParameter,
        const double DMPDifferenceScaling
) :
  exahype::solvers::LimitingADERDGSolver::LimitingADERDGSolver(
      "GRMHDSolver",
    new GRMHD::GRMHDSolver_ADERDG(
      maximumMeshSize,maximumMeshDepth,haloCells,regularisedFineGridLevels,timeStepping,DMPObservables),
    new GRMHD::GRMHDSolver_FV(
      maximumMeshSize, timeStepping),
    DMPRelaxationParameter,
    DMPDifferenceScaling) {}

void GRMHD::GRMHDSolver::projectOnFVLimiterSpace(const double* const luh, double* const lim) const {
  
  GRMHD::GRMHDSolver_ADERDG_kernels::aderdg::projectOnFVLimiterSpace(luh, lim);

 
}

void GRMHD::GRMHDSolver::projectOnDGSpace(const double* const lim, double* const luh) const {
  
  GRMHD::GRMHDSolver_ADERDG_kernels::aderdg::projectOnDGSpace(lim, luh);

 
}

bool GRMHD::GRMHDSolver::discreteMaximumPrincipleAndMinAndMaxSearch(const double* const luh, double* const boundaryMinPerVariables, double* const boundaryMaxPerVariables) {
  
  const bool r =  GRMHD::GRMHDSolver_ADERDG_kernels::aderdg::discreteMaximumPrincipleAndMinAndMaxSearch(luh, _solver.get(), _DMPMaximumRelaxationParameter, _DMPDifferenceScaling, boundaryMinPerVariables, boundaryMaxPerVariables);


  return r;
}

void GRMHD::GRMHDSolver::findCellLocalMinAndMax(const double* const luh, double* const localMinPerVariables, double* const localMaxPerVariable) {
  
  GRMHD::GRMHDSolver_ADERDG_kernels::aderdg::findCellLocalMinAndMax(luh, _solver.get(), localMinPerVariables, localMaxPerVariable);

 
}

void GRMHD::GRMHDSolver::findCellLocalLimiterMinAndMax(const double* const lim, double* const localMinPerObservable, double* const localMaxPerObservable) {
  
  GRMHD::GRMHDSolver_ADERDG_kernels::aderdg::findCellLocalLimiterMinAndMax(lim, _solver.get(), localMinPerObservable,localMaxPerObservable);

 
}