/**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon 
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/
 
/**

 Euler Flow

 A simple project. (well, it was simple, in the beginning).

 */
exahype-project  Elastic

  peano-kernel-path const          = ./Peano
  exahype-path const               = ./ExaHyPE
  output-directory const           = ./ApplicationExamples/Elastic/ElasticWaves2D_nonlinearkernel
  architecture const               = noarch

  computational-domain
    dimension const                = 2
    width                    = 10.0, 20.0
    offset                   = 0.0, 0.0
    end-time                 = 10.0
  end computational-domain
/*
  shared-memory
    identifier               = autotuning
    configure                = {}
    cores                    = 4
    properties-file          = sharedmemory.properties
  end shared-memory
*/
 /*
  distributed-memory
    identifier               = static_load_balancing
    configure                = {greedy,FCFS}
    buffer-size              = 64
    timeout                  = 120
  end distributed-memory
 */
 
  global-optimisation
    fuse-algorithmic-steps          = all
    fuse-algorithmic-steps-rerun-factor   = 0.99
    fuse-algorithmic-steps-diffusion-factor   = 0.99
    spawn-predictor-as-background-thread = off    
    spawn-amr-background-threads         = off
  end global-optimisation
  
  solver ADER-DG MyElasticSolver
    variables const         = 8
    parameters const        = 0
    order const             = 3
    /* 27 points: 0.05, 9 points: 0.15 */
    maximum-mesh-size = 0.5
    time-stepping     = global
    type const = nonlinear
	terms const = ncp
	optimisation const = generic
    language const          = C

    plot vtk::Cartesian::vertices::ascii
      variables const = 5
      time      = 0.0
      repeat    = 0.05
      output    = ./conserved
      select    = x:0.0,y:0.0
    end plot

    /* this is the fake plotter used to compute global integrals */
    /* it has no output fields. */
    plot vtk::Cartesian::vertices::ascii
      variables const = 0
      time = 0.0
      repeat = 0.05
      output = ./output/these-files-should-not-be-there
      select    = x:0.0,y:0.0
    end plot

    plot vtk::Cartesian::vertices::ascii
      variables const = 8
      time      = 0.0
      repeat    = 0.05
      output    = ./primitive
      select    = x:0.0,y:0.0
    end plot
    
    plot vtk::Cartesian::vertices::ascii
      variables const = 8
      time      = 0.0
      repeat    = 0.05
      output    = ./exact-primitive
      select    = x:0.0,y:0.0
    end plot

    /* Do not need the time series for a point in the moment
    plot probe::ascii
      variables const = 8
      time      = 0.0
      repeat    = 0.05
      output    = ./seismogram
      select    = {x:0.2,y:0.2} 
    end plot
    */
  end solver
end exahype-project
