/**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon 
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/
 
/**

Elastodynamics

 A simple project. (well, it was simple, in the beginning).

 */
exahype-project  Elastodynamics

  peano-kernel-path const = ./Peano
  exahype-path const      = ./ExaHyPE
  output-directory const  = ./ApplicationExamples/Elastic/Elastodynamics3D
  architecture const      = noarch
  log-file                = mylogfile.log

  computational-domain
    dimension const          = 3
    width                    = 1.0, 1.0, 1.0
    offset                   = 0.0, 0.0, 0.0
    end-time                 = 10.0
  end computational-domain

//   shared-memory
//     identifier               = dummy
//     cores                    = 1
//     properties-file          = sharedmemory.properties
//   end shared-memory

//   distributed-memory
//     identifier               = static_load_balancing
//     configure                = {hotspot,fair,ranks-per-node:4}
//     buffer-size              = 64
//     timeout                  = 60
//   end distributed-memory

  global-optimisation
    fuse-algorithmic-steps          = none
    fuse-algorithmic-steps-rerun-factor   = 0.99
    fuse-algorithmic-steps-diffusion-factor   = 0.99
    spawn-predictor-as-background-thread = off
    spawn-amr-background-threads         = off
    /* 0.0 und 0.8 sind schon mal zwei Faktoren */
    disable-vertex-exchange-in-time-steps = on
    time-step-batch-factor           = 0.0
    disable-metadata-exchange-in-batched-time-steps = off
    double-compression = 0.0
    spawn-double-compression-as-background-thread = off
  end global-optimisation

  solver ADER-DG MyElastodynamicsSolver
    variables const   = v:3,sigma:6
    order const       = 3
    /* 27 points: 0.05, 9 points: 0.15 */
    maximum-mesh-size = 0.075
    time-stepping     = globalfixed
    kernel const      = generic::fluxes::linear
    language const    = C

    plot vtu::Cartesian::cells::ascii ConservedQuantitiesWriter
      variables const = 3
      time            = 0.0
      repeat          = 0.01
      output          = ./conserved
      select          = x:0.0,y:0.0,z:0.0
    end plot

    /* this is the fake plotter used to compute global integrals */
    /* it has no output fields. */
    /*xplot vtk::Cartesian::vertices::ascii ComputeGlobalIntegrals
      variables const = 0
      time            = 0.0
      repeat          = 0.01
      output          = ./output/these-files-should-not-be-there
      select          = x:0.0,y:0.0,z:0.0
    end plot */

//     plot vtk::Cartesian::vertices::ascii PrimitivesWriter
//       variables const = 3
//       time            = 0.0
//       repeat          = 0.05
//       output          = ./primitive
//       select          = x:0.0,y:0.0
//     end plot

//     plot vtk::Cartesian::vertices::ascii ExactPrimitivesWriter
//       variables const = 3
//       time            = 0.0
//       repeat          = 0.05
//       output          = ./exact-primitive
//       select          = x:0.0,y:0.0
//     end plot

    /* Do not need the time series for a point in the moment
    plot probe::ascii ProbeWriter
      variables const = 3
      time            = 0.0
      repeat          = 0.05
      output          = ./linear
      select          = x:0.2,y:0.2
    end plot
    */

  end solver
end exahype-project
