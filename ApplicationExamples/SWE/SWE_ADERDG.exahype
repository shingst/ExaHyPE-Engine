/**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon 
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/
 
/**

 2D SWE with ADER-DG.

 */
exahype-project  SWE

  peano-kernel-path const = ./Peano
  exahype-path const      = ./ExaHyPE
  output-directory const  = ./ApplicationExamples/SWE/SWE_ADERDG
  architecture const      = noarch
  log-file                = mylogfile.log

  computational-domain
    dimension const          = 2
    width                    = 10.0, 10.0
    offset                   = 0.0, 0.0
    end-time                 = 5.0
  end computational-domain

  shared-memory
        identifier = dummy
        configure = {background-tasks:4}
        cores = 4
        properties-file = sharedmemory.properties
  end shared-memory

  global-optimisation
      fuse-algorithmic-steps          = all
      fuse-algorithmic-steps-rerun-factor   = 0.99
      fuse-algorithmic-steps-diffusion-factor   = 0.99
      spawn-predictor-as-background-thread = off
      spawn-amr-background-threads         = off
      /* 0.0 und 0.8 sind schon mal zwei Faktoren */
      disable-vertex-exchange-in-time-steps = on
      time-step-batch-factor           = 0.0
      disable-metadata-exchange-in-batched-time-steps = off
      double-compression = 0.0
      spawn-double-compression-as-background-thread = off
   end global-optimisation

   solver ADER-DG MySWESolver
    variables const   = h:1,hu:1,hv:1,b:1
    //parameters const  = b:1
    order const       = 3
    maximum-mesh-size = 0.5
    maximum-mesh-depth = 2
    time-stepping     = global
    type const = nonlinear
	terms const = flux,ncp
	optimisation const = generic, usestack
    language const    = C
    constants = grav:9.81, scenario:2
    plot vtu::Cartesian::cells::ascii ConservedWriter
      variables const = 5
      time            = 0.0
      repeat          = 0.1
      output          = ./conserved
    end plot
  end solver

end exahype-project

/*------Scenarios-------
0: ShockShockProblem            (width = 10.0, 10.0 offset = 0.0, 0.0)
1: RareRareProblem              (width = 10.0, 10.0 offset = 0.0, 0.0)
2: GaussFunction                (width = 10.0, 10.0 offset = 0.0, 0.0)
3: ExpBreakProblem
4: DamBreakProblem              (width = 10.0, 10.0 offset = 0.0, 0.0)
5: SeaAtRestProblem
6: SteadyRunUpLinear
7: RunUpLinear
8: SteadyRunUpShelf
9: RunUpShelf
10: WettingDryingProblem        (width = 10.0, 10.0 offset = 0.0, 0.0)
11: OscillatingLake             (width = 4.0, 4.0 offset = -2.0, -2.0)
12: RunUpTest                   (width = 10.0, 10.0 offset = 0.0, 0.0)
13: SolitaryWaveOnSimpleBeach   (width = 70.0, 1.0 offset = -10.0, 0.0)
Default: GaussFunction          (width = 10.0, 10.0 offset = 0.0, 0.0)*/