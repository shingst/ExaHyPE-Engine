// This file was generated by the ExaHyPE toolkit.
//
//
// ========================
//   www.exahype.eu
// ========================
#include "OutputWriter.h"
#include "AbstractMySWESolver.h"
#include "kernels/GaussLegendreBasis.h"
#include "kernels/aderdg/generic/c/sizes.cpph"
#include <cmath>

SWE::OutputWriter::OutputWriter(SWE::MySWESolver& solver) :
    height("Output/height"),
    bathymetry("Output/bathymetry")
{
    //TODO read in number of measurement points
    for(int i = 0; i < 4; i++){
        height.add(i,"measurment"+std::to_string(i));
        bathymetry.add(i,"measurement"+std::to_string(i));
    }
}

SWE::OutputWriter::~OutputWriter()
{
}

void SWE::OutputWriter::startPlotting( double time) {
  height.startRow(time);
  bathymetry.startRow(time);
}


void SWE::OutputWriter::finishPlotting() {
    height.finishRow();
    bathymetry.finishRow();
}

void SWE::OutputWriter::mapQuantities(
    const tarch::la::Vector<DIMENSIONS, double>& offsetOfPatch,
    const tarch::la::Vector<DIMENSIONS, double>& sizeOfPatch,
    const tarch::la::Vector<DIMENSIONS, double>& x,
    const tarch::la::Vector<DIMENSIONS, int>&    pos,
    double* Q,
    double* outputQuantities,
    double timeStamp
) {

    	double dV;
		const int order = SWE::AbstractMySWESolver::Order;
		dV = kernels::ADERDGVolume(order, sizeOfPatch, pos);

        height.addValue(Q[4],dV);
        bathymetry.addValue(Q[3],dV);
}
