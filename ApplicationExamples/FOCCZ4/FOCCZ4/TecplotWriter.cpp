// This file was generated by the ExaHyPE toolkit.
// It will not be overwritten.
//
//
// ========================
//   www.exahype.eu
// ========================
#include "TecplotWriter.h"

#if HAVE_TECPLOT
#include "TECPLOTinterface.h"
#endif
#include "tarch/parallel/Node.h"
#include "tarch/parallel/NodePool.h"
#include <stdio.h>
#include "FOCCZ4Solver_FV.h"
#include "FOCCZ4Solver_ADERDG.h"

#include "kernels/GaussLegendreBasis.h"
#include "kernels/KernelUtils.h"

#include "peano/utils/Loop.h"

#include "tarch/la/VectorOperations.h"

#include <algorithm>

#include <iomanip>

FOCCZ4::TecplotWriter::TecplotWriter() : exahype::plotters::LimitingADERDG2UserDefined::LimitingADERDG2UserDefined(){
  // @TODO Please insert your code here.
}

void FOCCZ4::TecplotWriter::plotADERDGPatch(
    const tarch::la::Vector<DIMENSIONS, double>& offsetOfPatch,
    const tarch::la::Vector<DIMENSIONS, double>& sizeOfPatch, double* const u,
    double timeStamp) {
  // @TODO Please insert your code here.
#if HAVE_TECPLOT
  plotForADERSolver = 0;
  elementcalltecplotplotter_(u,&offsetOfPatch[0],&sizeOfPatch[0],&plotForADERSolver);
#endif
}

void FOCCZ4::TecplotWriter::plotFiniteVolumesPatch(
    const tarch::la::Vector<DIMENSIONS, double>& offsetOfPatch,
    const tarch::la::Vector<DIMENSIONS, double>& sizeOfPatch, double* const u,
    double timeStamp) {
  // @TODO Please insert your code here.
#if HAVE_TECPLOT
  plotForADERSolver = 1;
  elementcalltecplotfvplotter_(u, &offsetOfPatch[0], &sizeOfPatch[0], &plotForADERSolver);
#endif
}


void FOCCZ4::TecplotWriter::startPlotting( double time) {
  // @TODO Please insert your code here.
#if HAVE_TECPLOT
    mpirank = tarch::parallel::Node::getInstance().getRank();
  initializetecplotplotter_(&time);
#endif
}


void FOCCZ4::TecplotWriter::finishPlotting() {
  // @TODO Please insert your code here.
#if HAVE_TECPLOT
    finishtecplotplotter_(&mpirank);
#endif
}
