/**

 Ideal Special Relativistic Magnetohydrodynamics.
 A custom ExaHype Kernel written in Fortran,
 currently only 3D,
 provided by Olindo and modified by Sven.

 Started 17. June, 2016.
 Based on srhd3dfortran.exahype

 */
exahype-project  MHDSolver

  peano-kernel-path const          = ./Peano
  exahype-path const               = ./ExaHyPE
  output-directory const           = ./ApplicationExamples/SRMHD/SRMHD/
  architecture const               = noarch

  computational-domain
    dimension const                = 2
    width                    = 1.0, 1.0
    offset                   = 0.0, 0.0
    end-time                 = 10.0
  end computational-domain

  shared-memory
    identifier               = dummy
    configure                = {}
    cores                    = 1
    properties-file          = sharedmemory.properties
  end shared-memory

  distributed-memory
    identifier               = static_load_balancing
    configure                = {hotspot,fair,ranks-per-node:4}
    buffer-size              = 64
    timeout                  = 120
  end distributed-memory

  global-optimisation
    fuse-algorithmic-steps        = none
    fuse-algorithmic-steps-rerun-factor = 0.99
    fuse-algorithmic-steps-diffusion-factor = 0.99
    spawn-predictor-as-background-thread = off
    spawn-amr-background-threads         = off
    disable-vertex-exchange-in-time-steps = on
    time-step-batch-factor           = 0.0
    disable-metadata-exchange-in-batched-time-steps = off
    double-compression = 0.0
    spawn-double-compression-as-background-thread = off
  end global-optimisation
  
  solver ADER-DG MHDSolver
    /* for field (=variables) descriptions, see code */
    variables const          = 9
    order const              = 3
    /* 3 grid points per dim
    maximum-mesh-size  = 0.34
    time-stepping      = global
    type const = nonlinear
	terms const = flux
	optimisation const = generic
    /* we are using the new Fortran interface */
    language const           = C
    /* choose your iniitial data here. Caveats on whitespace */
    constants = {initialdata:alfven}

    plot vtk::Cartesian::vertices::ascii RelativeErrorWriter
      variables const = 9
      time      = 0.0
      repeat    = 0.05
      output    = ./relative-errors-conserved-0
      select    = x:0.0,y:0.0
    end plot
  end solver
  
  solver ADER-DG MHDSolver
    /* for field (=variables) descriptions, see code */
    variables const          = 9
    order const              = 3
    /* 9 grid points per dim
    maximum-mesh-size  = 0.12
    time-stepping      = global
    type const = nonlinear
	terms const = flux
	optimisation const = generic
    /* we are using the new Fortran interface */
    language const           = C
    /* choose your iniitial data here. Caveats on whitespace */
    constants = {initialdata:alfven}


    plot vtk::Cartesian::vertices::ascii RelativeErrorWriter
      variables const = 9
      time      = 0.0
      repeat    = 0.05
      output    = ./relative-errors-conserved-1
      select    = x:0.0,y:0.0
    end plot
  end solver
  
  solver ADER-DG MHDSolver
    /* for field (=variables) descriptions, see code */
    variables const          = 9
    order const              = 3
    /* 27 grid points: 0.2327 */
    maximum-mesh-size  = 0.12
    time-stepping      = global
    type const = nonlinear
	terms const = flux
	optimisation const = generic
    /* we are using the new Fortran interface */
    language const           = C
    /* choose your iniitial data here. Caveats on whitespace */
    constants = {initialdata:alfven}


    plot vtk::Cartesian::vertices::ascii RelativeErrorWriter
      variables const = 9
      time      = 0.0
      repeat    = 0.05
      output    = ./relative-errors-conserved-2
      select    = x:0.0,y:0.0
    end plot
    
    plot vtk::Cartesian::vertices::ascii RelativeErrorWriter
      variables const = 9
      time      = 0.0
      repeat    = 0.05
      output    = ./relative-errors-conserved-2
      select    = x:0.0,y:0.0
    end plot
  end solver

end exahype-project
