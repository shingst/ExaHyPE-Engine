// This file was generated by the ExaHyPE toolkit.
// It will NOT be regenerated or overwritten.
// Please adapt it to your own needs.
// 
// ========================
//   www.exahype.eu
// ========================

#include "PoroelasticSolver.h"

#include "PoroelasticSolver_Variables.h"

#include "kernels/KernelUtils.h"
#include "peano/utils/Loop.h"

tarch::logging::Log Poroelastic::PoroelasticSolver::_log( "Poroelastic::PoroelasticSolver" );


void Poroelastic::PoroelasticSolver::init(const std::vector<std::string>& cmdlineargs,const exahype::parser::ParserView& constants) {
  // Tip: You find documentation for this method in header file "Poroelastic::PoroelasticSolver.h".
  
  // @todo Please implement/augment if required

  initPointSourceLocations(cmdlineargs,constants);	
    
}

void Poroelastic::PoroelasticSolver::adjustPointSolution(const double* const x,const double t,const double dt,double* const Q) {
  // Tip: You find documentation for this method in header file "Poroelastic::PoroelasticSolver.h".
  // Tip: See header file "Poroelastic::AbstractPoroelasticSolver.h" for toolkit generated compile-time 
  //      constants such as Order, NumberOfVariables, and NumberOfParameters.
  
  // @todo Please implement/augment if required
  if (tarch::la::equals(t,0.0)) {
    Q[0] = 0.0;
    Q[1] = 0.0;
    Q[2] = 0.0;
    Q[3] = 0.0;
    Q[4] = 0.0;
    Q[5] = 0.0;
    Q[6] = 0.0;
    Q[7] = 0.0;
    Q[8] = 0.0;
    Q[9] = 0.0;
    Q[10] = 0.0;
    Q[11] = 0.0;
    Q[12] = 0.0;
    Q[13] = 0.0;
    Q[14] = 0.0;
    Q[15] = 0.0;
    Q[16] = 0.0;
    Q[17] = 0.0;
    Q[18] = 0.0;
    Q[19] = 0.0;
    Q[20] = 0.0;
    Q[21] = 0.0;
    Q[22] = 0.0;
  }
}

void Poroelastic::PoroelasticSolver::boundaryValues(const double* const x,const double t,const double dt,const int faceIndex,const int direction,const double* const fluxIn,const double* const stateIn,const double* const gradStateIn,double* const fluxOut,double* const stateOut) {
  // Tip: You find documentation for this method in header file "Poroelastic::PoroelasticSolver.h".
  // Tip: See header file "Poroelastic::AbstractPoroelasticSolver.h" for toolkit generated compile-time 
  //      constants such as Order, NumberOfVariables, and NumberOfParameters.

  // @todo Please implement/augment if required
  stateOut[0] = 0.0;
  stateOut[1] = 0.0;
  stateOut[2] = 0.0;
  stateOut[3] = 0.0;
  stateOut[4] = 0.0;
  stateOut[5] = 0.0;
  stateOut[6] = 0.0;
  stateOut[7] = 0.0;
  stateOut[8] = 0.0;
  stateOut[9] = 0.0;
  stateOut[10] = 0.0;
  stateOut[11] = 0.0;
  stateOut[12] = 0.0;

  fluxOut[0] = 0.0;
  fluxOut[1] = 0.0;
  fluxOut[2] = 0.0;
  fluxOut[3] = 0.0;
  fluxOut[4] = 0.0;
  fluxOut[5] = 0.0;
  fluxOut[6] = 0.0;
  fluxOut[7] = 0.0;
  fluxOut[8] = 0.0;
  fluxOut[9] = 0.0;
  fluxOut[10] = 0.0;
  fluxOut[11] = 0.0;
  fluxOut[12] = 0.0;
}

exahype::solvers::Solver::RefinementControl Poroelastic::PoroelasticSolver::refinementCriterion(const double* const luh,const tarch::la::Vector<DIMENSIONS,double>& cellCentre,const tarch::la::Vector<DIMENSIONS,double>& cellSize,double t,const int level) {
  // Tip: You find documentation for this method in header file "Poroelastic::PoroelasticSolver.h".
  // Tip: See header file "Poroelastic::AbstractPoroelasticSolver.h" for toolkit generated compile-time 
  //      constants such as Order, NumberOfVariables, and NumberOfParameters.
  // Tip: See header file "peano/utils/Loop.h" for dimension-agnostic for loops.
  
  //  Example: Loop over all pointwise state variables (plus parameters)
  //
  //  constexpr int sizeOfQ = NumberOfVariables+NumberOfParameters;
  //  dfor(i,Order+1) {
  //    const int iLinearised = dLinearised(i,Order+1);
  //    const double* const Q = luh + iLinearised * sizeOfQ; // pointwise state variables (plus parameters)
  //    // use Q[0], Q[1], ... Q[sizeOfQ-1]
  //  }
  
  // @todo Please implement/augment if required
  return exahype::solvers::Solver::RefinementControl::Keep;
}

//*****************************************************************************
//******************************** PDE ****************************************
// To use other PDE terms, specify them in the specification file, delete this 
// file and its header and rerun the toolkit
//*****************************************************************************


void Poroelastic::PoroelasticSolver::eigenvalues(const double* const Q,const int direction,double* const lambda) {
  // Tip: You find documentation for this method in header file "Poroelastic::PoroelasticSolver.h".
  // Tip: See header file "Poroelastic::AbstractPoroelasticSolver.h" for toolkit generated compile-time 
  //      constants such as Order, NumberOfVariables, and NumberOfParameters.
  
  // @todo Please implement/augment if required
  lambda[0] = 1.0;
  lambda[1] = 1.0;
  lambda[2] = 1.0;
  lambda[3] = 1.0;
  lambda[4] = 1.0;
  lambda[5] = 1.0;
  lambda[6] = 1.0;
  lambda[7] = 1.0;
  lambda[8] = 1.0;
  lambda[9] = 1.0;
  lambda[10] = 1.0;
  lambda[11] = 1.0;
  lambda[12] = 1.0;
}







//You can either implement this method or modify fusedSource
void Poroelastic::PoroelasticSolver::algebraicSource(const tarch::la::Vector<DIMENSIONS, double>& x, double t, const double *const Q, double *S) {
  // Tip: You find documentation for this method in header file "Poroelastic::PoroelasticSolver.h".
  // Tip: See header file "Poroelastic::AbstractPoroelasticSolver.h" for toolkit generated compile-time 
  //      constants such as Order, NumberOfVariables, and NumberOfParameters.
  // @todo Please implement/augment if required
  S[0] = 0.0;
  S[1] = 0.0;
  S[2] = 0.0;
  S[3] = 0.0;
  S[4] = 0.0;
  S[5] = 0.0;
  S[6] = 0.0;
  S[7] = 0.0;
  S[8] = 0.0;
  S[9] = 0.0;
  S[10] = 0.0;
  S[11] = 0.0;
  S[12] = 0.0;
}

void Poroelastic::PoroelasticSolver::nonConservativeProduct(const double* const Q,const double* const * const gradQ,double** const BgradQ){
  // Tip: You find documentation for this method in header file "Poroelastic::PoroelasticSolver.h".
  // Tip: See header file "Poroelastic::AbstractPoroelasticSolver.h" for toolkit generated compile-time 
  //      constants such as Order, NumberOfVariables, and NumberOfParameters.
  
  // @todo Please implement/augment if required
  BgradQ[0][0] = 0.0;
  BgradQ[0][1] = 0.0;
  BgradQ[0][2] = 0.0;
  BgradQ[0][3] = 0.0;
  BgradQ[0][4] = 0.0;
  BgradQ[0][5] = 0.0;
  BgradQ[0][6] = 0.0;
  BgradQ[0][7] = 0.0;
  BgradQ[0][8] = 0.0;
  BgradQ[0][9] = 0.0;
  BgradQ[0][10] = 0.0;
  BgradQ[0][11] = 0.0;
  BgradQ[0][12] = 0.0;

  // @todo Please implement/augment if required
  BgradQ[1][0] = 0.0;
  BgradQ[1][1] = 0.0;
  BgradQ[1][2] = 0.0;
  BgradQ[1][3] = 0.0;
  BgradQ[1][4] = 0.0;
  BgradQ[1][5] = 0.0;
  BgradQ[1][6] = 0.0;
  BgradQ[1][7] = 0.0;
  BgradQ[1][8] = 0.0;
  BgradQ[1][9] = 0.0;
  BgradQ[1][10] = 0.0;
  BgradQ[1][11] = 0.0;
  BgradQ[1][12] = 0.0;

  // @todo Please implement/augment if required
  BgradQ[2][0] = 0.0;
  BgradQ[2][1] = 0.0;
  BgradQ[2][2] = 0.0;
  BgradQ[2][3] = 0.0;
  BgradQ[2][4] = 0.0;
  BgradQ[2][5] = 0.0;
  BgradQ[2][6] = 0.0;
  BgradQ[2][7] = 0.0;
  BgradQ[2][8] = 0.0;
  BgradQ[2][9] = 0.0;
  BgradQ[2][10] = 0.0;
  BgradQ[2][11] = 0.0;
  BgradQ[2][12] = 0.0;

}


void  Poroelastic::PoroelasticSolver::initPointSourceLocations(const std::vector<std::string>& cmdlineargs,const exahype::parser::ParserView& constants){
  // Tip: You find documentation for this method in header file "Poroelastic::PoroelasticSolver.h".
  // Tip: See header file "Poroelastic::AbstractPoroelasticSolver.h" for toolkit generated compile-time 
  //      constants such as Order, NumberOfVariables, and NumberOfParameters.
  
  // @todo Please implement/augment if required

  pointSourceLocation[0][0]=0.0;
  pointSourceLocation[0][1]=0.0;
  pointSourceLocation[0][2]=0.0;
    
}

void  Poroelastic::PoroelasticSolver::pointSource(const double* const Q,const double* const x,const double t,const double dt, double* const forceVector, int n) {
  // Tip: You find documentation for this method in header file "Poroelastic::PoroelasticSolver.h".
  // Tip: See header file "Poroelastic::AbstractPoroelasticSolver.h" for toolkit generated compile-time 
  //      constants such as Order, NumberOfVariables, and NumberOfParameters.
  
  // @todo Please implement/augment if required
}

