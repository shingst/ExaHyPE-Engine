// This file is generated by the ExaHyPE toolkit.
// Please do not modify - it will be overwritten by the next
// ExaHyPE toolkit call.
// 
// ========================
//   www.exahype.eu
// ========================
#ifndef __ComputeGlobalIntegrals_CLASS_HEADER__
#define __ComputeGlobalIntegrals_CLASS_HEADER__

#include "exahype/plotters/Plotter.h"
namespace Euler{
  class ComputeGlobalIntegrals;

  /**
   * Forward declaration
   */
  class MyEulerSolver;
}

#include "TimeSeriesReductions.h"
#include "MyEulerSolver.h"

#ifndef __NumberOfVariables__
static const int NumberOfVariables = Euler::MyEulerSolver::NumberOfVariables; // shortcut
#define __NumberOfVariables__
#endif

class Euler::ComputeGlobalIntegrals: public exahype::plotters::Plotter::UserOnTheFlyPostProcessing{
  private:
    reductions::MultipleReductionsWriter conserved;
    reductions::MultipleReductionsWriter primitives;
    reductions::MultipleReductionsWriter errors;
    reductions::ReductionsWriter statistics;
  public:
  ComputeGlobalIntegrals(MyEulerSolver&  solver);
  virtual ~ComputeGlobalIntegrals();
  void startPlotting(double time) override;
  void finishPlotting() override;
  void mapQuantities(
    const tarch::la::Vector<DIMENSIONS, double>& offsetOfPatch,
    const tarch::la::Vector<DIMENSIONS, double>& sizeOfPatch,
    const tarch::la::Vector<DIMENSIONS, double>& x,
    const tarch::la::Vector<DIMENSIONS, int>&    pos,
    double* Q,
    double* outputQuantities,
    double timeStamp) override;
};

#endif
