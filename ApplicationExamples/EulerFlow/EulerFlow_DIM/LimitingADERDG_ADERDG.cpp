// This file was generated by the ExaHyPE toolkit.
// It will NOT be regenerated or overwritten.
// Please adapt it to your own needs.
// 
// ========================
//   www.exahype.eu
// ========================

#include "LimitingADERDG_ADERDG.h"

#include "LimitingADERDG_ADERDG_Variables.h"

#include "kernels/KernelUtils.h"
#include "peano/utils/Loop.h"
#include "kernels/GaussLegendreBasis.h"
#include <cstring> // memset

#include "PDE.h"

tarch::logging::Log Euler::LimitingADERDG_ADERDG::_log( "Euler::LimitingADERDG_ADERDG" );

void Euler::LimitingADERDG_ADERDG::init(const std::vector<std::string>& cmdlineargs,const exahype::parser::ParserView& constants) {}


void Euler::LimitingADERDG_ADERDG::adjustPointSolution(const double* const x,const double t,const double dt,double* const Q) {
  if (tarch::la::equals(t,0.0)) {
     initialdata(x,t,Q);
  }
}

void Euler::LimitingADERDG_ADERDG::boundaryValues(const double* const x,const double t,const double dt,const int faceIndex,const int normalNonZero,const double* const fluxIn,const double* const stateIn,const double* const gradStateIn,double* const fluxOut,double* const stateOut) {
    stateOut[0] = stateIn[0];
    stateOut[1] = stateIn[1];
    stateOut[2] = stateIn[2];
    stateOut[3] = stateIn[3];
    stateOut[4] = stateIn[4];
    stateOut[5] = stateIn[5];
    stateOut[6] = stateIn[6];
    stateOut[7] = stateIn[7];
    stateOut[8] = stateIn[8];

    fluxOut[0] = fluxIn[0];
    fluxOut[1] = fluxIn[1];
    fluxOut[2] = fluxIn[2];
    fluxOut[3] = fluxIn[3];
    fluxOut[4] = fluxIn[4];
    fluxOut[5] = fluxIn[5];
    fluxOut[6] = fluxIn[6];
    fluxOut[7] = fluxIn[7];
    fluxOut[8] = fluxIn[8];

    stateOut[1+normalNonZero] = -stateIn[1+normalNonZero];
    if(faceIndex == 0){ // inflow
        stateOut[1+normalNonZero] = stateIn[1+normalNonZero];
    }
    if(faceIndex == 1) { //outflow
        stateOut[1+normalNonZero] = stateIn[1+normalNonZero];
        stateOut[0] = 1.0;
        stateOut[4] = 2.5;
    }
}




exahype::solvers::Solver::RefinementControl Euler::LimitingADERDG_ADERDG::refinementCriterion(const double* const luh,const tarch::la::Vector<DIMENSIONS,double>& cellCentre,const tarch::la::Vector<DIMENSIONS,double>& cellSize,double t,const int level) {
  if (level>getCoarsestMeshLevel())
      return exahype::solvers::Solver::RefinementControl::Erase;
  return exahype::solvers::Solver::RefinementControl::Keep;
}

void Euler::LimitingADERDG_ADERDG::mapDiscreteMaximumPrincipleObservables(double* observables, const double* const Q) const {
  double V[9];
  PDECons2Prim(V,Q);
  observables[0] = Q[0]; //extract density
  observables[1] = Q[1];
  observables[2] = Q[2];
  observables[3] = Q[3];
  observables[4] = V[4]; //extract pressure
  observables[5] = Q[5]; // extract alpha
}


bool Euler::LimitingADERDG_ADERDG::isPhysicallyAdmissible(
      const double* const solution,
      const double* const observablesMin,const double* const observablesMax,
      const bool wasTroubledInPreviousTimeStep,
      const tarch::la::Vector<DIMENSIONS,double>& center,
      const tarch::la::Vector<DIMENSIONS,double>& dx,
      const double t) const {
    if(observablesMax[5] < 1e-2) return true;  // interior of the solid
    if (observablesMin[0] < 1.e-2) return false; // density positive
    if (observablesMin[4] < 1.e-2) return false; //pressure positive
    if(observablesMax[5] < 0.985 && observablesMin[5] > 0.015)
        return false;
    if(observablesMax[5]>1.005)
        return false;
    return true;
}

//*****************************************************************************
//******************************** PDE ****************************************
// To use other PDE terms, specify them in the specification file, delete this 
// file and its header and rerun the toolkit
//*****************************************************************************

//TODO: modify with alpha
void Euler::LimitingADERDG_ADERDG::eigenvalues(const double* const Q,const int direction,double* const lambda) {
    PDEEigenvalues(Q,direction,lambda);
}

void Euler::LimitingADERDG_ADERDG::flux(const double* const Q,double** F) {
    PDEflux(Q,F);
}


void Euler::LimitingADERDG_ADERDG::nonConservativeProduct(const double* const Q,const double* const gradQ,double* const BgradQ){
    PDEncp(Q,gradQ,BgradQ);
}

void Euler::LimitingADERDG_ADERDG::algebraicSource(const tarch::la::Vector<DIMENSIONS, double>& x, double t, const double *const Q, double *S) {
for(int i = 0; i < 9; i++) S[i]=0.0;

}
 
