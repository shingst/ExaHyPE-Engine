#ifndef __AbstractGRMHDSolver_FV_CLASS_HEADER__
#define __AbstractGRMHDSolver_FV_CLASS_HEADER__

// This file is generated by the ExaHyPE toolkit.
// Please do not modify - it will be overwritten by the next
// ExaHyPE toolkit call.
// 
// ========================
//   www.exahype.eu
// ========================
#include <ostream>

#include "exahype/solvers/FiniteVolumesSolver.h"
#include "exahype/solvers/UserSolverInterface.h"

/**
 * We include Peano's assertion collection here.
 */
#include "tarch/Assertions.h"

namespace GRMHD{
  class AbstractGRMHDSolver_FV;
  class GRMHDSolver_FV;
}

class GRMHD::AbstractGRMHDSolver_FV : public exahype::solvers::FiniteVolumesSolver, public exahype::solvers::UserFiniteVolumesSolverInterface  {
  public:
    static constexpr int NumberOfVariables  = 23;
    static constexpr int NumberOfParameters = 0;
    static constexpr int PatchSize          = 8;
    static constexpr int GhostLayerWidth    = 1;
    static constexpr double CFL             = 0.9;
    
    // virtual getters for the constexpr's
    int constexpr_getNumberOfVariables()  const override { return NumberOfVariables; };
    int constexpr_getNumberOfParameters() const override { return NumberOfParameters; };
    int constexpr_getPatchSize()          const override { return PatchSize; };
    int constexpr_getGhostLayerWidth()    const override { return GhostLayerWidth; }
    double constexpr_getCFLNumber()       const override { return CFL; };
  
    class VariableMetrics;
    class Variables;
    class ReadOnlyVariables;
    class Fluxes;
    class VariableShortcuts;
    class VariableMultiplicities;
    class VariableNames;
    
    AbstractGRMHDSolver_FV(const double maximumMeshSize,const exahype::solvers::Solver::TimeStepping timeStepping);
    
    void solutionUpdate(double* const luhNew,const double* const luh,const tarch::la::Vector<DIMENSIONS,double>& dx,const double dt,double& maxAdmissibleDt) override;
    
    double stableTimeStepSize(const double* const luh,const tarch::la::Vector<DIMENSIONS,double>& dx) override;
    void adjustSolution(double* const luh,const tarch::la::Vector<DIMENSIONS,double>& center,const tarch::la::Vector<DIMENSIONS,double>& dx,double t,double dt) override;
    
    void ghostLayerFilling(double* const luh,const double* const luhNeighbour,const tarch::la::Vector<DIMENSIONS,int>& neighbourPosition) override;
    void ghostLayerFillingAtBoundary(double* const luh,const double* const luhbnd,const tarch::la::Vector<DIMENSIONS,int>& boundaryPosition) override;
    void boundaryLayerExtraction(double* const luhbnd,const double* const luh,const tarch::la::Vector<DIMENSIONS,int>& boundaryPosition) override;
    void boundaryConditions(double* const luh,const tarch::la::Vector<DIMENSIONS,double>& cellCentre,const tarch::la::Vector<DIMENSIONS,double>& cellSize,const double t,const double dt,const tarch::la::Vector<DIMENSIONS, int>& posCell,const tarch::la::Vector<DIMENSIONS, int>& posBoundary) override;

    /// Apr 18, Coding Week: Riemann Solvers in FV. Hopefully inlined as evaluated point wise.
    double riemannSolver(double* const fL, double* const fR, const double* const qL, const double* const qR, int direction) override;

    static void constantsToString(std::ostream& os);
    static void abortWithMsg(const char* const msg);
    
    
    
    
    void pointSource(const double* const Q,const double* const x,const double t,const double dt, double* const forceVector,int n)  final {}
    /* Please check if this is at the correct place: */
    virtual void multiplyMaterialParameterMatrix(const double* const Q, double* const rhs) final {}

    
};


#endif // __AbstractGRMHDSolver_FV_CLASS_HEADER__
