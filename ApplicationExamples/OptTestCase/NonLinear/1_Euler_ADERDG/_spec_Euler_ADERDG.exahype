/**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon 
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/
 
/**

 Euler Flow

 A simple project. (well, it was simple, in the beginning).

 */
exahype-project Euler

  peano-kernel-path const = ./Peano
  exahype-path const      = ./ExaHyPE
  output-directory const  = ./ApplicationExamples/OptTestCase/NonLinear/1_Euler_ADERDG
  architecture const      = hsw
  log-file                = mylogfile.log

  computational-domain
    dimension const          = 3
    width                    = 1.0, 1.0, 1.0
    offset                   = 0.0, 0.0, 0.0
    end-time                 = 0.021
  end computational-domain

  shared-memory
    identifier               = dummy
    configure                = {background-tasks:28}
    cores                    = 28
    properties-file          = sharedmemory.properties
  end shared-memory

  /*
  distributed-memory
    identifier               = static_load_balancing
    configure                = {hotspot,fair,ranks-per-node:1}
    buffer-size              = 64
    timeout                  = 60
  end distributed-memory
  */

  global-optimisation
    fuse-algorithmic-steps          = all
    fuse-algorithmic-steps-rerun-factor   = 0.99
    fuse-algorithmic-steps-diffusion-factor   = 0.99
    spawn-predictor-as-background-thread = off
    spawn-amr-background-threads = off
    /* 0.0 und 0.8 sind schon mal zwei Faktoren */
    disable-vertex-exchange-in-time-steps = on
    time-step-batch-factor           = 0.0
    disable-metadata-exchange-in-batched-time-steps = off
    double-compression = 0.0
    spawn-double-compression-as-background-thread = off
  end global-optimisation

  solver ADER-DG EulerSolver_ADERDG
    variables const    = 5
    order const        = 3
    /* 27 points: 0.05, 9 points: 0.15 */
    maximum-mesh-size  = 0.05
    time-stepping      = global
    type const         = nonlinear
    terms const        = flux
    optimisation const = optimised
    language const     = C
    constants          = reference:entropywave
   
    // works only properly for single-node runs
    /*
    plot user::defined ErrorWriter
      variables const = 5
      time            = 0.0
      repeat          = 1e-2
      output          = not-available
    end plot
    */
    
    plot vtk::Cartesian::vertices::ascii ErrorPlotter
      // abserrorl1percell[nvar],q[nvar],qanalytical[nvar]
      variables const = 15 
      time            = 0.0
      repeat          = 1e-2
      output          = ./errors
    end plot
  end solver
end exahype-project
