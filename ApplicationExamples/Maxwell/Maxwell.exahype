/**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon 
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/
 
/**

 Maxwell Equations

 A simple project. (well, it was simple, in the beginning).

 */
exahype-project Maxwell

  peano-kernel-path const = ./Peano
  exahype-path const      = ./ExaHyPE
  output-directory const  = ./ApplicationExamples/Maxwell
  architecture const      = hsw
  log-file                = mylogfile.log

  computational-domain
    dimension const          = 3
    width                    = 1.0, 1.0, 1.0
    offset                   = 0.0, 0.0, 0.0
    end-time                 = 0.2
  end computational-domain

  /*shared-memory
    identifier               = dummy
    configure                = {}
    cores                    = 4
    properties-file          = sharedmemory.properties
  end shared-memory

  distributed-memory
    identifier               = static_load_balancing
    configure                = {hotspot,fair,ranks-per-node:1}
    buffer-size              = 64
    timeout                  = 60
  end distributed-memory*/

  /*global-optimisation
    fuse-algorithmic-steps          = all
    fuse-algorithmic-steps-rerun-factor   = 0.99
    fuse-algorithmic-steps-diffusion-factor   = 0.99
    spawn-predictor-as-background-thread = off
    spawn-amr-background-threads = off
    /* 0.0 und 0.8 sind schon mal zwei Faktoren */
    disable-vertex-exchange-in-time-steps        = on
    time-step-batch-factor           = 1.0
    disable-metadata-exchange-in-batched-time-steps = on
    double-compression = 0.0
    spawn-double-compression-as-background-thread = off
  end global-optimisation*/

  solver ADER-DG MaxwellSolver
    variables const    = 8
    order const        = 3
    /* 27 points: 0.05, 9 points: 0.15 */
    maximum-mesh-size  = 0.4
    time-stepping      = globalfixed
    type const         = linear
    terms const        = flux, materialparameters
    optimisation const = generic
    language const     = C

    plot vtk::Cartesian::vertices::ascii MaxwellPlotter
      variables const = 8
      time      = 0.0
      repeat    = 0.005
      output    = ./vtk-output/result
    end plot
  end solver

end exahype-project
