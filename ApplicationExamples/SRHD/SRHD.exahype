/**

 Special Relativistic Hydrodynamics
 with a generic kernels written in C++ and FORTRAN user interface,
 provided in Fortran by Olindo and rewritten in C++ by Sven.
 
 This exahype specification file is for the (currently still) artificial
 kernel with the name "SRHD" which demonstrates the new connector from the
 C++ toolkit to the FORTRAN kernel.
 
 In order to run this particular application, *do not* (re)run the toolkit
 but just go on and compile the application.

 Started 06. May, 2016.

 */
exahype-project  SRHD

  peano-kernel-path const          = ./Peano
  exahype-path const               = ./ExaHyPE
  output-directory const           = ./ApplicationExamples/SRHD/SRHD
  architecture const               = noarch

  computational-domain
    dimension const                = 2
    width                    = 1.0, 1.0
    offset                   = 0.0, 0.0
    end-time                 = 0.5
  end computational-domain
  
  shared-memory
    identifier               = dummy
    configure                = {}
    cores                    = 2
    properties-file          = sharedmemory.properties
  end shared-memory
  
  global-optimisation
    fuse-algorithmic-steps        = all
    fuse-algorithmic-steps-rerun-factor = 0.99
    fuse-algorithmic-steps-diffusion-factor = 0.99
    spawn-predictor-as-background-thread = off
    spawn-amr-background-threads         = off
    disable-vertex-exchange-in-time-steps = on
    time-step-batch-factor           = 0.0
    disable-metadata-exchange-in-batched-time-steps = off
    double-compression = 0.0
  end global-optimisation

  solver ADER-DG SRHDSolver
    variables const          = 5
    order const              = 2
    maximum-mesh-size  = 0.05
    time-stepping      = global
    type const = nonlinear
	terms const = flux
	optimisation const = generic
    language const           = C

    plot vtk::Cartesian::vertices::ascii
      variables const= 5
      time     = 0.0
      repeat   = 0.05
      output   = ./conserved
      select    = x:0.0,y:0.0
    end plot

    plot vtk::Cartesian::vertices::ascii
      variables const= 5
      time     = 0.0
      repeat   = 0.05
      output   = ./primitive
      select    = x:0.0,y:0.0
    end plot
  end solver

end exahype-project
