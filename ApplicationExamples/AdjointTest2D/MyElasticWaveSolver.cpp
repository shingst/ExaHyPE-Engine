// This file was generated by the ExaHyPE toolkit.
// It will NOT be regenerated or overwritten.
// Please adapt it to your own needs.
// 
// ========================
//   www.exahype.eu
// ========================

#include "MyElasticWaveSolver.h"

#include "MyElasticWaveSolver_Variables.h"

#include "kernels/KernelUtils.h"
#include "peano/utils/Loop.h"

tarch::logging::Log ElasticWave::MyElasticWaveSolver::_log( "ElasticWave::MyElasticWaveSolver" );


void ElasticWave::MyElasticWaveSolver::init(const std::vector<std::string>& cmdlineargs,const exahype::parser::ParserView& constants) {
  // Tip: You find documentation for this method in header file "ElasticWave::MyElasticWaveSolver.h".
  initPointSourceLocations(cmdlineargs,constants);	
}

void ElasticWave::MyElasticWaveSolver::adjustPointSolution(const double* const x,const double t,const double dt,double* const Q) {
  // Tip: You find documentation for this method in header file "ElasticWave::MyElasticWaveSolver.h".
  // Tip: See header file "ElasticWave::AbstractMyElasticWaveSolver.h" for toolkit generated compile-time 
  //      constants such as Order, NumberOfVariables, and NumberOfParameters.
  if ( tarch::la::equals( t,0.0 ) ) {
        Variables vars(Q);
        // Read in values
        float lambda = 2.0;
        /*std::ifstream fp("x_zero.txt");
        if (fp.is_open()) {
            while(fp > >string line = ""; getline(infile, line); ){
                std::cout << "lambda " << aandb[i] << std::endl;
                line >>lambda;
            }
        }
        fp.close();*/
        //Initial velocities
        Q[0] = 1 * exp(-((x[0] - 5) * (x[0] - 5) + (x[1] - 5) * (x[1] - 5)) / 4);//vx
        Q[1] = 1 * exp(-((x[0] - 5) * (x[0] - 5) + (x[1] - 5) * (x[1] - 5)) / 4);//vy
        // Initialise stresses to zero
        Q[2] = 0.0;//sigma xx
        Q[3] = 0.0;//yy
        Q[4] = 0.0;//xy
        //initialise material parameters
        Q[5] = lambda;
        Q[6] = 0.5;
    }
    for(int i=0; i< 7;i++)
        assert(std::isfinite(Q[i]));
}

void ElasticWave::MyElasticWaveSolver::boundaryValues(const double* const x,const double t,const double dt,const int faceIndex,const int direction,const double* const fluxIn,const double* const stateIn,const double* const gradStateIn,double* const fluxOut,double* const stateOut) {
  // Tip: You find documentation for this method in header file "ElasticWave::MyElasticWaveSolver.h".
  // Tip: See header file "ElasticWave::AbstractMyElasticWaveSolver.h" for toolkit generated compile-time 
  //      constants such as Order, NumberOfVariables, and NumberOfParameters.
    ReadOnlyVariables varsInside(stateIn);
    Variables         varsOutside(stateOut);
    for (int i = 0; i < (int) sizeof(stateIn); i++){
        stateOut[i] = stateIn[i];
    }

    for (int i = 0; i< (int) sizeof(fluxIn); i++){
        fluxOut[i] =  fluxIn[i];
    }
}

exahype::solvers::Solver::RefinementControl ElasticWave::MyElasticWaveSolver::refinementCriterion(const double* const luh,const tarch::la::Vector<DIMENSIONS,double>& cellCentre,const tarch::la::Vector<DIMENSIONS,double>& cellSize,double t,const int level) {
  // Tip: You find documentation for this method in header file "ElasticWave::MyElasticWaveSolver.h".
  // Tip: See header file "ElasticWave::AbstractMyElasticWaveSolver.h" for toolkit generated compile-time 
  //      constants such as Order, NumberOfVariables, and NumberOfParameters.
  // Tip: See header file "peano/utils/Loop.h" for dimension-agnostic for loops.
  
  //  Example: Loop over all pointwise state variables (plus parameters)
  //
  //  constexpr int sizeOfQ = NumberOfVariables+NumberOfParameters;
  //  dfor(i,Order+1) {
  //    const int iLinearised = dLinearised(i,Order+1);
  //    const double* const Q = luh + iLinearised * sizeOfQ; // pointwise state variables (plus parameters)
  //    // use Q[0], Q[1], ... Q[sizeOfQ-1]
  //  }
  
  // @todo Please implement/augment if required
  return exahype::solvers::Solver::RefinementControl::Keep;
}

//*****************************************************************************
//******************************** PDE ****************************************
// To use other PDE terms, specify them in the specification file, delete this 
// file and its header and rerun the toolkit
//*****************************************************************************


void ElasticWave::MyElasticWaveSolver::eigenvalues(const double* const Q,const int direction,double* const lambda) {
  // Tip: You find documentation for this method in header file "ElasticWave::MyElasticWaveSolver.h".
  // Tip: See header file "ElasticWave::AbstractMyElasticWaveSolver.h" for toolkit generated compile-time 
  //      constants such as Order, NumberOfVariables, and NumberOfParameters.
    double irho = 1.0;    /* density */
    double ilambda = Q[5]; /*  1st Lame parameter */
    double imu = Q[6];     /* 2nd Lame parameter */
    // extract p-wave speed (cp) and s-wave speed (cs)
    double cp = std::sqrt((2.0 * imu + ilambda) / irho);
    double cs = std::sqrt(imu / irho);

    /*
       if(normalNonZeroIndex == 0){
       lambda[0] = 0.0;
       lambda[1] = cp;
       lambda[2] = cs;
       }else{
       lambda[0] = 0.0;
       lambda[1] = -cp;
       lambda[2] = -cs;
       }*/
    lambda[0] = cp;
    lambda[1] = cs;
    lambda[2] = -cp;
    lambda[3] = -cs;
    lambda[4] = 0.0;
    lambda[5] = 0.0;
    lambda[6] = 0.0;
 }





void ElasticWave::MyElasticWaveSolver::flux(const double* const Q,double** const F) {
  // Tip: You find documentation for this method in header file "ElasticWave::MyElasticWaveSolver.h".
  // Tip: See header file "ElasticWave::AbstractMyElasticWaveSolver.h" for toolkit generated compile-time 
  //      constants such as Order, NumberOfVariables, and NumberOfParameters.
    Fluxes fluxes(F);
    double irho = 1.0;    /* density */
    double ilambda = Q[5]; /*  1st Lame parameter */
    double imu = Q[6];     /* 2nd Lame parameter */

    F[0][0] = irho * Q[2];//xx
    F[0][1] = irho * Q[4];//xy
    F[0][2] = (2.0 * imu + ilambda) * Q[0];
    F[0][3] = ilambda * Q[0];
    F[0][4] = imu * Q[1];
    F[0][5] = 0.0;
    F[0][6] = 0.0;


    F[1][0] = irho * Q[4];//yx
    F[1][1] = irho * Q[3];//yy
    F[1][2] = ilambda * Q[1];
    F[1][3] = (2.0 * imu + ilambda) * Q[1];
    F[1][4] = imu * Q[0];
    F[1][5] = 0.0;
    F[1][6] = 0.0; 
}



void  ElasticWave::MyElasticWaveSolver::nonConservativeProduct(const double* const Q,const double* const * const gradQ,double** const BgradQ) {
  // Tip: You find documentation for this method in header file "ElasticWave::MyElasticWaveSolver.h".
  // Tip: See header file "ElasticWave::AbstractMyElasticWaveSolver.h" for toolkit generated compile-time 
  //      constants such as Order, NumberOfVariables, and NumberOfParameters.
  //Dimensions 2
    //Parameters 8
    double irho = 1.0;    /* density */
    double ilambda = Q[5]; /*  1st Lame parameter */
    double imu = Q[6];     /* 2nd Lame parameter */


    BgradQ[0][0] = 0.0;
    BgradQ[0][1] = 0.0;
    BgradQ[0][2] = gradQ[0][0];//xx
    BgradQ[0][3] = 0.0;//yy
    BgradQ[0][4] = gradQ[0][1];//xy
    BgradQ[0][5] = 0.0;
    BgradQ[0][6] = 0.0;

    BgradQ[1][0] = 0.0;
    BgradQ[1][1] = 0.0;
    BgradQ[1][2] = 0.0;//xx
    BgradQ[1][3] = gradQ[1][1];//yy
    BgradQ[1][4] = gradQ[1][0];//xy
    BgradQ[1][5] = 0.0;
    BgradQ[1][6] = 0.0;
}


void  ElasticWave::MyElasticWaveSolver::initPointSourceLocations(const std::vector<std::string>& cmdlineargs,const exahype::parser::ParserView& constants){
  // Tip: You find documentation for this method in header file "ElasticWave::MyElasticWaveSolver.h".
  // Tip: See header file "ElasticWave::AbstractMyElasticWaveSolver.h" for toolkit generated compile-time 
  //      constants such as Order, NumberOfVariables, and NumberOfParameters.
  pointSourceLocation[0][0] = 1.0;
  pointSourceLocation[0][1] = 1.0;
}

void  ElasticWave::MyElasticWaveSolver::pointSource(const double* const Q,const double* const x,const double t,const double dt, double* const forceVector, int n) {
  // Tip: You find documentation for this method in header file "ElasticWave::MyElasticWaveSolver.h".
  // Tip: See header file "ElasticWave::AbstractMyElasticWaveSolver.h" for toolkit generated compile-time 
  //      constants such as Order, NumberOfVariables, and NumberOfParameters.
  
  // @todo Please implement/augment if required
  forceVector[0] = 1.0;
  forceVector[1] = 1.0;
  forceVector[2] = 1.0;
  forceVector[3] = 1.0;
  forceVector[4] = 1.0;
  forceVector[5] = 1.0;
  forceVector[6] = 1.0;
}

