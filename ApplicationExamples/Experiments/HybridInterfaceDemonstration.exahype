/**
 * The GaugeWave is a simple analytic solution for the CCZ4 formulation of Einsteins
 * Equations. The solution is basically given by an advection of the initial data.
 * Therefore, this ID is particularly suitable for convergence studies.
 * 
 * The sine wave length is set to 1, therefore you need a minimum resolution to resolve
 * the wave. On the other hand, you might choose the simulation domain as large as you
 * want. The solution is smooth and computable with pure DG. Exact BC are appropriate.
 **/
exahype-project HybridInterfaceDemonstration

  peano-kernel-path const  = ./Peano
  exahype-path const       = ./ExaHyPE
  output-directory const   = ./ApplicationExamples/Experiments/HybridInterfaceDemonstration
  architecture const       = hsw
  plotter-subdirectory const = Writers
  
  computational-domain
    dimension const  = 3
    width            = 1.0, 1.0, 1.0
    offset           = 0.0, 0.0, 0.0
    end-time         = 1000000.0
  end computational-domain
/*
  shared-memory
    identifier       = dummy
    configure        = {}
    cores            = 1
    properties-file  = sharedmemory.properties
  end shared-memory  
  
  distributed-memory
    identifier       = static_load_balancing
    configure        = {hotspot,fair,ranks_per_node:1}
    buffer-size      = 64
    timeout          = 60
  end distributed-memory
*/
  global-optimisation
    spawn-predictor-as-background-thread = off
    spawn-amr-background-threads = off
    disable-vertex-exchange-in-time-steps = off
    time-step-batch-factor           = 0.0
    disable-metadata-exchange-in-batched-time-steps = off
    double-compression = 0.0
    spawn-double-compression-as-background-thread = on
  end global-optimisation

  solver Limiting-ADER-DG DummySolver
    variables const    = 70
    order const        = 3
    maximum-mesh-size  = 0.33339
    maximum-mesh-depth = 0
    time-stepping      = global 
    type const         = nonlinear
    terms const        = flux,ncp,source
    optimisation const = generic
    language const     = C
    limiter-type const             = musclhancock
    limiter-optimisation const     = generic
    limiter-language const         = C
    dmp-observables const          = 50
    dmp-relaxation-parameter       = 0.01
    dmp-difference-scaling         = 0.001
    
    constants          = foo:bar
    
    plot vtk::Cartesian::vertices::limited::ascii StandardWriter
      variables const = 6
      time      = 0.0
      repeat    = 0.0001
      output    = ./vtk-output/standard
    end plot
    
  end solver
end exahype-project
/**
 * End note:
 * This ExaHyPE specfile was generated by the Mexa parameter framework
 * out of the file AstroApplications/CCZ4.mexa
 **/

