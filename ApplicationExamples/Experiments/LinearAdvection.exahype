/**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon 
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/
 
/**

 Linear Advection,

 This is a hijacked Euler solver that
 is used for computing linear advection problems.

 We thus set all the fluxes and eigenvalues
 of every other component than the density 
 to zero.
 The flux dx1 tensor then has the form
 F= ( \rho * v_x, \rho * v_y, \rho * v_z)^T.
 */
exahype-project  Euler

  peano-kernel-path const          = ./Peano
  exahype-path const               = ./ExaHyPE
  output-directory const           = ./ApplicationExamples/Experiments/LinearAdvection
  architecture const               = noarch

  computational-domain
    dimension const                = 2
    width                    = 1.0, 1.0, 1.0
    offset                   = 0.0, 0.0, 0.0
    end-time                 = 0.8
  end computational-domain

  shared-memory
    identifier               = dummy
    configure                = {}
    cores                    = 1
    properties-file          = sharedmemory.properties
  end shared-memory

  distributed-memory
    identifier               = static_load_balancing
    configure                = {greedy,FCFS}
    buffer-size              = 64
    timeout                  = 60
  end distributed-memory

  global-optimisation
    fuse-algorithmic-steps          = none
    fuse-algorithmic-steps-rerun-factor   = 0.99
    fuse-algorithmic-steps-diffusion-factor   = 0.99
    spawn-predictor-as-background-thread = off
    spawn-amr-background-threads         = off
    /* 0.0 und 0.8 sind schon mal zwei Faktoren */
    disable-vertex-exchange-in-time-steps = on
    time-step-batch-factor           = 0.0
    disable-metadata-exchange-in-batched-time-steps = off
    end global-optimisation
	
  solver ADER-DG MyEulerSolver
    variables const         = 5
    order const             = 3
    /* 27 points: 0.05, 9 points: 0.15 */
    maximum-mesh-size = 0.12
    time-stepping     = global
    type const = nonlinear
	terms const = flux
	optimisation const = generic
    language const          = C

    plot vtk::Cartesian::cells::ascii
      variables const = 5
      time      = 0.0
      repeat    = 0.025
      output    = ./conserved
      select    = x:0.0,y:0.0
    end plot

    /* this is the fake plotter used to compute global integrals */
    /* it has no output fields. */
    plot vtk::Cartesian::vertices::ascii
      variables const = 0
      time = 0.0
      repeat = 0.05
      output = ./output/these-files-should-not-be-there
      select    = x:0.0,y:0.0
    end plot

    plot vtk::Cartesian::vertices::ascii
      variables const = 5
      time      = 0.0
      repeat    = 0.05
      output    = ./primitive
      select    = x:0.0,y:0.0
    end plot

    plot vtk::Cartesian::vertices::ascii
      variables const = 5
      time      = 0.0
      repeat    = 0.05
      output    = ./exact-primitive
      select    = x:0.0,y:0.0
    end plot

    /* Do not need the time series for a point in the moment
    plot probe::ascii
      variables const = 5
      time      = 0.0
      repeat    = 0.05
      output    = ./seismogram
      select    = {x:0.2,y:0.2}
    end plot
    */
  end solver
end exahype-project
