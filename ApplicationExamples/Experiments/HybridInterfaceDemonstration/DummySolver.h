#ifndef __DummySolver_CLASS_HEADER__
#define __DummySolver_CLASS_HEADER__

// This file is generated by the ExaHyPE toolkit.
// Please do not modify - it will be overwritten by the next
// ExaHyPE toolkit call.
// 
// ========================
//   www.exahype.eu
// ========================

#include <string>

#include "exahype/solvers/LimitingADERDGSolver.h"
#include "DummySolver_ADERDG.h"
#include "DummySolver_FV.h"

namespace HybridInterfaceDemonstration{
  class DummySolver;
}

class HybridInterfaceDemonstration::DummySolver: public exahype::solvers::LimitingADERDGSolver {  
  public:
    static constexpr int NumberOfVariables      = HybridInterfaceDemonstration::AbstractDummySolver_ADERDG::NumberOfVariables;
    static constexpr int NumberOfParameters     = HybridInterfaceDemonstration::AbstractDummySolver_ADERDG::NumberOfParameters;
    static constexpr int Order                  = HybridInterfaceDemonstration::AbstractDummySolver_ADERDG::Order;
    static constexpr int NumberOfDMPObservables = HybridInterfaceDemonstration::AbstractDummySolver_ADERDG::NumberOfDMPObservables;
    static constexpr int GhostLayerWidth        = HybridInterfaceDemonstration::AbstractDummySolver_FV::GhostLayerWidth;
      
    DummySolver(
        const double maximumMeshSize,
        const int maximumMeshDepth,
        const int haloCells,
        const int haloBufferCells,
        const int limiterBufferCells,
        const int regularisedFineGridLevels,
        const exahype::solvers::Solver::TimeStepping timeStepping,
        const int DMPObservables,
        const double DMPRelaxationParameter,
        const double DMPDifferenceScaling
);
    
    void projectOnFVLimiterSpace(const double* const luh, double* const lim) const override;
    void projectOnDGSpace(const double* const lim, double* const luh) const override;
    bool discreteMaximumPrincipleAndMinAndMaxSearch(const double* const luh, double* const boundaryMinPerVariables, double* const boundaryMaxPerVariables) override;
    void findCellLocalMinAndMax(const double* const luh, double* const localMinPerVariables, double* const localMaxPerVariable) override;
    void findCellLocalLimiterMinAndMax(const double* const lim, double* const localMinPerObservable, double* const localMaxPerObservable) override;
};

#endif // __DummySolver_CLASS_HEADER__