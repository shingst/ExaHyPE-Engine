{# /**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/ #}

#include <cstring>
#include <vector>
 
#include "{{pathToOptKernel}}/Kernels.h"
#include "{{pathToOptKernel}}/Quadrature.h"
#include "{{pathToOptKernel}}/DGMatrices.h"

#include "{{solverHeader}}"

std::vector<int>* {{codeNamespace}}::getPointSources(
  {{solverName}}& solver,
  const double* const center,
  const double dx //Assume dx[0] == dx[1] == dx[2]
){
  std::vector<int>* pointSources=nullptr;
  for (int m =0 ; m < {{nPointSources}}; m++) {
    const double* const x_ps = solver.pointSourceLocation[m];
    if(   center[0]-0.5*dx <= x_ps[0] && x_ps[0] <= center[0]+0.5*dx
       && center[1]-0.5*dx <= x_ps[1] && x_ps[1] <= center[1]+0.5*dx
{% if nDim == 3 %}
       && center[2]-0.5*dx <= x_ps[2] && x_ps[2] <= center[2]+0.5*dx
{% endif %}
      ){
      
      if(pointSources==nullptr){
        pointSources=new std::vector<int>();  //needs to be deleted in deltaDistribution
      }
      pointSources->push_back(m);
    }
  }
  return pointSources;
}
