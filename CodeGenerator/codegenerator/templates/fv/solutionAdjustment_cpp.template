/**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/

#include "{{pathToOptKernel}}/Kernels.h"

#include "{{solverHeader}}"

void {{codeNamespace}}::solutionAdjustment(
    {{solverName}}& solver,
    double* luh, 
    const double* center,
    const double dx, 
    const double t,
    const double dt
) {

  double x0[{{nDim}}];
  
{% if nDim == 3 %}
  for (int z = {{ghostLayerWidth}}; z < {{ghostLayerWidth+nDof}}; z++) {
    x0[2] = center[2] + dx * (z*{{1.0/nDof}} - {{(2.0*ghostLayerWidth-1.0)/(2.0*nDof) + 0.5}});
{% endif %}
    for (int y = {{ghostLayerWidth}}; y < {{ghostLayerWidth+nDof}}; y++) {
      x0[1] = center[1] + dx * (y*{{1.0/nDof}} - {{(2.0*ghostLayerWidth-1.0)/(2.0*nDof) + 0.5}});
      for (int x = {{ghostLayerWidth}}; x < {{ghostLayerWidth+nDof}}; x++) {
        x0[0] = center[0] + dx * (x*{{1.0/nDof}} - {{(2.0*ghostLayerWidth-1.0)/(2.0*nDof) + 0.5}});
        // read initial condition
        solver.{{solverName}}::adjustSolution(x0, t, dt, luh+(({% if nDim == 3 %}z*{{nDofG}}+{% endif %}y)*{{nDofG}}+x)*{{nData}});
      }
    }
{% if nDim == 3 %}
  }
{% endif %}
}