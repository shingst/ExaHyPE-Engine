/**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/

#include "{{pathToOptKernel}}/Kernels.h"

#include "{{solverHeader}}"

#include <algorithm>

void {{codeNamespace}}::ghostLayerFilling(
    double* luh,
    const double* luhNeighbour,
    const int* const neighbourPosition
) {

  // Always do the whole x dim in one copy

  // x-axis
  if (neighbourPosition[0] == -1) {
    for (int z = {{ghostLayerWidth3D}}; z < {{ghostLayerWidth3D+nDof3D}}; z++) {
      for (int y = {{ghostLayerWidth}}; y < {{ghostLayerWidth+nDof}}; y++) {
        std::copy_n(luhNeighbour+(z*{{nDofG}}+y)*{{nDofG*nData}}+{{nDof*nData}}, {{nData*ghostLayerWidth}}, luh+(z*{{nDofG}}+y)*{{nDofG*nData}});
      }
    }
  }
  if (neighbourPosition[0] == +1) {
    for (int z = {{ghostLayerWidth3D}}; z < {{ghostLayerWidth3D+nDof3D}}; z++) {
      for (int y = {{ghostLayerWidth}}; y < {{ghostLayerWidth+nDof}}; y++) {
        std::copy_n(luhNeighbour+((z*{{nDofG}}+y)*{{nDofG}}+{{ghostLayerWidth}})*{{nData}}, {{nData*ghostLayerWidth}}, luh+(z*{{nDofG}}+y)*{{nDofG*nData}}+{{(ghostLayerWidth+nDof)*nData}});
      }
    }
  }

  // y-axis
  if (neighbourPosition[1] == -1) {
    for (int z = {{ghostLayerWidth3D}}; z < {{ghostLayerWidth3D+nDof3D}}; z++) {
      for (int y = 0; y < {{ghostLayerWidth}}; y++) {
        std::copy_n(luhNeighbour+(z*{{nDofG}}+y+{{nDof}})*{{nDofG*nData}}+{{ghostLayerWidth*nData}}, {{nData*nDof}}, luh+(z*{{nDofG}}+y)*{{nDofG*nData}}+{{ghostLayerWidth*nData}});
      }
    }
  }
  if (neighbourPosition[1] == +1) {
    for (int z = {{ghostLayerWidth3D}}; z < {{ghostLayerWidth3D+nDof3D}}; z++) {
      for (int y = 0; y < {{ghostLayerWidth}}; y++) {
        std::copy_n(luhNeighbour+(z*{{nDofG}}+y+{{ghostLayerWidth}})*{{nDofG*nData}}+{{ghostLayerWidth*nData}}, {{nData*nDof}}, luh+(z*{{nDofG}}+y+{{ghostLayerWidth+nDof}})*{{nDofG*nData}}+{{ghostLayerWidth*nData}});
      }
    }
  }
{% if nDim == 3 %}

  // z-axis
  if (neighbourPosition[2] == -1) {
    for (int z = 0; z < {{ghostLayerWidth}}; z++) {
      for (int y = {{ghostLayerWidth}}; y < {{ghostLayerWidth+nDof}}; y++) {
        std::copy_n(luhNeighbour+((z+{{nDof}})*{{nDofG}}+y)*{{nDofG*nData}}+{{ghostLayerWidth*nData}}, {{nData*nDof}}, luh+(z*{{nDofG}}+y)*{{nDofG*nData}}+{{ghostLayerWidth*nData}});
      }
    }
  }
  if (neighbourPosition[2] == +1) {
    for (int z = 0; z < {{ghostLayerWidth}}; z++) {
      for (int y = {{ghostLayerWidth}}; y < {{ghostLayerWidth+nDof}}; y++) {
        std::copy_n(luhNeighbour+((z+{{ghostLayerWidth}})*{{nDofG}}+y)*{{nDofG*nData}}+{{ghostLayerWidth*nData}}, {{nData*nDof}}, luh+((z+{{ghostLayerWidth+nDof}})*{{nDofG}}+y)*{{nDofG*nData}}+{{ghostLayerWidth*nData}});
      }
    }
  }
{% endif %}
}