/////////////////////////////////////////////////
/// ExaHyPE
/// ... text ...
/// Version: 13/11/15
/////////////////////////////////////////////////
#include "peano/utils/Globals.h"

Packed-Type: int;

Constant: DIMENSIONS;
Constant: DIMENSIONS_TIMES_TWO;

class exahype::records::FiniteVolumesCellDescription {
  /**
   * Points to a solver in the solver registry.
   */
  parallelise persistent int solverNumber;
  
  /**
   * These flags indicate on which face a Riemann solve has already been
   *
   * @note we use the data type signed char even though it would be more intuitive
   * as DaStGen converts bool array specifications into bitsets.
   * Bitsets cannot be modified by multiple threads simultaneously.
   */
  parallelise persistent signed char neighbourMergePerformed[DIMENSIONS_TIMES_TWO];
  
  /**
   * Flag indicating if this cell description is processed by a background job.
   */
  persistent packed bool hasCompletedTimeStep;

  /**
  * The time step size this cell description is working with.
  */
  parallelise persistent double timeStepSize;

  /**
   * The time stamp this cell description is working with.
   */
  parallelise persistent double timeStamp;
  
  /**
   * The time step size this cell description was 
   * working with in the previous iteration.
   * 
   * Required for performing rollbacks.
   */
  parallelise persistent double previousTimeStepSize;
  
  /**
   * The time stamp this cell description was 
   * working with in the previous iteration.
   * 
   * Required for performing rollbacks.
   */
  parallelise persistent double previousTimeStamp;
  
  /**
   * Index referring to the old solution DoF associated with this cell
   * description.
   */
  persistent int solutionIndex;
  persistent int solutionAveragesIndex;
  persistent int solutionCompressedIndex;
  // pointers for direct access
  persistent pointer solution;
  persistent pointer solutionAverages;
  persistent pointer solutionCompressed;
  
  /**
   *  Index referring to the old solution DoF associated with this cell
   *  description.
   */
  persistent int previousSolutionIndex;
  persistent int previousSolutionAveragesIndex;
  persistent int previousSolutionCompressedIndex;
  // pointers for direct access
  persistent pointer previousSolution;
  persistent pointer previousSolutionAverages;
  persistent pointer previousSolutionCompressed;
  
  /**
   * Index pointing to the solution DoF extrapolated to the bounding faces of
   * the cell.
   */
  persistent int extrapolatedSolutionIndex;
  persistent int extrapolatedSolutionAveragesIndex;
  persistent int extrapolatedSolutionCompressedIndex;
  // pointers for direct access
  persistent pointer extrapolatedSolution;
  persistent pointer extrapolatedSolutionAverages;
  persistent pointer extrapolatedSolutionCompressed;
  

  enum CompressionState {
    Uncompressed,
    CurrentlyProcessed,
    Compressed
  };
  parallelise persistent packed CompressionState compressionState;

  /**
   * We use a 7 to indicate that compression does not pay off at all. Please
   * note that the encoding follows peano::heap::findMostAgressiveCompression()
   * which returns not the bytes actually used but the bytes spent on the 
   * mantissa. Less than two byes is not supported by ExaHyPE actually.
   */
  parallelise persistent packed int bytesPerDoFInPreviousSolution      from 1 to 7;
  parallelise persistent packed int bytesPerDoFInSolution              from 1 to 7;
  parallelise persistent packed int bytesPerDoFInExtrapolatedSolution  from 1 to 7;
  
  /**
   * Space-tree level of the cell this FiniteVolumesCellDescription is associated
   * with.
   */
  parallelise persistent int level;
  /**
   * Offset of the "lower left" node of the lower left ghost cell from the
   * lower left node of the cell.
   */
  parallelise persistent double offset[DIMENSIONS];
  /**
   * Dimension of the cell associated with this FiniteVolumesCellDescription in the
   * respective dimension.
   */
  parallelise persistent double size[DIMENSIONS];
  ///@}
  
  /**
   * Type of a cell description.
   * Cell descriptions of type \p Cell hold cell and face data,
   * while the ones of type \p Ancestor hold only face data.
   * Both belong to the original spacetree that
   * is constructed according to solver-based refinement criteria.
   * Helper cells of type Descendant also hold face data 
   * but belong to the virtual part of the augmented spacetree that
   * is created to store prolongated face data.
   *
   * ADERDGCellDescriptions of type \p EmptyAncestor and \p EmptyDescendant
   * do not hold face data. These types are set if the cell
   * associated to this cell description is not neighbouring
   * a cell that holds a cell description of type \p
   * Cell.
   *
   * RemoteBoundaryDescendant and RemoteBoundaryAncestor are set
   * as type of an ADERDGCellDescription if the ADERDGCellDescription
   * needs to communicate data to a neighbour process, or a worker/master
   * process.
   */

  enum Type {
    Erased,
    Ancestor,
    Cell,
    Descendant
  };

  /**
   * @defgroup AMRInfo AMR information
   *
   * Additional information that is necessary to realise adaptive mesh
   * refinement (AMR).
   */
  ///@{
  /**
   * The type of this ADERDGCellDescription. See the documentation of Cell for
   * more details.
   */
  parallelise persistent Type type;

  /**
   * The index of the ADERDGCellDescription that is the parent of
   * this ADERDGCellDescription or "-1" if no parent is specified.
   */
  parallelise persistent int parentIndex;

  enum RefinementEvent {
    /**
     * In this state, the cell description is ready to
     * perform operations of the ADER-DG method, e.g.,
     * the Riemann solve, the solution update etc.
     */
    None,
    /**
     * If this refinement event is set, 
     * the parent Ancestor asks its
     * children if they want to be erased. If not so,
     * the children change the RefinementEvent 
     * of the parent to None. If so,
     * they leave the parent's RefinementEvent
     * unchanged. 
     */
    ErasingChildrenRequested,
    /**
     * After all children of a parent left
     * the parent's refinement event ErasingChildrenRequested
     * unchanged, the parent changes its state
     * to this event. In the next iteration
     * the parent's children need to restrict their
     * solution up to the parent and
     * the child cell descriptions need to be
     * removed from the grid.
     */
    ErasingChildren,   
    /**
     * Change children to descendants.
     * An Ancestor cell description can adopt 
     * this status if its children can be erased 
     * w.r.t. the physics based refinement criterion
     * however one of the children is parent itself
     * to children of type Descendant.
     * In this case, we do not erase the children
     * of the Ancestor but change their type to (Empty)Descendant.
     */
    ChangeChildrenToDescendantsRequested,
    /**
     * Change children to descendants.
     * An Ancestor cell description can adopt 
     * this status if its children can be erased 
     * w.r.t. the physics based refinement criterion
     * however one of the children is parent itself
     * to children of type Descendant.
     * In this case, we do not erase the children
     * of the Ancestor but change their type to (Empty)Descendant.
     */
    ChangeChildrenToDescendants,
    
    RefiningRequested,           
    Refining,                    
    
    /**
     * This refinement event is set on 
     * a cell description of type 
     * Descendant or Cell in every 
     * grid setup iteration
     * if no other event is set. 
     * 
     * If the cell description has children,
     * the first traversed child sets
     * this event to DeaugmentingChildrenRequestedTriggered.
     * 
     * We have to rely on this mechanism since we
     * cannot guess based on the cell description type if
     * a cell description has children as opposed to the
     * physics based refinement where we have
     * Ancestor and EmptyAncestor parent cell descriptions and
     * Cell child cell descriptions.
     */
    DeaugmentingChildrenRequestedTriggered,
    
    /**
     * If this refinement event is set, 
     * the parent Descendant or Cell asks its
     * children if they want to be deaugmented. If not so,
     * the children change the RefinementEvent 
     * of the parent to None. If so,
     * they leave the parent's RefinementEvent
     * unchanged. 
     */
    DeaugmentingChildrenRequested,
    /**
     * After all children of a parent left
     * the parent's refinement event DeaugmentingChildrenRequested
     * unchanged, the parent changes its state
     * to this event. In the next iteration
     * the parent's children need to restrict their
     * solution up to the parent and
     * the child cell descriptions need to be
     * removed from the grid.
     */
    DeaugmentingChildren, 
    AugmentingRequested,         
    Augmenting                   
  };

  /**
   * Returns the refinement event.
   */
  parallelise persistent RefinementEvent refinementEvent;
  ///@}
};
