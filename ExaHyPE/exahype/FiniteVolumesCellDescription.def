/////////////////////////////////////////////////
/// ExaHyPE
/// ... text ...
/// Version: 13/11/15
/////////////////////////////////////////////////
#include "peano/utils/Globals.h"
#include "exahype/util/CopyableAtomic.h"

Packed-Type: int;

Constant: DIMENSIONS;
Constant: DIMENSIONS_TIMES_TWO;

class exahype::records::FiniteVolumesCellDescription {
  /**
   * Points to a solver in the solver registry.
   */
  parallelise persistent int solverNumber;
  
  /**
   * These flags indicate on which face a Riemann solve has already been
   *
   * @note we use the data type signed char even though it would be more intuitive
   * as DaStGen converts bool array specifications into bitsets.
   * Bitsets cannot be modified by multiple threads simultaneously.
   */
  parallelise persistent signed char neighbourMergePerformed[DIMENSIONS_TIMES_TWO];

  /**
  * The time step size this cell description is working with.
  */
  parallelise persistent double timeStepSize;

  /**
   * The time stamp this cell description is working with.
   */
  parallelise persistent double timeStamp;
  
  /**
   * The time step size this cell description was 
   * working with in the previous iteration.
   * 
   * Required for performing rollbacks.
   */
  parallelise persistent double previousTimeStepSize;
  
  /**
   * The time stamp this cell description was 
   * working with in the previous iteration.
   * 
   * Required for performing rollbacks.
   */
  parallelise persistent double previousTimeStamp;
  
  /**
   * Index referring to the old solution DoF associated with this cell
   * description.
   */
  persistent int solutionIndex;
  persistent int solutionAveragesIndex;
  persistent int solutionCompressedIndex;
  // pointers for direct access
  persistent pointer solution;
  persistent pointer solutionAverages;
  persistent pointer solutionCompressed;
  
  /**
   *  Index referring to the old solution DoF associated with this cell
   *  description.
   */
  persistent int previousSolutionIndex;
  persistent int previousSolutionAveragesIndex;
  persistent int previousSolutionCompressedIndex;
  // pointers for direct access
  persistent pointer previousSolution;
  persistent pointer previousSolutionAverages;
  persistent pointer previousSolutionCompressed;
  
  /**
   * Index pointing to the solution DoF extrapolated to the bounding faces of
   * the cell.
   */
  persistent int extrapolatedSolutionIndex;
  persistent int extrapolatedSolutionAveragesIndex;
  persistent int extrapolatedSolutionCompressedIndex;
  // pointers for direct access
  persistent pointer extrapolatedSolution;
  persistent pointer extrapolatedSolutionAverages;
  persistent pointer extrapolatedSolutionCompressed;
  

  enum CompressionState {
    Uncompressed,
    CurrentlyProcessed,
    Compressed
  };
  parallelise persistent packed CompressionState compressionState;

  /**
   * We use a 7 to indicate that compression does not pay off at all. Please
   * note that the encoding follows peano::heap::findMostAgressiveCompression()
   * which returns not the bytes actually used but the bytes spent on the 
   * mantissa. Less than two byes is not supported by ExaHyPE actually.
   */
  parallelise persistent packed int bytesPerDoFInPreviousSolution      from 1 to 7;
  parallelise persistent packed int bytesPerDoFInSolution              from 1 to 7;
  parallelise persistent packed int bytesPerDoFInExtrapolatedSolution  from 1 to 7;
  
  /**
   * Space-tree level of the cell this FiniteVolumesCellDescription is associated
   * with.
   */
  parallelise persistent int level;
  /**
   * Offset of the "lower left" node of the lower left ghost cell from the
   * lower left node of the cell.
   */
  parallelise persistent double offset[DIMENSIONS];
  /**
   * Dimension of the cell associated with this FiniteVolumesCellDescription in the
   * respective dimension.
   */
  parallelise persistent double size[DIMENSIONS];
  ///@}
  
  /**
   * Type of a cell description.
   * Cell descriptions of type \p Cell hold cell and face data,
   * while the ones of type \p Ancestor hold only face data.
   * Both belong to the original spacetree that
   * is constructed according to solver-based refinement criteria.
   * Helper cells of type Descendant also hold face data 
   * but belong to the virtual part of the augmented spacetree that
   * is created to store prolongated face data.
   *
   * ADERDGCellDescriptions of type \p EmptyAncestor and \p EmptyDescendant
   * do not hold face data. These types are set if the cell
   * associated to this cell description is not neighbouring
   * a cell that holds a cell description of type \p
   * Cell.
   *
   * RemoteBoundaryDescendant and RemoteBoundaryAncestor are set
   * as type of an ADERDGCellDescription if the ADERDGCellDescription
   * needs to communicate data to a neighbour process, or a worker/master
   * process.
   */

  enum Type {
    Erased,
    Leaf
  };

  /**
   * @defgroup AMRInfo AMR information
   *
   * Additional information that is necessary to realise adaptive mesh
   * refinement (AMR).
   */
  ///@{
  /**
   * The type of this ADERDGCellDescription. See the documentation of Cell for
   * more details.
   */
  parallelise persistent Type type;

  /**
   * The index of the ADERDGCellDescription that is the parent of
   * this ADERDGCellDescription or "-1" if no parent is specified.
   */
  parallelise persistent int parentIndex;
  ///@}
};
