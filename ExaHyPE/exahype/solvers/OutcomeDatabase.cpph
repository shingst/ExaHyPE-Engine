/**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/

#if defined(SharedTBB)
#include "OutcomeDatabase.h"

#include <tbb/concurrent_queue.h>

namespace exahype {
namespace solvers {

template<typename T>
OutcomeEntry<T>::OutcomeEntry(T* data, DeliveryStatus status)
 : _data(data),
   _status(status)
{}

template<typename T>
OutcomeEntry<T>::~OutcomeEntry()
{}

template<typename T>
DeliveryStatus OutcomeEntry<T>::getStatus() const
{
  return _status;
}

template<typename T>
T* OutcomeEntry<T>::getData() const
{
  return _data;
}

template<typename K,typename T>
OutcomeDatabase<K,T>::OutcomeDatabase()
 : _database() {
  // TODO Auto-generated constructor stub

}

template<typename K,typename T>
OutcomeDatabase<K,T>::~OutcomeDatabase() {
  // TODO Auto-generated destructor stub
}

template<typename K,typename T>
void OutcomeDatabase<K,T>::insertOutcome(const K& key, T* data, const DeliveryStatus status) {
  OutcomeEntry<T> entry (data, status);
  //tbb::concurrent_hash_map<OutcomeKey, OutcomeEntry<T>>::accessor a_jobToData;
 // bool found = _database.find(a_jobToData, key);
 // assert(!found);
  _database.insert(std::make_pair(key,entry));
}

template<typename K,typename T>
bool OutcomeDatabase<K,T>::tryFindAndExtractOutcome(K key, T **data, DeliveryStatus& status) {
  typename tbb::concurrent_hash_map<K, OutcomeEntry<T>>::accessor a_jobToData;
  bool found = _database.find(a_jobToData, key);
  if (found) {
    status = a_jobToData->second.getStatus();
    *data = a_jobToData->second.getData();
    _database.erase(a_jobToData);
    a_jobToData.release();
  }
  return found;
}

template<typename K,typename T>
int OutcomeDatabase<K,T>::size() const {
  return _database.size();
}


} /* namespace solvers */
} /* namespace exahype */
#endif