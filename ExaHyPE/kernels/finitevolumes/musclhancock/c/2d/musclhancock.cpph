/**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/
#include <cassert>
#include <cmath>
#include <limits>
#include <utility>
#include <vector>
#include <algorithm>

#include "tarch/la/Scalar.h"
#include "tarch/la/Vector.h"
#include "kernels/KernelUtils.h"

#include "kernels/finitevolumes/riemannsolvers/c/riemannsolvers.h"

#if DIMENSIONS == 2

double kernels::finitevolumes::musclhancock::c::minmod(double a, double b) {
  assert(std::isfinite(a));
  assert(std::isfinite(b));

  if (a * b < 0.0) {  // sign is different (alternative: std::signbit and xor)
    return 0.0;
  } else {
    if (std::abs(a) < std::abs(b)) {
      return a;
    } else {
      return b;
    }
  }
}


// TODO(Dominic): Work in progress
/*
 * Solves all the RiemapatchBegin-1, patchBeginnn problems that do only require
 * internal data and add the result directly onto the
 * new solution.
 * Finally add the source terms.
 */
template <bool useSource, bool useNCP, bool useFlux, bool robustDiagonalLimiting, typename SolverType>
double kernels::finitevolumes::musclhancock::c::solutionUpdate(
    SolverType& solver,double* luh,
    const tarch::la::Vector<DIMENSIONS, double>& dx,double dt) {
  constexpr int numberOfVariables  = SolverType::NumberOfVariables;
  constexpr int numberOfParameters = SolverType::NumberOfParameters;
  constexpr int numberOfData       = numberOfVariables+numberOfParameters;
  constexpr int patchSize          = SolverType::PatchSize;
  constexpr int ghostLayerWidth    = SolverType::GhostLayerWidth;
  constexpr int patchBegin         = ghostLayerWidth; // patchBegin cell is inside domain
  constexpr int patchEnd           = patchBegin+patchSize; // patchEnd cell is outside domain
  constexpr double cflFactor       = CFL; // This is not SolverType::CFL; see the docu.

  const double cellSize[2]           = {dx[0]/patchSize, dx[1]/patchSize};
  const double invCellSize[2]        = {1./cellSize[0],1./cellSize[1]};
  const double invCellSizeTimesDt[2] = {dt*invCellSize[0], dt*invCellSize[1]};

  // copy old solution into temporary variable
  constexpr int sizeOfDataOnPatch = numberOfData*(patchSize+2*ghostLayerWidth)*(patchSize+2*ghostLayerWidth);
  double luhOld[sizeOfDataOnPatch];
  std::copy_n(luh,sizeOfDataOnPatch,luhOld);

  // 1. Gather data from neighbouring cells; already done.

  // 2. Compute slopes TODO(Dominic): Make sure to only consider parameters in luh
  idx3 idx(patchSize+2*ghostLayerWidth,patchSize+2*ghostLayerWidth,numberOfData);
  idx4 idx_slope(patchSize+2*ghostLayerWidth,patchSize+2*ghostLayerWidth,DIMENSIONS,numberOfVariables);
  constexpr int variablesPerPatch = (patchSize+2*ghostLayerWidth)*(patchSize+2*ghostLayerWidth)*numberOfVariables;
  //double slopex[variablesPerPatch] = {0.0};
  //double slopey[variablesPerPatch] = {0.0};
  double slope[variablesPerPatch*DIMENSIONS] = {0.0};

  // slopex
  //  for (int j = patchBegin; j < patchEnd; j++) { // y TODO(Dominic): Previous. Takes no ghost layer corners into account.
  for (int j = patchBegin-1; j < patchEnd+1; j++) { // y TODO(Dominic): New. Takes corners of ghost layers into account. Assumes them to be set to zero.
    for (int k = patchBegin-1; k < patchEnd+1; k++) { // x
      for (int l = 0; l < numberOfVariables; l++) {
        slope[idx_slope(j, k, 0, l)] =
            minmod(luhOld[idx(j, k + 1, l)] - luhOld[idx(j, k, l)],
                luhOld[idx(j, k, l)] - luhOld[idx(j, k - 1, l)]) * invCellSize[0];
      }
    }
  }
  // slopey
  for (int j = patchBegin-1; j < patchEnd+1; j++) { // y
  //    for (int k = patchBegin; k < patchEnd; k++) { // x TODO(Dominic): Previous. Takes no ghost layer corners into account.
    for (int k = patchBegin-1; k < patchEnd+1; k++) { // x TODO(Dominic): New. Takes corners of ghost layers into account. Assumes them to be set to zero.
      for (int l = 0; l < numberOfVariables; l++) {
        slope[idx_slope(j, k, 1, l)] =
            minmod(luhOld[idx(j + 1, k, l)] - luhOld[idx(j, k, l)],
                luhOld[idx(j, k, l)] - luhOld[idx(j - 1, k, l)]) * invCellSize[1];
      }
    }
  }
   
  // TODO(JM): Please optimise
  if ( robustDiagonalLimiting ) {
    // Zero the first ghost layer cell slopes where one neighbour datum is missing
    //
    // Derivation: Go to the begin or end of a patch in x-direction: x \in \{patchBegin,patchEnd-1\}.
    // In y-direction, go before the begin or after the end of the patch: y \in \{patchBegin-1,patchEnd\}.
    // The respective solution datum is given from a face neighbour. However, a datum in x-direction right
    // beside its position was not obtained from a diagonal neighbour.
    // At the boundary between face neighbour and diagonal neighbour, the x-slope cannot
    // be computed. Slope limiting is not possible. The slope is set to zero.
    for (int l = 0; l < numberOfVariables; l++) {
      // y-slope<-0  (   y            x      slope var)
      slope[idx_slope(patchBegin, patchBegin-1, 1, l)] = 0.0;
      slope[idx_slope(patchBegin, patchEnd,     1, l)] = 0.0;
      slope[idx_slope(patchEnd-1, patchBegin-1, 1, l)] = 0.0;
      slope[idx_slope(patchEnd-1, patchEnd,     1, l)] = 0.0;
      // x-slope<-0  (   y            x      slope var)
      slope[idx_slope(patchBegin-1, patchBegin, 0, l)] = 0.0;
      slope[idx_slope(patchEnd    , patchBegin, 0, l)] = 0.0;
      slope[idx_slope(patchBegin-1, patchEnd-1, 0, l)] = 0.0;
      slope[idx_slope(patchEnd    , patchEnd-1, 0, l)] = 0.0;
    }
  }

  // 3.Boundary extrapolation (left and right value per face)
  idx3 idx_w(patchSize+2*ghostLayerWidth,patchSize+2*ghostLayerWidth,numberOfData);
  double wLx[variablesPerPatch] = {0.0};
  double wRx[variablesPerPatch] = {0.0};
  double wLy[variablesPerPatch] = {0.0};
  double wRy[variablesPerPatch] = {0.0};

  // wx
//  for (int j = patchBegin; j < patchEnd; j++) { TODO previous
  for (int j = patchBegin-1; j < patchEnd+1; j++) { // TODO new
    for (int k = patchBegin-1; k < patchEnd+1; k++) {
      for (int l = 0; l < numberOfData; l++) {
        wLx[idx_w(j, k, l)] = luhOld[idx(j, k, l)] - 0.5 * cellSize[0] * slope[idx_slope(j, k, 0, l)];
        wRx[idx_w(j, k, l)] = luhOld[idx(j, k, l)] + 0.5 * cellSize[0] * slope[idx_slope(j, k, 0, l)];
      }
    }
  }
  // wy
  for (int j = patchBegin-1; j < patchEnd+1; j++) {
//    for (int k = patchBegin; k < patchEnd; k++) { // TODO previous
    for (int k = patchBegin-1; k < patchEnd+1; k++) { // TODO new
      for (int l = 0; l < numberOfData; l++) {
        wLy[idx_w(j, k, l)] = luhOld[idx(j, k, l)] - 0.5 * cellSize[1] * slope[idx_slope(j, k, 1, l)];
        wRy[idx_w(j, k, l)] = luhOld[idx(j, k, l)] + 0.5 * cellSize[1] * slope[idx_slope(j, k, 1, l)];
      }
    }
  }

  // 4. Source evaluation, half time step evolution increment
  double flx[numberOfVariables * DIMENSIONS] = {0.0};
  double* F[2] = {flx, flx + numberOfVariables};

  double slopet[variablesPerPatch] = {0.0};

  // wx
//  for (int j = patchBegin; j < patchEnd; j++) { // TODO previous
//    for (int k = patchBegin; k < patchEnd; k++) {
  for (int j = patchBegin-1; j < patchEnd+1; j++) {  // TODO new
    for (int k = patchBegin-1; k < patchEnd+1; k++) {
      if ((j==patchBegin-1 && k==patchBegin-1) ||
          (j==patchBegin-1 && k==patchEnd) ||
          (j==patchEnd     && k==patchBegin-1) ||
          (j==patchEnd     && k==patchEnd)) {
        // skip ghostlayer corners
      } else {
        double* Qt = slopet + idx(j, k, 0);
        double* gradQ = slope + idx_slope(j, k, 0, 0);
        if(useSource || useNCP) {
          // Old code (for reference): solver.fusedSource(luh + idx(j,k,0), gradQ, Qt);
          if(useSource) {
            solver.algebraicSource(luhOld + idx(j, k, 0), Qt);
          } else {
            std::fill_n(Qt, numberOfVariables, 0.0);
          }
          if(useNCP) {
            double ncp[numberOfVariables];
            solver.nonConservativeProduct(luhOld + idx(j, k, 0), gradQ, ncp);
            for(int l=0; l<numberOfVariables; l++) {
              Qt[l] -= ncp[l];
            }
          }
        }

        if(useFlux) {
          // x fluxes
          solver.flux(wLx + idx_w(j, k, 0), F); // FLx
          for (int l = 0; l < numberOfVariables; l++) {
            Qt[l] += F[0][l] * invCellSize[0];
          }
          solver.flux(wRx + idx_w(j, k, 0), F); // FRx
          for (int l = 0; l < numberOfVariables; l++) {
            Qt[l] -= F[0][l] * invCellSize[0];
          }
          // y fluxes
          solver.flux(wLy + idx_w(j, k, 0), F); // FLy
          for (int l = 0; l < numberOfVariables; l++) {
            Qt[l] += F[1][l] * invCellSize[1];
          }
          solver.flux(wRy + idx_w(j, k, 0), F); // FRy
          for (int l = 0; l < numberOfVariables; l++) {
            Qt[l] -= F[1][l] * invCellSize[1];
          }
        }

        // evolve boundary states
        for (int l = 0; l < numberOfVariables; l++) {
          wLx[idx_w(j, k, l)] += 0.5 * dt * Qt[l];
          wRx[idx_w(j, k, l)] += 0.5 * dt * Qt[l];
          wLy[idx_w(j, k, l)] += 0.5 * dt * Qt[l];
          wRy[idx_w(j, k, l)] += 0.5 * dt * Qt[l];
        }
      }
    }
  }


  // 4. Solve Riemann problems
  double fL[numberOfVariables], fR[numberOfVariables];
  double dt_max_allowed = std::numeric_limits<double>::max();

  // x edges
  for (int j = patchBegin; j < patchEnd; j++) {
    for (int k = patchBegin-1; k < patchEnd; k++) {
      double s_max_x =
          solver.riemannSolver(
              fL, fR,
              wRx + idx_w(j, k, 0),
              wLx + idx_w(j, k+1, 0),
              0
          );
      assert(std::isfinite(s_max_x));
      assert(s_max_x>tarch::la::NUMERICAL_ZERO_DIFFERENCE);
      
      dt_max_allowed = std::min(
          dt_max_allowed, cflFactor / DIMENSIONS * cellSize[0] / s_max_x);

      for (int l=0; l<numberOfVariables; ++l) {
        luh[idx(j, k, l)]   -= invCellSizeTimesDt[0] * fL[l];  
        luh[idx(j, k+1, l)] += invCellSizeTimesDt[0] * fR[l];
      }
    }
  }

  // y edges
  for (int j = patchBegin-1; j < patchEnd; j++) {
    for (int k = patchBegin; k < patchEnd; k++) {
      double s_max_y = solver.riemannSolver(
          fL, fR,
          wRy + idx_w(j, k, 0),
          wLy + idx_w(j+1, k, 0),
          1
      );
      assert(std::isfinite(s_max_y));
      assert(s_max_y>tarch::la::NUMERICAL_ZERO_DIFFERENCE);
      
      dt_max_allowed = std::min(
          dt_max_allowed, cflFactor / DIMENSIONS * cellSize[1] / s_max_y);

      for (int l=0; l<numberOfVariables; ++l) {
        luh[idx(j, k, l)]   -= invCellSizeTimesDt[1] * fL[l];  
        luh[idx(j+1, k, l)] += invCellSizeTimesDt[1] * fR[l];
      }
    }
  }

  // TODO(guera): Early exit if dt > dt_max_allowed?!

  // 5. Evolve, evaluate source, update cells
  if(useNCP || useSource) {
    double ws [numberOfData]      = {0.0};
    double src[numberOfVariables] = {0.0};

    for (int j = patchBegin; j < patchEnd; j++) {
      for (int k = patchBegin; k < patchEnd; k++) {
        std::copy_n(luhOld + idx(j,k,0),numberOfData,ws); // copy the material parameters over
        for (int l = 0; l < numberOfVariables; l++) {
          ws[l] += 0.5 * dt * slopet[idx_w(j,k,l)]; // idx_w ~ idx_slopet
        }

        double* gradQ = slope + idx_slope(j, k, 0, 0); // const in time
        // Old code (for reference): solver.fusedSource(ws, gradQ, src);
        if(useSource) {
          solver.algebraicSource(ws, src);
        } else {
          std::fill_n(src, numberOfVariables, 0.0);
        }
        if(useNCP) {
          double ncp[numberOfVariables];
          solver.nonConservativeProduct(ws, gradQ, ncp);
          for(int l=0; l<numberOfVariables; l++) {
            src[l] -= ncp[l];
          }
        }

        for(int l = 0; l < numberOfVariables; l++) {
          luh[idx(j, k, l)] += dt * src[l];
        }
      }
    }
  }

  return dt_max_allowed;
}

#endif  // DIMENSIONS == 2
