/**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/

#include <cassert>
#include <cmath>
#include <limits>
#include <utility>
#include <vector>
#include <algorithm>

#include "tarch/la/Vector.h"
#include "kernels/KernelUtils.h"
#include "kernels/finitevolumes/riemannsolvers/c/riemannsolvers.h"

#if DIMENSIONS == 2

/**
 * Solves all the Riemann problems that do only require
 * internal data and add the result directly onto the
 * new solution. 
 * Finally add the source terms.
 */
template <bool useSource, bool useNCP, bool useFlux, bool robustDiagonalLimiting, typename SolverType>
double kernels::finitevolumes::godunov::c::solutionUpdate(
    SolverType& solver,double* luh,
    const tarch::la::Vector<DIMENSIONS, double>& dx,double dt) {  
  constexpr int numberOfVariables  = SolverType::NumberOfVariables;
  constexpr int numberOfParameters = SolverType::NumberOfParameters;
  constexpr int numberOfData       = numberOfVariables+numberOfParameters;
  constexpr int patchSize          = SolverType::PatchSize;
  constexpr int ghostLayerWidth    = SolverType::GhostLayerWidth;
  constexpr int patchBegin         = ghostLayerWidth;
  constexpr int patchEnd           = patchBegin+patchSize;
  constexpr double cflFactor       = SolverType::CFL;
    
  const double cellSize[2]           = {dx[0]/patchSize, dx[1]/patchSize};
  const double invCellSizeTimesDt[2] = {dt/cellSize[0], dt/cellSize[1]};
  
  double fL[numberOfVariables];
  double fR[numberOfVariables];

  double dt_max_allowed = std::numeric_limits<double>::max();
  
  // copy old solution into temporary variable
  constexpr int sizeOfDataOnPatch = numberOfData*(patchSize+2*ghostLayerWidth)*(patchSize+2*ghostLayerWidth);
  double luhOld[sizeOfDataOnPatch];
  std::copy_n(luh,sizeOfDataOnPatch,luhOld);

  idx3 idx(patchSize+2*ghostLayerWidth,patchSize+2*ghostLayerWidth,numberOfData);
  // x faces
  for (int j = patchBegin; j < patchEnd; j++) {
    for (int k = patchBegin-1; k < patchEnd; k++) {  // We have patchSize+1 faces in each coordinate direction
      double s_max_x = 
          solver.riemannSolver(
              fL, fR,
              luhOld + idx(j, k, 0),
              luhOld + idx(j, k+1, 0),
              0);

      // TODO(guera): Improve. I'm quite sure this is not the correct/best
      // formula. TODO(Dominic): The division by DIMENSIONS might make sure that C_x+C_y < 1
      dt_max_allowed = std::min(
          dt_max_allowed, cflFactor / DIMENSIONS * cellSize[0] / s_max_x); // TODO(Dominic): Ignore this for a while
      
      for (int l=0; l<numberOfVariables; ++l) {
        luh[idx(j, k, l)]   -= invCellSizeTimesDt[0] * fL[l];
        luh[idx(j, k+1, l)] += invCellSizeTimesDt[0] * fR[l];
      }
    }
  }

  // y edges
  for (int j = patchBegin-1; j < patchEnd; j++) {
    for (int k = patchBegin; k < patchEnd; k++) {
      double s_max_y =
          solver.riemannSolver(
          fL, fR,
          luhOld + idx(j, k, 0),
          luhOld + idx(j+1, k, 0),
          1);
      dt_max_allowed = std::min(
          dt_max_allowed, cflFactor / DIMENSIONS * cellSize[1] / s_max_y);
      
      for (int l=0; l<numberOfVariables; ++l) {
        luh[idx(j, k, l)]   -= invCellSizeTimesDt[1] * fL[l];
        luh[idx(j+1, k, l)] += invCellSizeTimesDt[1] * fR[l];
      }
    }
  }

  // 5. Add the source terms 
  if (useSource) {
    double  source[numberOfVariables] = {0.0};
  
    for (int j = patchBegin; j < patchEnd; j++) {
      for (int k = patchBegin; k < patchEnd; k++) {
        // TODO: Probably call fusedSource here instead with gradQ=0.
        solver.algebraicSource(luhOld + idx(j, k, 0), source);

        for (int l = 0; l < numberOfVariables; l++) {
          // in Godunov 1st order, we have piecewise constant data and thus
          // no contribution from BgradQ (solver.cnp) to the solution, cf.
          // http://dx.doi.org/10.1016/j.apnum.2016.02.001  (eq 36),
          // term \delta Q/\delta x is vanishing.
          luh[idx(j, k, l)] += dt * source[l];
        }
      }
    }
  }
  
  return dt_max_allowed;
}

#endif  // DIMENSIONS == 2
