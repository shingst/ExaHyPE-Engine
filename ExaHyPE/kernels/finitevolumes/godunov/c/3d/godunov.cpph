/**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 *
 * @authors: Dominic E. Charrier, Sven Koeppel, Fabian Guera, Tobias Weinzierl, Michael Dumbser
 **/
#include <cassert>
#include <cmath>
#include <limits>
#include <utility>
#include <vector>
#include <algorithm>

#include "tarch/la/Vector.h"
#include "kernels/KernelUtils.h"

#include "kernels/finitevolumes/riemannsolvers/c/riemannsolvers.h"

#if DIMENSIONS == 3

/**
 * Solves all the Riemann problems that do only require
 * internal data and add the result directly onto the
 * new solution. 
 * Finally add the source terms.
 */
template <bool useSource, bool useNCP, bool useFlux, bool robustDiagonalLimiting, typename SolverType>
double kernels::finitevolumes::godunov::c::solutionUpdate(
    SolverType& solver,
    double* luh_new, const double* luh,
    const tarch::la::Vector<DIMENSIONS, double>& dx,double dt) {
  constexpr int numberOfVariables  = SolverType::NumberOfVariables;
  constexpr int numberOfParameters = SolverType::NumberOfParameters;
  //constexpr int numberOfData       = numberOfVariables+numberOfParameters;
  constexpr int patchSize          = SolverType::PatchSize;
  constexpr int ghostLayerWidth    = SolverType::GhostLayerWidth;
  constexpr int patchBegin         = ghostLayerWidth;
  constexpr int patchEnd           = patchBegin+patchSize;
  constexpr double cflFactor       = SolverType::CFL;
  
  idx4 idx(patchSize+2*ghostLayerWidth,patchSize+2*ghostLayerWidth,patchSize+2*ghostLayerWidth,numberOfVariables+numberOfParameters);
  
  const double cellSize[3]           = {dx[0]/patchSize, dx[1]/patchSize, dx[2]/patchSize};
  const double invCellSizeTimesDt[3] = {dt/cellSize[0], dt/cellSize[1], dt/cellSize[2]};
  
  // Solve Riemann problems
  double dt_max_allowed = std::numeric_limits<double>::max();
  
  // x edges 
  double fL[numberOfVariables];
  double fR[numberOfVariables];
  for (int i = patchBegin; i < patchEnd; i++) {
  for (int j = patchBegin; j < patchEnd; j++) {
  for (int k = patchBegin-1; k < patchEnd; k++) {  // We have patchSize+1 faces in each coordinate direction
    const double s_max_x = 
        solver.riemannSolver(
            fL, fR,
            luh + idx(i,j, k, 0),
            luh + idx(i,j, k+1, 0), 
            0/*x-axis*/);
    // TODO(guera): Improve. I'm quite sure this is not the correct/best
    // formula. TODO(Dominic): The division by DIMENSIONS might make sure that C_x+C_y < 1
    dt_max_allowed = std::min(
        dt_max_allowed, cflFactor / DIMENSIONS * cellSize[0] / s_max_x); // TODO(Dominic): Ignore this for a while
    
    for (int l=0; l<numberOfVariables; ++l) {
      luh_new[idx(i,j, k, l)]   -= invCellSizeTimesDt[0] * fL[l];  
      luh_new[idx(i,j, k+1, l)] += invCellSizeTimesDt[0] * fR[l];
    }
  }
  }
  }

  // y edges
  for (int i = patchBegin; i < patchEnd; i++) {
  for (int j = patchBegin-1; j < patchEnd; j++) {
  for (int k = patchBegin; k < patchEnd; k++) {
    const double s_max_y =
      solver.riemannSolver(
        fL, fR,
        luh + idx(i, j, k,0),
        luh + idx(i, j+1, k,0), 
        1/*y-axis*/);
    dt_max_allowed = std::min(
        dt_max_allowed, cflFactor / DIMENSIONS * cellSize[1] / s_max_y);
    
    for (int l=0; l<numberOfVariables; ++l) {
      luh_new[idx(i, j, k,l)]   -= invCellSizeTimesDt[1] * fL[l];  
      luh_new[idx(i, j+1, k,l)] += invCellSizeTimesDt[1] * fR[l];
    }
  }
  }
  }
  
  // z edges
  for (int i = patchBegin-1; i < patchEnd; i++) {
  for (int j = patchBegin; j < patchEnd; j++) {
  for (int k = patchBegin; k < patchEnd; k++) {
    const double s_max_z =
      solver.riemannSolver(
        fL, fR,
        luh + idx(i, j,k,0),
        luh + idx(i+1, j,k,0), 
        2/*z-axis*/);
    dt_max_allowed = std::min(
        dt_max_allowed, cflFactor / DIMENSIONS * cellSize[2] / s_max_z);
    
    for (int l=0; l<numberOfVariables; ++l) {
      luh_new[idx(i, j,k,l)]   -= invCellSizeTimesDt[2] * fL[l];  
      luh_new[idx(i+1, j,k,l)] += invCellSizeTimesDt[2] * fR[l];
    }
  }
  }
  }

  // 5. Add the source terms 
  if (useSource) {
    double  source[numberOfVariables] = {0.0};
    
    for (int i = patchBegin; i < patchEnd; i++) {
    for (int j = patchBegin; j < patchEnd; j++) {
    for (int k = patchBegin; k < patchEnd; k++) {
      // TODO: Probably call fusedSource here instead with gradQ=0.
      solver.algebraicSource(&luh[idx(i,j,k,0)], source);

      for (int l = 0; l < numberOfVariables; l++) {
        // No BgradQ contribution as this is first order, cf. 2D godunov.
        luh_new[idx(i,j,k,l)] += dt * source[l];
      }
    }
    }
    }
  }
  
  return dt_max_allowed;
}

#endif  // DIMENSIONS == 3
