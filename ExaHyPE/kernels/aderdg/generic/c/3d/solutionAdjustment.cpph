/**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon 
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/
 
#include "kernels/GaussLegendreBasis.h"
#include "tarch/la/Vector.h"

template <typename SolverType>
void kernels::aderdg::generic::c::solutionAdjustment(
    SolverType& solver,
    double* luh, const tarch::la::Vector<DIMENSIONS, double>& center,
    const tarch::la::Vector<DIMENSIONS, double>& dx, const double t,
    const double dt) {
  constexpr int numberOfVariables  = SolverType::NumberOfVariables;
  constexpr int numberOfParameters = SolverType::NumberOfParameters;
  constexpr int numberOfData       = numberOfVariables+numberOfParameters;
  constexpr int order              = SolverType::Order;
  constexpr int basisSize          = order+1;
  
  idx4 idx_luh(basisSize, basisSize, basisSize, numberOfData);
  
  double x[3];
  for (int i = 0; i < basisSize; i++) {  // loop over dof
    //#if defined(_GLL)
    //const double qi = kernels::gaussLobattoNodes[order][i];
    //#else
    //const double qi = kernels::gaussLegendreNodes[order][i];
    //#endif
    const double qi = SolverType::nodes[order][i];
    for (int j = 0; j < basisSize; j++) {
      //#if defined(_GLL)
      //const double qj = kernels::gaussLobattoNodes[order][j];
      //#else
      //const double qj = kernels::gaussLegendreNodes[order][j];
      //#endif
      const double qj = SolverType::nodes[order][j];
      for (int k = 0; k < basisSize; k++) {
        //#if defined(_GLL)
        //const double qk = kernels::gaussLobattoNodes[order][k];
        //#else
        //const double qk = kernels::gaussLegendreNodes[order][k];
        //#endif
        const double qk = SolverType::nodes[order][k];
        
        x[2] = center[2] + dx[2] * (qi - 0.5);
        x[1] = center[1] + dx[1] * (qj - 0.5);
        x[0] = center[0] + dx[0] * (qk - 0.5);
        
        solver.adjustPointSolution(x, t, dt, luh + idx_luh(i,j,k,0));

      }
    }
  }
}
