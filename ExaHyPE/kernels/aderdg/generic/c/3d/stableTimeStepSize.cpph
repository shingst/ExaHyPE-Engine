/**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon 
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/

template <typename SolverType, bool useViscousFlux>
double kernels::aderdg::generic::c::stableTimeStepSize(
    SolverType& solver,
    const double* const luh,
    const tarch::la::Vector<DIMENSIONS, double>& dx) {
  constexpr int numberOfVariables  = SolverType::NumberOfVariables;
  constexpr int numberOfParameters = SolverType::NumberOfParameters;
  constexpr int numberOfData       = numberOfVariables+numberOfParameters;
  constexpr int order              = SolverType::Order;
  constexpr int basisSize          = order+1;
  constexpr double cflFactor       = SolverType::CFL;
  constexpr double PNPM            = SolverType::PNPM;

  const double invDx[3] = { 1.0/dx[0], 1.0/dx[1], 1.0/dx[2] };

  idx4 idx_luh(basisSize, basisSize, basisSize, numberOfData);

  double dt = std::numeric_limits<double>::max();
  double lambda[numberOfVariables] = {0.0};
  for (int i = 0; i < basisSize; i++) {
      for (int j = 0; j < basisSize; j++) {
          for (int k = 0; k < basisSize; k++) {
              double denominator = 0.0;
              for (int d = 0; d < DIMENSIONS; d++) {
                  solver.eigenvalues(luh + idx_luh(i,j,k,0), d, lambda);

                  double maxEigenvalue = 0.0;
                  for (int ivar = 0; ivar < numberOfVariables; ivar++) {
                      maxEigenvalue = std::max(fabs(lambda[ivar]), maxEigenvalue);
                  }
                  if(useViscousFlux){
                      solver.viscousEigenvalues(luh + idx_luh(i,j,k,0), d, lambda);

                      double maxEigenvalueV = 0.0;
                      for (int ivar = 0; ivar < numberOfVariables; ivar++) {
                          maxEigenvalueV = std::max(fabs(lambda[ivar]), maxEigenvalueV);
                      }
                      maxEigenvalue += maxEigenvalueV * (2.0/PNPM) * invDx[d];
                  }
                  if(maxEigenvalue*invDx[d]>50) {   
                    std::cout<< "max eigenvalue" << maxEigenvalue<<" invDx " <<invDx[d]<<std::endl; 
                  }
                
                  denominator += maxEigenvalue * invDx[d];
              }
            //  if(cflFactor * PNPM/denominator < 0.005) {
            //     std::cout<< "max eigenvalue" << maxEigenvalue<<std::endl; 
            //     std::cout<< denominator<< std::endl;
            //  } 
            
              dt = std::min(dt, cflFactor * PNPM / denominator);
          }
      }
  }

  return dt;
}
