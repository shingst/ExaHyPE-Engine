/**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon 
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/

#include "kernels/aderdg/generic/Kernels.h"

#include <algorithm>

#if defined(_GLL)
#include "kernels/GaussLobattoBasis.h"
#else
#include "kernels/GaussLegendreBasis.h"
#endif      

#include "kernels/KernelUtils.h"
#include "kernels/aderdg/generic/c/computeGradients.cpph"

#if DIMENSIONS == 3

template <bool useGradientFlux, typename SolverType>
void kernels::aderdg::generic::c::boundaryConditions(
    SolverType& solver,
    double* FOut,
    double* QOut,
    const double* const FIn,
    const double* const QIn,
    const double* const gradQIn,
    const tarch::la::Vector<DIMENSIONS, double>& cellCentre,
    const tarch::la::Vector<DIMENSIONS,double>& cellSize,
    const double t,const double dt,
    const int faceIndex,
    const int normalNonZero) {
  constexpr int numberOfVariables  = SolverType::NumberOfVariables;
  constexpr int numberOfParameters = SolverType::NumberOfParameters;
  constexpr int numberOfData       = numberOfVariables+numberOfParameters;
  constexpr int order              = SolverType::Order;
  constexpr int basisSize          = order+1;

  // Compute if face is "left" (0,2,4) or "right" face (1,2,3).
  const int f = faceIndex-2*normalNonZero;

  // Determine the free directions from the non-zero normal entry.
  // TODO(Dominic) I might have confused these directions. Check it again.
  int d1=0;
  int d2=0;
  switch(normalNonZero) {
  case 0:
    d1=1;
    d2=2;
    break;
  case 1:
    d1=0;
    d2=2;
    break;
  case 2:
    d1=0;
    d2=1;
    break;
  default:
    assertionMsg(false,"normalNonZero must be either 0,1 or 2.");
    break;
  }

  idx3 idx_Q(basisSize, basisSize, numberOfData);
  idx4 idx_gradQ(basisSize, basisSize, DIMENSIONS, numberOfVariables);

  idx3 idx_F(basisSize, basisSize, numberOfVariables);

  double x[DIMENSIONS];
  x[normalNonZero] = cellCentre[normalNonZero] + (-0.5 + f)*cellSize[normalNonZero];
  for (int i = 0; i < basisSize; i++) {  // loop over dof
    //#if defined(_GLL)
    //    const double node = kernels::gaussLobattoNodes[basisSize-1][basisSize-1-i];
    //#else      
    //    const double node = kernels::gaussLegendreNodes[basisSize-1][i];
    //#endif
    double node = SolverType::nodes[basisSize-1][i];
    if (SolverType::UseLobattoBasis) { // GLL
      node = SolverType::nodes[basisSize-1][basisSize-1-i]; 
    }

    x[d2] = cellCentre[d2] + cellSize[d2] * (node - 0.5);  
    for (int j = 0; j < basisSize; j++) {  // loop over dof
      //#if defined(_GLL)
      //    const double node = kernels::gaussLobattoNodes[basisSize-1][basisSize-1-j];
      //#else      
      //    const double node = kernels::gaussLegendreNodes[basisSize-1][j];
      //#endif
      double node = SolverType::nodes[basisSize-1][j];
      if (SolverType::UseLobattoBasis) { // GLL
        node = SolverType::nodes[basisSize-1][basisSize-1-j]; 
      }

      x[d1] = cellCentre[d1] + cellSize[d1] * (node - 0.5);

      if (useGradientFlux) {
        assertion1(gradQIn != nullptr, useGradientFlux);
        // TODO(Lukas) Make more elegant if NOT using gradient.
        solver.boundaryValues(
            x,t,dt,faceIndex,normalNonZero,
            FIn  + idx_F(i,j,0), QIn  + idx_Q(i,j,0), gradQIn + idx_gradQ(i,j,0,0),
            FOut + idx_F(i,j,0), QOut + idx_Q(i,j,0)
        );
      } else {
        solver.boundaryValues(
            x,t,dt,faceIndex,normalNonZero,
            FIn  + idx_F(i,j,0), QIn  + idx_Q(i,j,0), nullptr,
            FOut + idx_F(i,j,0), QOut + idx_Q(i,j,0)
        );
      }
    }
  }
}

#endif  // DIMENSIONS == 3
