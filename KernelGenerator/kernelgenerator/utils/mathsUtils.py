##
# @file This file is part of the ExaHyPE project.
# @author ExaHyPE Group (exahype@lists.lrz.de)
#
# @section LICENSE
#
# Copyright (c) 2016  http://exahype.eu
# All rights reserved.
#
# The project has received funding from the European Union's Horizon 
# 2020 research and innovation programme under grant agreement
# No 671698. For copyrights and licensing, please consult the webpage.
#
# Released under the BSD 3 Open Source License.
# For the full license text, see LICENSE.txt


import math
from decimal import Decimal, getcontext


class MathsUtils:

    @staticmethod
    def setDecimalPrecision():
        getcontext().prec=50


    #****************************************
    #****************************************
    #****** Matrix/Vector operations ********
    #****************************************
    #****************************************

    @staticmethod
    def matrixTranspose(M):
        """Transpose a matrix M"""
        return [[M[j][i] for j in range(len(M))] for i in range(len(M[0]))]


    @staticmethod
    def matrixDot(A,B):
        """A dot B"""
        return [[sum([A[n][k]*B[k][m] for k in range(len(B))]) for m in range(len(B[0]))] for n in range(len(A))]


    @staticmethod
    def matrixInverse(M):
        """M^-1"""
        return MathsUtils.matrixInverse_Pivot(M)


    @staticmethod
    def matrixInverse_Pivot(M):
        """Compute a matrix inverse using a pivot algorithm"""
        
        n = len(M)
        # c = (M|Id)
        c = [[Decimal("0.0") for _ in range(2*n)] for _ in range(n)]
        for i in range(n):
            for j in range(n):
                c[i][j] = M[j][i]
                c[i][j+n] = Decimal("0.0")
            c[i][i+n] = Decimal("1.0")

        #Forward elimination and row swapping (if necessary)
        for i in range(n):
            ml = i
            mlV = abs(c[i][i])
            for j in range(i+1, n):
                if(abs(c[j][i]) > mlV):
                    ml = j
                    mlV = abs(c[j][i])
            for k in range(0, 2*n):
                tmp = c[ml][k]
                c[ml][k] = c[i][k]
                c[i][k] = tmp

            if c[i][i] == Decimal("0.0"):
                raise ValueError("MatrixInverse: Matrix is singular")
            
            piv = Decimal("1.0") / c[i][i]
            for k in range(0, 2*n):
                c[i][k] *= piv
            for j in range(i+1, n):
                tmp = c[j][i]
                for k in range(0, 2*n):
                    c[j][k] -= tmp*c[i][k]
        
        #Back substitution
        for i in range(n-1,-1,-1):
            for j in range(i-1,-1,-1):
                tmp = c[j][i];
                for k in range(0, 2*n):
                    c[j][k] -= tmp*c[i][k]

        return [[c[i][j+n] for i in range(n)] for j in range(n)]


    @staticmethod
    def vectorPad(v,padSize):
        """zero-pad a vector"""
        if padSize <= 0:
            return v
        return v + [Decimal("0.0") for _ in range(padSize)]


    @staticmethod
    def matrixPadAndFlatten_RowMajor(M, padSize):
        """ 
        a b c 
        d e f 
         => a b c 0 d e f 0 
        """
        result = []
        for i in range(len(M)):
            result += MathsUtils.vectorPad(M[i], padSize)
        return result


    @staticmethod
    def matrixPadAndFlatten_ColMajor(M, padSize):
        """ 
        a b c 
        d e f 
         => a d 0 b e 0 c f 0 
        """
        return MathsUtils.matrixPadAndFlatten_RowMajor(MathsUtils.matrixTranspose(M), padSize)


    #****************************************
    #****************************************
    #*********** Gauss-Legendre *************
    #****************************************
    #****************************************  
    @staticmethod
    def getGaussLegendre(nDof):
        """Return Gauss-Legendre weights, points"""
        if nDof < 1:
            raise ValueError("order must be positive")
            
        maxOrder = 15
        if nDof > maxOrder+1:
            raise ValueError("order is currently limited to {}".format(maxOrder))
            
        if nDof == 1:
            return [Decimal("1.0")], [Decimal("0.5")]

        if nDof == 2:
            return [Decimal("0.5"),Decimal("0.5")], [Decimal("0.2113248654051871177454256097490212721761991243649365619906988368"),Decimal("0.7886751345948128822545743902509787278238008756350634380093011632")]

        if nDof == 3:
            return [Decimal("0.2777777777777777777777777777777777777777777777777777777777777778"),Decimal("0.4444444444444444444444444444444444444444444444444444444444444444"),Decimal("0.2777777777777777777777777777777777777777777777777777777777777778")], [Decimal("0.1127016653792583114820734600217600389167078294708409173412426234"),Decimal("0.5"),Decimal("0.8872983346207416885179265399782399610832921705291590826587573766")]

        if nDof == 4:
            return [Decimal("0.1739274225687269286865319746109997036176743479169467702462646598"),Decimal("0.3260725774312730713134680253890002963823256520830532297537353402"),Decimal("0.3260725774312730713134680253890002963823256520830532297537353402"),Decimal("0.1739274225687269286865319746109997036176743479169467702462646598")], [Decimal("0.06943184420297371238802675555359524745213731018514118119213903955"),Decimal("0.3300094782075718675986671204483776563997120651145428237035230116"),Decimal("0.6699905217924281324013328795516223436002879348854571762964769884"),Decimal("0.9305681557970262876119732444464047525478626898148588188078609605")]

        if nDof == 5:
            return [Decimal("0.1184634425280945437571320203599586813216300011062070077914139441"),Decimal("0.2393143352496832340206457574178190964561477766715707699863638337"),Decimal("0.2844444444444444444444444444444444444444444444444444444444444444"),Decimal("0.2393143352496832340206457574178190964561477766715707699863638337"),Decimal("0.1184634425280945437571320203599586813216300011062070077914139441")], [Decimal("0.04691007703066800360118656085030351743717404461873456856311885673"),Decimal("0.2307653449471584544818427896498955975163566965472200218988841865"),Decimal("0.5"),Decimal("0.7692346550528415455181572103501044024836433034527799781011158135"),Decimal("0.9530899229693319963988134391496964825628259553812654314368811433")]

        if nDof == 6:
            return [Decimal("0.0856622461895851725201480710863664467634112507420219911993177199"),Decimal("0.1803807865240693037849167569188580558307609463733727411448696201"),Decimal("0.23395696728634552369493517199477549740582780288460526765581266"),Decimal("0.23395696728634552369493517199477549740582780288460526765581266"),Decimal("0.1803807865240693037849167569188580558307609463733727411448696201"),Decimal("0.0856622461895851725201480710863664467634112507420219911993177199")], [Decimal("0.03376524289842398609384922275300269543261713114385508756372519174"),Decimal("0.1693953067668677431693002024900473264967757178024149645927366471"),Decimal("0.3806904069584015456847491391596440322906946849299893249093024177"),Decimal("0.6193095930415984543152508608403559677093053150700106750906975823"),Decimal("0.8306046932331322568306997975099526735032242821975850354072633529"),Decimal("0.9662347571015760139061507772469973045673828688561449124362748083")]

        if nDof == 7:
            return [Decimal("0.06474248308443484663530571633954100916429370112997333198860431936"),Decimal("0.1398526957446383339507338857118897912434625326132993822685070163"),Decimal("0.1909150252525594724751848877444875669391825417669313673755417255"),Decimal("0.2089795918367346938775510204081632653061224489795918367346938776"),Decimal("0.1909150252525594724751848877444875669391825417669313673755417255"),Decimal("0.1398526957446383339507338857118897912434625326132993822685070163"),Decimal("0.06474248308443484663530571633954100916429370112997333198860431936")], [Decimal("0.02544604382862073773690515797607436879961453116469110822561544804"),Decimal("0.129234407200302780068067613359605796462926176429304869940022324"),Decimal("0.2970774243113014165466967939615192683263089929503149368064783741"),Decimal("0.5"),Decimal("0.7029225756886985834533032060384807316736910070496850631935216259"),Decimal("0.870765592799697219931932386640394203537073823570695130059977676"),Decimal("0.974553956171379262263094842023925631200385468835308891774384552")]

        if nDof == 8:
            return [Decimal("0.05061426814518812957626567715498109505769704552584247852950184903"),Decimal("0.1111905172266872352721779972131204422150654350256247823629546446"),Decimal("0.1568533229389436436689811009933006566301644995013674688451319725"),Decimal("0.1813418916891809914825752246385978060970730199471652702624115338"),Decimal("0.1813418916891809914825752246385978060970730199471652702624115338"),Decimal("0.1568533229389436436689811009933006566301644995013674688451319725"),Decimal("0.1111905172266872352721779972131204422150654350256247823629546446"),Decimal("0.05061426814518812957626567715498109505769704552584247852950184903")], [Decimal("0.01985507175123188415821956571526350478588238284927398086418011131"),Decimal("0.1016667612931866302042230317620847815814141341920175839649148525"),Decimal("0.2372337950418355070911304754053768254790178784398035711245714504"),Decimal("0.4082826787521750975302619288199080096666210935435131088414057632"),Decimal("0.5917173212478249024697380711800919903333789064564868911585942368"),Decimal("0.7627662049581644929088695245946231745209821215601964288754285496"),Decimal("0.8983332387068133697957769682379152184185858658079824160350851475"),Decimal("0.9801449282487681158417804342847364952141176171507260191358198887")]

        if nDof == 9:
            return [Decimal("0.04063719418078720598594607905526182533783086039120537535555383844"),Decimal("0.09032408034742870202923601562145640475716891086602024224916795324"),Decimal("0.1303053482014677311593714347093164248859201022186499759699985011"),Decimal("0.1561735385200014200343152032922218327993774306309523227770055828"),Decimal("0.1651196775006298815822625346434870244394053917863441672965482489"),Decimal("0.1561735385200014200343152032922218327993774306309523227770055828"),Decimal("0.1303053482014677311593714347093164248859201022186499759699985011"),Decimal("0.09032408034742870202923601562145640475716891086602024224916795324"),Decimal("0.04063719418078720598594607905526182533783086039120537535555383844")], [Decimal("0.01591988024618695508221189854816356497529759975403733522498834408"),Decimal("0.08198444633668210285028510596513256172794664093766200194781401018"),Decimal("0.1933142836497048013456489803292629076071396975297176535635935289"),Decimal("0.3378732882980955354807309926783316957140218696315134555864762616"),Decimal("0.5"),Decimal("0.6621267117019044645192690073216683042859781303684865444135237384"),Decimal("0.8066857163502951986543510196707370923928603024702823464364064711"),Decimal("0.9180155536633178971497148940348674382720533590623379980521859898"),Decimal("0.9840801197538130449177881014518364350247024002459626647750116559")]

        if nDof == 10:
            return [Decimal("0.03333567215434406879678440494666589642893241716007907256434744081"),Decimal("0.07472567457529029657288816982884866620127831983471368391773863438"),Decimal("0.1095431812579910219977674671140815962293859352613385449404782718"),Decimal("0.1346333596549981775456134607847346764298799692304418979002816381"),Decimal("0.1477621123573764350869464973256691647105233585134268006771540149"),Decimal("0.1477621123573764350869464973256691647105233585134268006771540149"),Decimal("0.1346333596549981775456134607847346764298799692304418979002816381"),Decimal("0.1095431812579910219977674671140815962293859352613385449404782718"),Decimal("0.07472567457529029657288816982884866620127831983471368391773863438"),Decimal("0.03333567215434406879678440494666589642893241716007907256434744081")], [Decimal("0.01304673574141413996101799395777397328586502665380894038439396665"),Decimal("0.06746831665550774463395165578825347573622849251733477373902013408"),Decimal("0.1602952158504877968828363174425632121153526440825952661675914055"),Decimal("0.2833023029353764046003670284171079188999640811718767517486492434"),Decimal("0.4255628305091843945575869994351400076912175702896541521460053732"),Decimal("0.5744371694908156054424130005648599923087824297103458478539946268"),Decimal("0.7166976970646235953996329715828920811000359188281232482513507566"),Decimal("0.8397047841495122031171636825574367878846473559174047338324085945"),Decimal("0.9325316833444922553660483442117465242637715074826652262609798659"),Decimal("0.9869532642585858600389820060422260267141349733461910596156060333")]

        if nDof == 11:
            return [Decimal("0.02783428355808683324137686022127428936425781284844907417419214284"),Decimal("0.06279018473245231231734714961197005009880789569770175033196700541"),Decimal("0.09314510546386712571304882071582794584564237402010170589075320209"),Decimal("0.1165968822959952399592618524215875697158990861584792545136598611"),Decimal("0.1314022722551233310903444349452545976863823388015722781900276857"),Decimal("0.1364625433889503153572417641681710945780209849473918737988002057"),Decimal("0.1314022722551233310903444349452545976863823388015722781900276857"),Decimal("0.1165968822959952399592618524215875697158990861584792545136598611"),Decimal("0.09314510546386712571304882071582794584564237402010170589075320209"),Decimal("0.06279018473245231231734714961197005009880789569770175033196700541"),Decimal("0.02783428355808683324137686022127428936425781284844907417419214284")], [Decimal("0.01088567092697150359803099943857130461428879554010779228709946701"),Decimal("0.05646870011595235046242111534803636668416212438734280751629447223"),Decimal("0.1349239972129753379532918739844232709751784689869348440108108302"),Decimal("0.2404519353965940920371371652706952227598864424400357554895386943"),Decimal("0.3652284220238275138342340072995692376601890687804738591880371841"),Decimal("0.5"),Decimal("0.6347715779761724861657659927004307623398109312195261408119628159"),Decimal("0.7595480646034059079628628347293047772401135575599642445104613057"),Decimal("0.8650760027870246620467081260155767290248215310130651559891891698"),Decimal("0.9435312998840476495375788846519636333158378756126571924837055278"),Decimal("0.989114329073028496401969000561428695385711204459892207712900533")]

        if nDof == 12:
            return [Decimal("0.0235876681932559135973079807425085301585145369974235447802526735"),Decimal("0.05346966299765921548012735909699811210728508673516244000256302105"),Decimal("0.08003916427167311316732626477167953593600586524543208895494977208"),Decimal("0.1015837133615329608745322279048991882532590736372950731992972829"),Decimal("0.1167462682691774043804249494624390281297049860998774373652617489"),Decimal("0.1245735229067013925002812180214756054152304512848094156976755016"),Decimal("0.1245735229067013925002812180214756054152304512848094156976755016"),Decimal("0.1167462682691774043804249494624390281297049860998774373652617489"),Decimal("0.1015837133615329608745322279048991882532590736372950731992972829"),Decimal("0.08003916427167311316732626477167953593600586524543208895494977208"),Decimal("0.05346966299765921548012735909699811210728508673516244000256302105"),Decimal("0.0235876681932559135973079807425085301585145369974235447802526735")], [Decimal("0.009219682876640374654725454925359588519922400093134244768658939096"),Decimal("0.04794137181476257166076706694045190373120164539335122672296211966"),Decimal("0.1150486629028476564815530833935909620075371249905341811677904679"),Decimal("0.2063410228566912763516487905297328598154507429759737592448645602"),Decimal("0.3160842505009099031236542316781412193718199293322951893441000602"),Decimal("0.4373832957442655422637793152680734350083015418472778633935391226"),Decimal("0.5626167042557344577362206847319265649916984581527221366064608774"),Decimal("0.6839157494990900968763457683218587806281800706677048106558999398"),Decimal("0.7936589771433087236483512094702671401845492570240262407551354398"),Decimal("0.8849513370971523435184469166064090379924628750094658188322095321"),Decimal("0.9520586281852374283392329330595480962687983546066487732770378803"),Decimal("0.9907803171233596253452745450746404114800775999068657552313410609")]

        if nDof == 13:
            return [Decimal("0.02024200238265793976001079610049303002099327287249443406752330375"),Decimal("0.04606074991886422395721088797689856046184199993111841954419577367"),Decimal("0.06943675510989361923180088843443573381093135913164911382317750825"),Decimal("0.08907299038097286914002334599804899775640632533050825149339722014"),Decimal("0.10390802376844425115626160965302638169329130459975177460955556"),Decimal("0.1131415901314486192060450930198883092173788688077785099324842744"),Decimal("0.1162757766154369550972947576344179740783137386533989930593327197"),Decimal("0.1131415901314486192060450930198883092173788688077785099324842744"),Decimal("0.10390802376844425115626160965302638169329130459975177460955556"),Decimal("0.08907299038097286914002334599804899775640632533050825149339722014"),Decimal("0.06943675510989361923180088843443573381093135913164911382317750825"),Decimal("0.04606074991886422395721088797689856046184199993111841954419577367"),Decimal("0.02024200238265793976001079610049303002099327287249443406752330375")], [Decimal("0.007908472640705925263585275596445194467504719037062545652996339786"),Decimal("0.04120080038851101739672608174964024380476260494415835205235732717"),Decimal("0.09921095463334504360289675520857005484719213760474998505130764307"),Decimal("0.178825330279829889678007696502242174964151300869211571305428796"),Decimal("0.2757536244817765735610435739361800660990391662791210605208585263"),Decimal("0.3847708420224326029672359394510055823942288120582344182653692511"),Decimal("0.5"),Decimal("0.6152291579775673970327640605489944176057711879417655817346307489"),Decimal("0.7242463755182234264389564260638199339009608337208789394791414737"),Decimal("0.821174669720170110321992303497757825035848699130788428694571204"),Decimal("0.9007890453666549563971032447914299451528078623952500149486923569"),Decimal("0.9587991996114889826032739182503597561952373950558416479476426728"),Decimal("0.9920915273592940747364147244035548055324952809629374543470036602")]

        if nDof == 14:
            return [Decimal("0.0175597301658759315159164380690958903098528046385636382907499451"),Decimal("0.04007904357988010490281663853142715479184889269729738260069953274"),Decimal("0.06075928534395159234470740453623831297833467284503733614553769627"),Decimal("0.07860158357909676728480096931192107830283401866866168748465852194"),Decimal("0.09276919873896890687085829506257851812446130146866582951001746253"),Decimal("0.1025992318606478019829620328306090278551695306547097258584486451"),Decimal("0.1076319267315788950979382216581300176374987790270644001098881963"),Decimal("0.1076319267315788950979382216581300176374987790270644001098881963"),Decimal("0.1025992318606478019829620328306090278551695306547097258584486451"),Decimal("0.09276919873896890687085829506257851812446130146866582951001746253"),Decimal("0.07860158357909676728480096931192107830283401866866168748465852194"),Decimal("0.06075928534395159234470740453623831297833467284503733614553769627"),Decimal("0.04007904357988010490281663853142715479184889269729738260069953274"),Decimal("0.0175597301658759315159164380690958903098528046385636382907499451")], [Decimal("0.006858095651593830579201366647973599161954296380387059177964594111"),Decimal("0.03578255816821324133180443031106286776148039479508119064101877626"),Decimal("0.08639934246511750340510262867480251948014944926245940921964547288"),Decimal("0.1563535475941572649259900984903329312307993936264146621903667557"),Decimal("0.2423756818209229540173546407244056688455573587153469815242476155"),Decimal("0.3404438155360551197821640879157622665828693982330780217016749064"),Decimal("0.4459725256463281689668776748900826261940241972628812214795894693"),Decimal("0.5540274743536718310331223251099173738059758027371187785204105307"),Decimal("0.6595561844639448802178359120842377334171306017669219782983250936"),Decimal("0.7576243181790770459826453592755943311544426412846530184757523845"),Decimal("0.8436464524058427350740099015096670687692006063735853378096332443"),Decimal("0.9136006575348824965948973713251974805198505507375405907803545271"),Decimal("0.9642174418317867586681955696889371322385196052049188093589812237"),Decimal("0.9931419043484061694207986333520264008380457036196129408220354059")]

        if nDof == 15:
            return [Decimal("0.01537662099805863417731419678860220886087407241671703713211414275"),Decimal("0.03518302374405406235463370822533366923335401637716535991295364646"),Decimal("0.05357961023358596750593477334293465170777185787905099034351119456"),Decimal("0.06978533896307715722390239725551416126042513765775562160119556432"),Decimal("0.08313460290849696677660043024060440556545009004920645366093259528"),Decimal("0.09308050000778110551340028093321141225311300613896420140774786366"),Decimal("0.09921574266355578822805916322191966240934627997877099674236896396"),Decimal("0.101289120962780636440310099983759657419331079004738678398352058"),Decimal("0.09921574266355578822805916322191966240934627997877099674236896396"),Decimal("0.09308050000778110551340028093321141225311300613896420140774786366"),Decimal("0.08313460290849696677660043024060440556545009004920645366093259528"),Decimal("0.06978533896307715722390239725551416126042513765775562160119556432"),Decimal("0.05357961023358596750593477334293465170777185787905099034351119456"),Decimal("0.03518302374405406235463370822533366923335401637716535991295364646"),Decimal("0.01537662099805863417731419678860220886087407241671703713211414275")], [Decimal("0.006003740989757285755217140706693709426513591438119255000001242206"),Decimal("0.03136330379964704784612052614489526437800186324234777104931846182"),Decimal("0.07589670829478639189967583961289157431687191263150368295213622062"),Decimal("0.1377911343199149762919069726930309951845503527079487182242882896"),Decimal("0.2145139136957305762313866313730446793808068018586251975733672915"),Decimal("0.302924326461218315051396314509477265818623611920650872484417328"),Decimal("0.3994029530012827388496858483027018960935817727686811601920251377"),Decimal("0.5"),Decimal("0.6005970469987172611503141516972981039064182272313188398079748623"),Decimal("0.697075673538781684948603685490522734181376388079349127515582672"),Decimal("0.7854860863042694237686133686269553206191931981413748024266327085"),Decimal("0.8622088656800850237080930273069690048154496472920512817757117104"),Decimal("0.9241032917052136081003241603871084256831280873684963170478637794"),Decimal("0.9686366962003529521538794738551047356219981367576522289506815382"),Decimal("0.9939962590102427142447828592933062905734864085618807449999987578")]

        if nDof == 16:
            return [Decimal("0.01357622970587704742589028622800905175613368778338039899530515954"),Decimal("0.03112676196932394643142191849718884713749325417645342895065175791"),Decimal("0.04757925584124639240496255380112311317763175159185632907841114361"),Decimal("0.06231448562776693602623814109600821007244342961110133997237529521"),Decimal("0.07479799440828836604075086527373927448524553410391823340271098109"),Decimal("0.08457825969750126909465603951517998110581973670801414087254146784"),Decimal("0.09130170752246179443338183398460996969177811182732464120924757219"),Decimal("0.0947253052275342481426983616041415525734544941979514875187566226"),Decimal("0.0947253052275342481426983616041415525734544941979514875187566226"),Decimal("0.09130170752246179443338183398460996969177811182732464120924757219"),Decimal("0.08457825969750126909465603951517998110581973670801414087254146784"),Decimal("0.07479799440828836604075086527373927448524553410391823340271098109"),Decimal("0.06231448562776693602623814109600821007244342961110133997237529521"),Decimal("0.04757925584124639240496255380112311317763175159185632907841114361"),Decimal("0.03112676196932394643142191849718884713749325417645342895065175791"),Decimal("0.01357622970587704742589028622800905175613368778338039899530515954")], [Decimal("0.005299532504175033701922913274833686286862964171177434974388047634"),Decimal("0.02771248846338371196100579223269582745443036370446369953722317397"),Decimal("0.06718439880608412805976605114380343380633230757623664594824428722"),Decimal("0.1222977958224984830524494025762788658230931717712484951091214115"),Decimal("0.1910618777986781257766641179756044905040588911171711029481013222"),Decimal("0.2709916111713863068287902785082112132299841934822382545494226245"),Decimal("0.359198224610370543384769749269751946756965254614700099725582633"),Decimal("0.4524937450811812799073403322875209684348234721554672716513900914"),Decimal("0.5475062549188187200926596677124790315651765278445327283486099086"),Decimal("0.640801775389629456615230250730248053243034745385299900274417367"),Decimal("0.7290083888286136931712097214917887867700158065177617454505773755"),Decimal("0.8089381222013218742233358820243955094959411088828288970518986778"),Decimal("0.8777022041775015169475505974237211341769068282287515048908785885"),Decimal("0.9328156011939158719402339488561965661936676924237633540517557128"),Decimal("0.972287511536616288038994207767304172545569636295536300462776826"),Decimal("0.9947004674958249662980770867251663137131370358288225650256119524")]





    #****************************************
    #****************************************
    #*********** Gauss-Lobatto **************
    #****************************************
    #****************************************  
    @staticmethod
    def getGaussLobatto(nDof):
        """Return Gauss-Lobatto weights, points"""
        if nDof < 1:
            raise ValueError("order must be positive")
            
        maxOrder = 15
        if nDof > maxOrder+1:
            raise ValueError("order is currently limited to {}".format(maxOrder))
            
        if nDof == 1:
            return [Decimal("1.0")], [Decimal("0.5")]

        if nDof == 2:
            return [Decimal("0.5"),Decimal("0.5")], [Decimal("1.0"),Decimal("0.0")]

        if nDof == 3:
            return [Decimal("0.1666666666666666666666666666666666666666666666666666666666666667"),Decimal("0.6666666666666666666666666666666666666666666666666666666666666667"),Decimal("0.1666666666666666666666666666666666666666666666666666666666666667")], [Decimal("1.0"),Decimal("0.5"),Decimal("0.0")]

        if nDof == 4:
            return [Decimal("0.08333333333333333333333333333333333333333333333333333333333333333"),Decimal("0.4166666666666666666666666666666666666666666666666666666666666667"),Decimal("0.4166666666666666666666666666666666666666666666666666666666666667"),Decimal("0.08333333333333333333333333333333333333333333333333333333333333333")], [Decimal("1.0"),Decimal("0.7236067977499789696409173668731276235440618359611525724270897245"),Decimal("0.2763932022500210303590826331268723764559381640388474275729102755"),Decimal("0.0")]

        if nDof == 5:
            return [Decimal("0.05"),Decimal("0.2722222222222222222222222222222222222222222222222222222222222222"),Decimal("0.3555555555555555555555555555555555555555555555555555555555555556"),Decimal("0.2722222222222222222222222222222222222222222222222222222222222222"),Decimal("0.05")], [Decimal("1.0"),Decimal("0.8273268353539885718991462281234291777846040411977122787576601517"),Decimal("0.5"),Decimal("0.1726731646460114281008537718765708222153959588022877212423398483"),Decimal("0.0")]

        if nDof == 6:
            return [Decimal("0.03333333333333333333333333333333333333333333333333333333333333333"),Decimal("0.1892374781489234901583064041060123262381623469486258303271944257"),Decimal("0.277429188517743176508360262560654340428504319718040836339472241"),Decimal("0.277429188517743176508360262560654340428504319718040836339472241"),Decimal("0.1892374781489234901583064041060123262381623469486258303271944257"),Decimal("0.03333333333333333333333333333333333333333333333333333333333333333")], [Decimal("1.0"),Decimal("0.8825276619647323464255014869796690751828678442680521196637911779"),Decimal("0.6426157582403225481570754970204395359595017363632126959098752083"),Decimal("0.3573842417596774518429245029795604640404982636367873040901247917"),Decimal("0.1174723380352676535744985130203309248171321557319478803362088221"),Decimal("0.0")]

        if nDof == 7:
            return [Decimal("0.02380952380952380952380952380952380952380952380952380952380952381"),Decimal("0.1384130236807829740053502031450331467488136400899412345912671195"),Decimal("0.2158726906049313117089355111406811389654720741957730511230185948"),Decimal("0.2438095238095238095238095238095238095238095238095238095238095238"),Decimal("0.2158726906049313117089355111406811389654720741957730511230185948"),Decimal("0.1384130236807829740053502031450331467488136400899412345912671195"),Decimal("0.02380952380952380952380952380952380952380952380952380952380952381")], [Decimal("1.0"),Decimal("0.915111948139283464936016106983732569793585182435998045795406606"),Decimal("0.7344243967353571069018859409543831647027987358359223785513347297"),Decimal("0.5"),Decimal("0.2655756032646428930981140590456168352972012641640776214486652703"),Decimal("0.08488805186071653506398389301626743020641481756400195420459339398"),Decimal("0.0")]

        if nDof == 8:
            return [Decimal("0.01785714285714285714285714285714285714285714285714285714285714286"),Decimal("0.1053521135717530196914960328878781622276730830805238840416702908"),Decimal("0.1705613462417521823821203385538740858875554878027908047375010369"),Decimal("0.2062293973293519407835264857011048947419142862595424540779715294"),Decimal("0.2062293973293519407835264857011048947419142862595424540779715294"),Decimal("0.1705613462417521823821203385538740858875554878027908047375010369"),Decimal("0.1053521135717530196914960328878781622276730830805238840416702908"),Decimal("0.01785714285714285714285714285714285714285714285714285714285714286")], [Decimal("1.0"),Decimal("0.9358700742548033076687228806103317190518903348384916774597076428"),Decimal("0.7958500907165711510722553656989765949728504947586662483711297957"),Decimal("0.6046496089512394343843286301726756276477727025433405494454233462"),Decimal("0.3953503910487605656156713698273243723522272974566594505545766538"),Decimal("0.2041499092834288489277446343010234050271495052413337516288702043"),Decimal("0.06412992574519669233127711938966828094810966516150832254029235721"),Decimal("0.0")]

        if nDof == 9:
            return [Decimal("0.01388888888888888888888888888888888888888888888888888888888888889"),Decimal("0.08274768078040276252316986001460415291955361461257967072311179727"),Decimal("0.1372693562500808676403528092896863629706256104932546432683968145"),Decimal("0.1732142554865231725575657660698591439737663531254582030152941094"),Decimal("0.18575963718820861678004535147392290249433106575963718820861678"),Decimal("0.1732142554865231725575657660698591439737663531254582030152941094"),Decimal("0.1372693562500808676403528092896863629706256104932546432683968145"),Decimal("0.08274768078040276252316986001460415291955361461257967072311179727"),Decimal("0.01388888888888888888888888888888888888888888888888888888888888889")], [Decimal("1.0"),Decimal("0.9498789977057300786561726222091689790257401477830522112146563342"),Decimal("0.8385931397553688767229427135456712253555148238069532897704816877"),Decimal("0.6815587319130890793553760343543296065103211388004390751601368654"),Decimal("0.5"),Decimal("0.3184412680869109206446239656456703934896788611995609248398631346"),Decimal("0.1614068602446311232770572864543287746444851761930467102295183123"),Decimal("0.05012100229426992134382737779083102097425985221694778878534366576"),Decimal("0.0")]

        if nDof == 10:
            return [Decimal("0.01111111111111111111111111111111111111111111111111111111111111111"),Decimal("0.06665299542553505556311358537769644905481293749889870744394545177"),Decimal("0.1124446710315632260597289108655239213769564569808753205698293669"),Decimal("0.1460213418398418789377911286872219461037441948438537722956863553"),Decimal("0.163769880591948728328255263958446572353375299565261088579427715"),Decimal("0.163769880591948728328255263958446572353375299565261088579427715"),Decimal("0.1460213418398418789377911286872219461037441948438537722956863553"),Decimal("0.1124446710315632260597289108655239213769564569808753205698293669"),Decimal("0.06665299542553505556311358537769644905481293749889870744394545177"),Decimal("0.01111111111111111111111111111111111111111111111111111111111111111")], [Decimal("1.0"),Decimal("0.9597669540832294069144663304111690670767715377231379357448130723"),Decimal("0.8693869325527525375015530874299153625080925506884633427325544965"),Decimal("0.7389624749052222478305875463656289989433864466652832344571284198"),Decimal("0.5826394788331935123131098829790867666155751717747418655664497861"),Decimal("0.4173605211668064876868901170209132333844248282252581344335502139"),Decimal("0.2610375250947777521694124536343710010566135533347167655428715802"),Decimal("0.1306130674472474624984469125700846374919074493115366572674455035"),Decimal("0.04023304591677059308553366958883093292322846227686206425518692771"),Decimal("0.0")]

        if nDof == 11:
            return [Decimal("0.009090909090909090909090909090909090909090909090909090909090909091"),Decimal("0.05480613663349743223070172479017535502473707182363836539885294066"),Decimal("0.09358494089015260205407076094971745978459711881256415930366621872"),Decimal("0.124024052132014157020042433210936376671836584823856939627991361"),Decimal("0.1434395623895040443396112016657676155918267737279659141710584574"),Decimal("0.1501087977278453468929659405849882040358230834421310611786802263"),Decimal("0.1434395623895040443396112016657676155918267737279659141710584574"),Decimal("0.124024052132014157020042433210936376671836584823856939627991361"),Decimal("0.09358494089015260205407076094971745978459711881256415930366621872"),Decimal("0.05480613663349743223070172479017535502473707182363836539885294066"),Decimal("0.009090909090909090909090909090909090909090909090909090909090909091")], [Decimal("1.0"),Decimal("0.9670007152040295671661370680496918172699586650549811129458133766"),Decimal("0.8922417368315722093112089080542290517535987275470318108413176704"),Decimal("0.782617663498102503235481984738875832141526072781008487845578624"),Decimal("0.6478790677934696957159557577795287544705032171743020547339496869"),Decimal("0.5"),Decimal("0.3521209322065303042840442422204712455294967828256979452660503131"),Decimal("0.217382336501897496764518015261124167858473927218991512154421376"),Decimal("0.1077582631684277906887910919457709482464012724529681891586823296"),Decimal("0.03299928479597043283386293195030818273004133494501888705418662336"),Decimal("0.0")]

        if nDof == 12:
            return [Decimal("0.007575757575757575757575757575757575757575757575757575757575757576"),Decimal("0.04584225870659806533417129706703964315515307070889136931061275311"),Decimal("0.07898735278218505758233553135017013412555315821172857986311633305"),Decimal("0.1062542088805105726791510386834331350976728113826704167480374016"),Decimal("0.1256378015996006401466222060737980916667192386749018227851616431"),Decimal("0.1357026204553480885001441692498014201973259634460502355354961116"),Decimal("0.1357026204553480885001441692498014201973259634460502355354961116"),Decimal("0.1256378015996006401466222060737980916667192386749018227851616431"),Decimal("0.1062542088805105726791510386834331350976728113826704167480374016"),Decimal("0.07898735278218505758233553135017013412555315821172857986311633305"),Decimal("0.04584225870659806533417129706703964315515307070889136931061275311"),Decimal("0.007575757575757575757575757575757575757575757575757575757575757576")], [Decimal("1.0"),Decimal("0.9724496361114411117037900691516093568056282759750136618569459485"),Decimal("0.9096396608220033391743207908584513303452333289518221447116583631"),Decimal("0.8164380765159303388312024272218279291219218727007504964825767823"),Decimal("0.699765470482674466132174895783483450263874016397653518243968836"),Decimal("0.568276466427463777432030927869846948449207055641029192725790783"),Decimal("0.431723533572536222567969072130153051550792944358970807274209217"),Decimal("0.300234529517325533867825104216516549736125983602346481756031164"),Decimal("0.1835619234840696611687975727781720708780781272992495035174232177"),Decimal("0.09036033917799666082567920914154866965476667104817785528834163694"),Decimal("0.02755036388855888829620993084839064319437172402498633814305405146"),Decimal("0.0")]

        if nDof == 13:
            return [Decimal("0.00641025641025641025641025641025641025641025641025641025641025641"),Decimal("0.03890084337340946389679449416656679253391740874675146052331287294"),Decimal("0.06749096334480417455995738129468544462808634604633970926140225038"),Decimal("0.09182343260177504600374712937340536162323684348411899957251376073"),Decimal("0.1103838967830550430427670041896981487336314366669976023658147041"),Decimal("0.122007895153338178229289074180078106265631100208278030113407599"),Decimal("0.125965424666723368022069320770619471918173216874515575814277113"),Decimal("0.122007895153338178229289074180078106265631100208278030113407599"),Decimal("0.1103838967830550430427670041896981487336314366669976023658147041"),Decimal("0.09182343260177504600374712937340536162323684348411899957251376073"),Decimal("0.06749096334480417455995738129468544462808634604633970926140225038"),Decimal("0.03890084337340946389679449416656679253391740874675146052331287294"),Decimal("0.00641025641025641025641025641025641025641025641025641025641025641")], [Decimal("1.0"),Decimal("0.9766549233210819559484527323777245758132539443486815925946863014"),Decimal("0.9231737823259361584329628035493766797890183298572043128443235063"),Decimal("0.8430942345408787130363795197831777764645880990621922135313456729"),Decimal("0.741454910545668100873468616818466810386096631059295005238862046"),Decimal("0.6246434650531199962843368501871134907444056562464879296492579543"),Decimal("0.5"),Decimal("0.3753565349468800037156631498128865092555943437535120703507420457"),Decimal("0.258545089454331899126531383181533189613903368940704994761137954"),Decimal("0.1569057654591212869636204802168222235354119009378077864686543271"),Decimal("0.07682621767406384156703719645062332021098167014279568715567649367"),Decimal("0.02334507667891804405154726762227542418674605565131840740531369857"),Decimal("0.0")]

        if nDof == 14:
            return [Decimal("0.005494505494505494505494505494505494505494505494505494505494505495"),Decimal("0.03341864224884064231703533037302641252882102672534121692222483303"),Decimal("0.05829332794935582577049833532732511500235292745003663959760895324"),Decimal("0.08001092588147607120641049899379732025190127481644053508436702227"),Decimal("0.09741307468670805932016588918794225607431437802593237813822327477"),Decimal("0.109563126504885377435581261977083806479166057229437913068072572"),Decimal("0.1158063972342285294448141786463195951579498302583058226840088392"),Decimal("0.1158063972342285294448141786463195951579498302583058226840088392"),Decimal("0.109563126504885377435581261977083806479166057229437913068072572"),Decimal("0.09741307468670805932016588918794225607431437802593237813822327477"),Decimal("0.08001092588147607120641049899379732025190127481644053508436702227"),Decimal("0.05829332794935582577049833532732511500235292745003663959760895324"),Decimal("0.03341864224884064231703533037302641252882102672534121692222483303"),Decimal("0.005494505494505494505494505494505494505494505494505494505494505495")], [Decimal("1.0"),Decimal("0.9799675226336304506775500810077121945331957592863239681820791169"),Decimal("0.9339005269151736255001101014541321066249361765472180673794130921"),Decimal("0.8644342995456630702923362002604407978286697658471609013061219826"),Decimal("0.775319701464323527658311352929540317231069159776957066911896457"),Decimal("0.6713620066713564225219517018208373224165567670701533732774574164"),Decimal("0.5581659344418519338293883548680800839707545221281403841016624303"),Decimal("0.4418340655581480661706116451319199160292454778718596158983375697"),Decimal("0.3286379933286435774780482981791626775834432329298466267225425836"),Decimal("0.224680298535676472341688647070459682768930840223042933088103543"),Decimal("0.1355657004543369297076637997395592021713302341528390986938780174"),Decimal("0.06609947308482637449988989854586789337506382345278193262058690795"),Decimal("0.02003247736636954932244991899228780546680424071367603181792088307"),Decimal("0.0")]

        if nDof == 15:
            return [Decimal("0.004761904761904761904761904761904761904761904761904761904761904762"),Decimal("0.02901494651430062454844029201264099771784336341300745188628787274"),Decimal("0.05083003516285903380183308539440035774049179685830295249610959702"),Decimal("0.07025584990121405473022340282183644531174217730120397909471137254"),Decimal("0.08639482362680047452603854970417529367831783151340264536420857385"),Decimal("0.09849361798230667804625017325370329743180197541674521423484253266"),Decimal("0.1059867929634104600637150384886104583118278726971801315913895439"),Decimal("0.108524058174407824757475107125456775806426156076505726855377205"),Decimal("0.1059867929634104600637150384886104583118278726971801315913895439"),Decimal("0.09849361798230667804625017325370329743180197541674521423484253266"),Decimal("0.08639482362680047452603854970417529367831783151340264536420857385"),Decimal("0.07025584990121405473022340282183644531174217730120397909471137254"),Decimal("0.05083003516285903380183308539440035774049179685830295249610959702"),Decimal("0.02901494651430062454844029201264099771784336341300745188628787274"),Decimal("0.004761904761904761904761904761904761904761904761904761904761904762")], [Decimal("1.0"),Decimal("0.9826229632519192863979256960348005888538250679985466700362492292"),Decimal("0.9425410221114881494127008157411148259943570426037389864086908153"),Decimal("0.8817598449759076003520592379881458090886842601576451683773528025"),Decimal("0.803126602734922855561764969318366753589865516879959892842914752"),Decimal("0.7103190273568362404609484693692902064921691027462151841925466805"),Decimal("0.6076769776818971191128397231364588563260789506015205317372525738"),Decimal("0.5"),Decimal("0.3923230223181028808871602768635411436739210493984794682627474262"),Decimal("0.2896809726431637595390515306307097935078308972537848158074533195"),Decimal("0.196873397265077144438235030681633246410134483120040107157085248"),Decimal("0.1182401550240923996479407620118541909113157398423548316226471975"),Decimal("0.05745897788851185058729918425888517400564295739626101359130918466"),Decimal("0.01737703674808071360207430396519941114617493200145332996375077079"),Decimal("0.0")]

        if nDof == 16:
            return [Decimal("0.004166666666666666666666666666666666666666666666666666666666666667"),Decimal("0.02542518050295995270162245978272765724693591376889349195640334722"),Decimal("0.04469684866296540049552604008304185746694360501889948923847233214"),Decimal("0.0621276910662570491747681663286566003871990156349497701053386364"),Decimal("0.07701349040358214040782247024249725772270812099182066142850652273"),Decimal("0.08874595669585206265053783476417888507915737258808560675748197508"),Decimal("0.09684501191260179215845679942676101515317899700920366259183295667"),Decimal("0.1009791540891149357445995627054700602772103083214806512552975631"),Decimal("0.1009791540891149357445995627054700602772103083214806512552975631"),Decimal("0.09684501191260179215845679942676101515317899700920366259183295667"),Decimal("0.08874595669585206265053783476417888507915737258808560675748197508"),Decimal("0.07701349040358214040782247024249725772270812099182066142850652273"),Decimal("0.0621276910662570491747681663286566003871990156349497701053386364"),Decimal("0.04469684866296540049552604008304185746694360501889948923847233214"),Decimal("0.02542518050295995270162245978272765724693591376889349195640334722"),Decimal("0.004166666666666666666666666666666666666666666666666666666666666667")], [Decimal("1.0"),Decimal("0.9847840231351089664761213691837296206944953732519173650343393661"),Decimal("0.9496002665467360464973141307599247383749988045225722127122137059"),Decimal("0.8960041459309075319655441354815728529040369139900995113422053249"),Decimal("0.8261943514412465447339416098202907401607790064147871686928906421"),Decimal("0.7430297109435688058909453929234373484444886521491262856883284338"),Decimal("0.6499152344503816040491767273611503239077304884538888323271550488"),Decimal("0.5506631367609747239215165025229588812666204572000955699587751001"),Decimal("0.4493368632390252760784834974770411187333795427999044300412248999"),Decimal("0.3500847655496183959508232726388496760922695115461111676728449512"),Decimal("0.2569702890564311941090546070765626515555113478508737143116715662"),Decimal("0.1738056485587534552660583901797092598392209935852128313071093579"),Decimal("0.1039958540690924680344558645184271470959630860099004886577946751"),Decimal("0.05039973345326395350268586924007526162500119547742778728778629411"),Decimal("0.01521597686489103352387863081627037930550462674808263496566063386"),Decimal("0.0")]



    #****************************************
    #****************************************
    #*************** ADERDG *****************
    #****************************************
    #****************************************

    @staticmethod
    def baseFunc1d(xi, xin, N):
        """
        Computes the ADER-DG basis functions and their first derivative.
        
        Args:
           xi:
              The reference element point the basis functions are evaluated at.
              Here, xi refers to the greek letter that is often used as a reference element coordinate.
           xin:
              The reference element nodes corresponding to the nodal basis functions.
           N:
              Number of nodal basis functions (=order+1).
        Returns:
           phi:
              Basis function values.
           phi_xi:
              First derivatives of the basis functions.
        """
        phi    = [Decimal("1.0")]*N 
        phi_xi = [Decimal("0.0")]*N
        for m in range(0,N):
            for j in range(0,N):
                if j == m:
                    continue 
                phi[m] = phi[m]*(xi-xin[j])/(xin[m]-xin[j])
            for i in range(0,N):
                if i == m:
                    continue
                tmp = Decimal("1.0");
                for j in range(0,N):
                    if j == i:
                        continue
                    if j == m:
                        continue
                    tmp = tmp*(xi-xin[j])/(xin[m]-xin[j])
                phi_xi[m] += tmp/(xin[m]-xin[i])
        return phi, phi_xi


    @staticmethod
    def assembleStiffnessMatrix(xGPN, wGPN, N):
        """
        Computes the (reference) element stiffness matrix for an approximation of
        order N.

        Args:
           xGPN:
              Gauss-Legendre nodes (N nodes).
           wGPN:
              Gauss-Legendre weights  (N weights).
           N:
              Number of nodal basis functions (=order+1).
        Returns:
           K_xi:
              The (reference) element stiffness matrix.
        """
        # init matrix with zero
        Kxi = [[Decimal("0.0") for _ in range(N)] for _ in range(N)]
         
        for i in range(0,N):
            phi, phi_xi = MathsUtils.baseFunc1d(xGPN[i], xGPN, N)
            for k in range(0,N):
                for l in range(0,N):
                    Kxi[k][l] += wGPN[i]*phi_xi[k]*phi[l] 
            
        return Kxi


    @staticmethod
    def assembleK1(Kxi, xGPN, N):
        """
        Computes the difference between the reference element mass operator 
        evaluated at point xi=1.0 and the element stiffness matrix.
        
        Args:
           K_xi:
              The (reference) element stiffness matrix for a approximation of 
              order N.
           xGPN:
              Gauss-Legendre nodes (N nodes).
           N:
              Order of approximation corresponding to N+1 nodal basis functions.
        Returns:
           K1:
              <unknown>
        """
        phi1, _ = MathsUtils.baseFunc1d(Decimal("1.0"), xGPN, N)
        FRm = [[Decimal("0.0") for _ in range(N)] for _ in range(N)]
        
        for k in range(0, N):
            for l in range(0, N):
                FRm[k][l] = phi1[k]*phi1[l] 
        
        return [[FRm[i][j] - Kxi[i][j] for j in range(N)] for i in range(N)]


    @staticmethod
    def assembleMassMatrix(xGPN, wGPN, N):
        """
        Computes the (reference) element mass matrix for an approximation of
        order N.

        Args:
           xGPN:
              Gauss-Legendre nodes (N nodes).
           wGPN:
              N Gauss-Legendre weights (N weights).
           N:
              Number of nodal basis functions (=order+1).
        Returns:
           M_xi:
              The (reference) element mass matrix.
        """
        # init matrix with zeros
        MM = [[Decimal("0.0") for _ in range(N)] for _ in range(N)]
        
        for i in range(0,N):
            phi, _ = MathsUtils.baseFunc1d(xGPN[i], xGPN, N)
            for k in range(0,N):
                for l in range(0,N):
                    MM[k][l] += wGPN[i]*phi[k]*phi[l]
          
        return MM


    @staticmethod
    def assembleDiscreteDerivativeOperator(MM, Kxi):
        """
        Computes some derivative values for debugging purposes.

        Args:
           MM:
              The (reference) element mass matrix for a approximation of 
              order N.
           Kxi:
              The (reference) element stiffness matrix for a approximation of 
              order N.
           
        Returns:
           dudx:
              Derivative values for debugging purposes.
        """
        dudx = MathsUtils.matrixDot(MathsUtils.matrixInverse(MM),MathsUtils.matrixTranspose(Kxi))
        return dudx


    @staticmethod
    def assembleFineGridProjector1d(xGPN, j, N):
        """
        Transforms the degrees of freedom located on a coarse grid edge
        nodes to degrees of freedoms located on nodes of a fine grid edge.
        The difference in levels is 1.
        
        Let us denote by P the 1d fine grid projector (=1d equidistantGridProjector). The fine grid DoF 
        are computed according to:
        
        u^{fine;j}_i =  sum_{m} P^{j}_im u^{coarse}_m
        
        Args:
           xGPN:
              Gauss-Legendre nodes (N nodes).
           j:
              Index of one the three subintervals: 0,1, or 2.
           N:
              Number of nodal basis functions (=order+1).
        Returns:
           equidistantGridProjector:
              The corresponding degrees of freedom located at nodes of an equidistant grid over (0,1).
        """
        fineGridProjector1d = [[Decimal("0.0") for _ in range(N)] for _ in range(N)]
        
        for i in range(0, N): # Eq. basis
            phi_i, _ = MathsUtils.baseFunc1d((xGPN[i]+j)/Decimal("3.0"), xGPN, N)
            for m in range(0, N): # DG basis
                fineGridProjector1d[m][i] = phi_i[m]
        return fineGridProjector1d


    #****************************************
    #****************************************
    #*************** Limiter ****************
    #****************************************
    #****************************************

    @staticmethod
    def assembleQuadratureConversion(fromQ, toQ, N):
        """Return base conversion matrix"""
        conversionMat = [[Decimal("0.0") for _ in range(N)] for _ in range(N)]
        for i in range(0, N):
            phi, _ = MathsUtils.baseFunc1d(toQ[i], fromQ, N)
            for j in range(0, N):
                conversionMat[j][i] = phi[j] #check order
        return conversionMat


    @staticmethod
    def assembleDGToFV(nodes, weights, N, Nlim):
        """Return conversion matrix from DG grid to FV grid"""
        dg2fv = [[Decimal("0.0") for _ in range(Nlim)] for _ in range(N)]
        dxi = Decimal("0.0") / Decimal(Nlim)
        xLeft = Decimal("0.0")
        xi = Decimal("0.0")
        for i in range(0, Nlim):
            xLeft = i*dxi
            for j in range(0, N):
                xi = xLeft + dxi*nodes[j]
                phi, _ = MathsUtils.baseFunc1d(xi, nodes, N)
                for k in range(0, N):
                    dg2fv[k][i] += weights[j]*phi[k]
        return dg2fv


    @staticmethod
    def assembleFVToDG(dg2fv, weights, N, Nlim):
        """Return conversion matrix from FV grid to DG grid"""
        fv2dg = [[Decimal("0.0") for _ in range(N)] for _ in range(Nlim)]
        lsqm = [[Decimal("0.0") for _ in range(N+1)] for _ in range(N+1)]
        lsqrhs = [[Decimal("0.0") for _ in range(Nlim)] for _ in range(N+1)]
        
        dxi = Decimal("0.0") / Decimal(Nlim)
        
        for i in range(0, N):
            for j in range(0, N):
                for k in range(0, Nlim):
                    lsqm[j][i] += 2 * dg2fv[i][k] * dg2fv[j][k]
            lsqm[N][i] = weights[i]
        for i in range(0, N):
            lsqm[i][N] = -weights[i]
        lsqm[N][N] = Decimal("0.0")
        
        ilsqm = MathsUtils.matrixInverse(lsqm)
        
        for i in range(0, Nlim):
            for j in range(0, N):
                lsqrhs[j][i] = 2 * dg2fv[j][i]
            lsqrhs[N][i] = dxi;
            
        for i in range(0, Nlim):
            for j in range(0, N):
                for k in range(0, N+1):
                    fv2dg[i][j] += ilsqm[j][k] * lsqrhs[k][i]
                    
        return fv2dg
