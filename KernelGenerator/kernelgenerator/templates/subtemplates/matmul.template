{#
      C       = alpha  *   A   *    B   + beta  *  C
   (M x N)              (M x K)  (K x N)
  The gemm config (fetched through matmulKey) contains M, N, K, LDA, LDB, LDC, alpha and beta
  See matmulConfig

  String matmulKey : name of the associated config
  String A         : name of A
  String B         : name of B
  String C         : name of C
  String A_shift   : shift to the zero of A
  String B_shift   : shift to the zero of B
  String C_shift   : shift to the zero of C
  
  optional

#}
{% with %}
{# /**************************************
   **** Set up helper template values ****
   **************************************/ #}
{# replace 0 with '0' #}
{% if A_shift == 0 %}
{% set A_shift = '0' %}
{% endif %}
{% if B_shift == 0 %}
{% set B_shift = '0' %}
{% endif %}
{% if C_shift == 0 %}
{% set C_shift = '0' %}
{% endif %}
{% set conf = matmulConfigs[matmulKey] %}
{% if overrideUseLibxsmm is not defined or overrideUseLibxsmm == "BoolNotDefined" %}
  {% set overrideUseLibxsmm = useLibxsmm %}{# if no override then take the current value #}
{% endif %}
{# set arrays' name for pragma and eigen map by removing eventual index #}
{% set Ap = (A.split("["))[0] %}
{% set Bp = (B.split("["))[0] %}
{% set Cp = (C.split("["))[0] %}
{% if conf.precision == "DP" %}
{% set fpFormat = "double" %}
{% else %}
{% set fpFormat = "float" %}
{% endif %}
{% set prefetchA = (prefetchInputs and (conf.prefetchInput == "A" or conf.prefetchInput == "AB")) %}
{% set prefetchB = (prefetchInputs and (conf.prefetchInput == "B" or conf.prefetchInput == "AB")) %}
{% set prefetchC = (prefetchOutputs and conf.prefetchOutput == "C") %}
{# /*******************
   **** Sub macros ****
   ********************/ #}
{% macro prefetchArray(array, size, offset=0) %}
{% for offsetLine in range(0, size, cachelineSize)%}
_mm_prefetch({{array}}+{{offset}}{% if offsetLine != 0 %}+{{offsetLine}}{% endif %}, {{prefetchLevel}});
{% endfor%}
{% endmacro %}{##}
{% macro prefetchMatrix(matrix, fastDim, fastDimPadded, slowDim, offset) %}
{# fastDimPadded = fastDim + eventual padding (e.g. LDA vs M for A in matmul)#}
{% for slowDimTraversal in range(slowDim) %}
{{prefetchArray(matrix,fastDim,offset=slowDimTraversal~'*'~fastDimPadded~'+'~offset)}}{##}
{% endfor%}
{% endmacro %}{##}
{# /********************
   **** Subtemplate ****
   *********************/ #}
{# 

// LIBXSMM case
//-------------

#}
{% if useLibxsmm %}
{% if prefetchA %}{# check global config then local config#}
{{prefetchMatrix(A, conf.M, conf.LDA, conf.K, A_next)}}{##}
{% endif %}{# prefetch A #}
{% if prefetchB %}
{{prefetchMatrix(B, conf.K, conf.LDB, conf.N, B_next)}}{##}
{% endif %}{# prefetch B #}
{% if prefetchC %}
{{prefetchMatrix(C, conf.M, conf.LDC, conf.N, C_next)}}{##}
{% endif %}{# prefetch C #}
#ifdef USE_IPO
#pragma forceinline
#endif
{{conf.baseroutinename}}({{A}}{% if A_shift != '0' %}+{{A_shift}}{% endif %}, {{B}}{% if B_shift != '0' %}+{{B_shift}}{% endif %}, {{C}}{% if C_shift != '0' %}+{{C_shift}}{% endif %});
{# 

// Eigen case
//-----------

#}
{% elif useEigen %}
{# old direct mapper #}
{#
{
  Eigen::Map<Eigen::Matrix<{{fpFormat}},{{conf.M}},{{conf.K}}>, Eigen::{{"Aligned"if conf.alignment_A == 1 else "Unaligned"}}, Eigen::OuterStride<{{conf.LDA}}> > {{Ap}}_m({{A}}{% if A_shift != '0' %}+{{A_shift}}{% endif %}); //A = {{A}}
  Eigen::Map<Eigen::Matrix<{{fpFormat}},{{conf.K}},{{conf.N}}>, Eigen::{{"Aligned"if conf.alignment_B == 1 else "Unaligned"}}, Eigen::OuterStride<{{conf.LDB}}> > {{Bp}}_m({{B}}{% if B_shift != '0' %}+{{B_shift}}{% endif %}); //B = {{B}}
  Eigen::Map<Eigen::Matrix<{{fpFormat}},{{conf.M}},{{conf.N}}>, Eigen::{{"Aligned"if conf.alignment_C == 1 else "Unaligned"}}, Eigen::OuterStride<{{conf.LDC}}> > {{Cp}}_m({{C}}{% if C_shift != '0' %}+{{C_shift}}{% endif %}); //C = {{C}}
  {{Cp}}_m.noalias() {{ '+' if conf.beta == 1 }}= {{ '-' if conf.alpha == -1 }}{{Ap}}_m * {{Bp}}_m {% if (useTrueB and not forceCoeffMatrix) %}* {{trueAlpha}}{% endif %};
}
#}
#pragma forceinline recursive
{
  new (&{{conf.baseroutinename}}_A_map) Eigen::Map<Eigen::Matrix<{{fpFormat}},{{conf.M}},{{conf.K}}>, Eigen::{{"Aligned"if conf.alignment_A == 1 else "Unaligned"}}, Eigen::OuterStride<{{conf.LDA}}> >({{A}}{% if A_shift != '0' %}+{{A_shift}}{% endif %}); //{{conf.baseroutinename}}_A_map = {{A}}
  new (&{{conf.baseroutinename}}_B_map) Eigen::Map<Eigen::Matrix<{{fpFormat}},{{conf.K}},{{conf.N}}>, Eigen::{{"Aligned"if conf.alignment_B == 1 else "Unaligned"}}, Eigen::OuterStride<{{conf.LDB}}> >({{B}}{% if B_shift != '0' %}+{{B_shift}}{% endif %}); //{{conf.baseroutinename}}_B_map = {{B}}, assume it is aligned
  new (&{{conf.baseroutinename}}_C_map) Eigen::Map<Eigen::Matrix<{{fpFormat}},{{conf.M}},{{conf.N}}>, Eigen::{{"Aligned"if conf.alignment_C == 1 else "Unaligned"}}, Eigen::OuterStride<{{conf.LDC}}> >({{C}}{% if C_shift != '0' %}+{{C_shift}}{% endif %}); //{{conf.baseroutinename}}_C_map = {{C}}
  {{conf.baseroutinename}}_C_map.noalias() {{ '+' if conf.beta == 1 }}= {{ '-1. * ' if conf.alpha == -1 }}{{conf.baseroutinename}}_A_map * {{conf.baseroutinename}}_B_map;
}
{# 

// No BLAS case
//-------------

//for prefetching if possible weaves it in the loop

#}
{% else %}{# no BLAS library #}
{% if conf.beta == 0 %}
// reset {{C}}
for (int it_1 = 0; it_1 < {{conf.N}}; it_1++) {
  #pragma omp simd aligned({{Cp}}:ALIGNMENT)
  for (int it_3 = 0; it_3 < {{conf.M}}; it_3++) {
    {{C}}[{% if C_shift != '0' %}{{C_shift}}+{% endif %}it_1*{{conf.LDC}}+it_3] = 0.;
  }
}
{% endif %}
{% if prefetchA and conf.K != conf.N %}{# check global config then local config#}
{{prefetchMatrix(A, conf.M, conf.LDA, conf.K, A_next)}}{##}
{% endif %}{# prefetch A if K != N #}
for (int it_1 = 0; it_1 < {{conf.N}}; it_1++) {
{% if prefetchA and conf.K == conf.N %}
  {{prefetchArray(A, conf.M, offset='it_1*'~conf.LDA~'+'~A_next) | indent(2) }}{##}
{% endif %}{# prefetch N lines of A if K == N (usually N == K in most matmul) #}
{% if prefetchB %}
  {{prefetchArray(B, conf.K, offset='it_1*'~conf.LDB~'+'~B_next) | indent(2) }}{##}
{% endif %}{# prefetch B #}
{% if prefetchC %}
  {{prefetchArray(C, conf.M, offset='it_1*'~conf.LDC~'+'~C_next) | indent(2) }}{##}
{% endif %}{# prefetch C #}
  for (int it_2 = 0; it_2 < {{conf.K}}; it_2++) {
    #pragma omp simd aligned({{Cp}},{{Ap}},{{Bp}}:ALIGNMENT)
    for (int it_3 = 0; it_3 < {{conf.M}}; it_3++) {
      {{C}}[{% if C_shift != '0' %}{{C_shift}}+{% endif %}it_1*{{conf.LDC}}+it_3] {{ '+' if conf.alpha == 1 else '-' }}= {{A}}[{% if A_shift != '0' %}{{A_shift}}+{% endif %}it_2*{{conf.LDA}}+it_3] * {{B}}[{% if B_shift != '0' %}{{B_shift}}+{% endif %}it_1*{{conf.LDB}}+it_2];
    }
  }
}
{% endif %}{# end choice of BLAS lib #}
{% endwith %}