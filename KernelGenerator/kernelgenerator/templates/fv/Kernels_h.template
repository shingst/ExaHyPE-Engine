/**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/

#ifndef _EXAHYPE_{{guardNamespace}}_KERNELS_H_
#define _EXAHYPE_{{guardNamespace}}_KERNELS_H_

#ifndef __INTEL_COMPILER
#include <mm_malloc.h>
#endif
#include <vector>

//forward declaration of the user solver
namespace {{solverNamespace}} {
  class {{solverClass}};
}


{% for namespaceName in codeNamespaceList %}
namespace {{namespaceName}} {
{% endfor %}

// Main method

  /**
   * This is the CFL factor for checking if the time step size estimated at the end of the last iteration is admissible.
   * It can be chosen very close to one.
   */
  constexpr double CFL = 0.99;

  double solutionUpdate(
    {{solverName}}& solver,
    double* luh,
    const double* const cellCenter,
    const double dx,
    const double t,
    double dt
  );

// RiemannSolver

  double riemannSolver(
        {{solverName}}& solver, 
        double* fnL, 
        double *fnR, 
        const double* qL, 
        const double* qR,
        const double* gradQL, 
        const double* gradQR,
        const double dx, //Assume dx[0] == dx[1] == dx[2]
        int normalNonZero
  );

// Common

  void solutionAdjustment(
    {{solverName}}& solver,
    double* luh, 
    const double* const center,
    const double dx, //Assume dx[0] == dx[1] == dx[2]
    const double t,
    const double dt
  );


  double stableTimeStepSize(
    {{solverName}}& solver,
    const double* const luh,
    const double dx //Assume dx[0] == dx[1] == dx[2]
  );


  void boundaryLayerExtraction(
    double* luhbnd,
    const double* luh,
    const int* const boundaryPosition
  );


  void boundaryConditions(
    {{solverName}}& solver,
    double* stateOut,
    const double* const stateIn,
    const double* const cellCentre,
    const double dx, //Assume dx[0] == dx[1] == dx[2]
    const double t,
    const double dt,
    const int faceIndex,
    const int normalNonZero
  );


  void ghostLayerFillingAtBoundary(
    double* luh,
    const double* luhbnd,
    const int* const boundaryPosition
  );


  void ghostLayerFilling(
    double* luh,
    const double* luhNeighbour,
    const int* const neighbourPosition
  );


{% for namespaceName in codeNamespaceList %}
}
{% endfor %}

#include "{{pathToOptKernel}}/ConfigurationParameters.cpph"


#endif // _EXAHYPE_{{guardNamespace}}_KERNELS_H_
