{# /**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/ #}

#include "{{pathToOptKernel}}/Kernels.h"
#include "{{pathToOptKernel}}/Quadrature.h"

#include "{{solverHeader}}"

void {{codeNamespace}}::solutionAdjustment(
  {{solverName}}& solver,
  double* luh,
  const double* const center,
  const double dx, //Assume dx[0] == dx[1] == dx[2]
  const double t,
  const double dt
) {
  double x0[{{nDim}}];
  int pos = 0;

{% if nDim == 3 %}
  for (int z = 0; z < {{nDof}}; z++) {
    x0[2] = center[2] + dx * (nodes[z] - 0.5);
{% endif %}
    for (int y = 0; y < {{nDof}}; y++) {
      x0[1] = center[1] + dx * (nodes[y] - 0.5);
      for (int x = 0; x < {{nDof}}; x++) {
        x0[0] = center[0] + dx * (nodes[x] - 0.5);

        solver.{{solverName}}::adjustPointSolution(x0, t, dt, luh+(pos*{{nData}}));
        pos++;
      }
    }
{% if nDim == 3 %}
  }
{% endif %}

}
