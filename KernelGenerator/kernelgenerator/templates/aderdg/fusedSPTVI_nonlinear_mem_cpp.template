{# /**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/ #}
{% import 'subtemplates/macros.template' as m with context %}{# get template macros #}
{% import "subtemplates/index.template" as i with context %}
{% macro idxDuDx(y,x) %}{{i.index_2(y,x,nDof)}}{% endmacro %}
{% macro idxLuh(z,y,x,n) %}{{i.index_4(z,y,x,n,nDof,nDof,nData)}}{% endmacro %}
{% macro idx(z,y,x,n) %}{{i.index_4(z,y,x,n,nDof,nDof,nVarPad)}}{% endmacro %}{# lduh, lShi #}
{% macro idxLPi(z,y,x,n) %}{{i.index_4(z,y,x,n,nDof,nDof,nParPad)}}{% endmacro %}{# lduh, lShi #}
{% macro idxLQhi(z,y,x,n) %}{{i.index_4(z,y,x,n,nDof,nDof,nVarPad)}}{% endmacro %}{# lQhi #}
{% macro idxGradQ(f,z,y,x,n) %}{{i.index_5(f,z,y,x,n,nDof3D,nDof,nDof,nVarPad)}}{% endmacro %}{# gradQ #}
{% macro idxLFhi(f,z,y,x,n) %}{{i.index_5(f,z,y,x,n,nDof3D,nDof,nDof,nVarPad)}}{% endmacro %}{# lFhi #}
{% macro idxRhs(t,z,y,x,n) %}{{i.index_5(t,z,y,x,n,nDof3D,nDof,nDof,nVarPad)}}{% endmacro %}{# rhs #}
{% macro idxLQi(t,z,y,x,n) %}{{i.index_5(t,z,y,x,n,nDof3D,nDof,nDof,nVarPad)}}{% endmacro %}{# lQhi #}
{% macro idxLQhbnd(f,z_y,y_x,n) %}{{i.index_4(f,z_y,y_x,n,nDof3D,nDof,nDataPad)}}{% endmacro %}{# f = face | x face: z_y = z, y_x = y | y face: z_y = z, y_x = x | z face: z_y = y, y_x = x #}
{% macro idxLFhbnd(f,z_y,y_x,n) %}{{i.index_4(f,z_y,y_x,n,nDof3D,nDof,nVarPad)}}{% endmacro %}{#  f = face | x face: z_y = z, y_x = y | y face: z_y = z, y_x = x | z face: z_y = y, y_x = x #}
{% macro idxLGradQhbnd(f,d,z_y,y_x,n) %}{{i.index_5(f,z_y,y_x,n,nDim,nDof3D,nDof,nVarPad)}}{% endmacro %}{# f = face | x face: z_y = z, y_x = y | y face: z_y = z, y_x = x | z face: z_y = y, y_x = x #}
{% set x,y,z,n,t,f,zyx,it,it_t="x","y","z","n","t","f","zyx","it","it_t" %}{# shortcut for the idx #}
{% set yx,zy="yx","zy" %}{# shortcut for the idx #}
{% set dzy,dz,d="dzy","dz","d" %}{# shortcut for the idx #}

#include <cstring>
#include <algorithm>

#include "{{pathToOptKernel}}/Kernels.h"
#include "{{pathToOptKernel}}/DGMatrices.h"
#include "{{pathToOptKernel}}/Quadrature.h"
{% if useLibxsmm %}
#include "{{pathToOptKernel}}/gemmsCPP.h"
{% endif %}

#include "{{solverHeader}}"


int {{codeNamespace}}::fusedSpaceTimePredictorVolumeIntegral(
        {{solverName}}& solver, 
        double* restrict lduh,
        double* restrict lQhbnd, 
        double* restrict lGradQhbnd,
        double* restrict lFhbnd,
        double* restrict lQi,
        double* restrict rhs,
        double* restrict lPi,  // nullptr if nPar == 0
        double* restrict lQhi,
        double* restrict lFhi,
        double* restrict lShi,  // for NCP or Source
        double* restrict gradQ, // for NCP or Source or viscousFlux
        const double* const restrict luh,
        const double inverseDx, //Assume dx[0] == dx[1] == dx[2]
        const double dt
) {


  //********************
  //****** Picard ******
  //********************

#ifdef __INTEL_COMPILER
  __assume_aligned(lQi, ALIGNMENT);
  __assume_aligned(rhs, ALIGNMENT);
{% if nPar > 0 %}
  __assume_aligned(lPi, ALIGNMENT);
{% endif %}
{% if useFlux %}
  __assume_aligned(lFhi, ALIGNMENT);
{% endif %}
  __assume_aligned(FLCoeff, ALIGNMENT); // == F0
  __assume_aligned(Kxi, ALIGNMENT);
  __assume_aligned(iK1_T, ALIGNMENT);
  __assume_aligned(weights1, ALIGNMENT);
  __assume_aligned(weights3, ALIGNMENT);
  __assume_aligned(iweights3, ALIGNMENT);
  __assume_aligned(luh, ALIGNMENT); //luh should be aligned, see Solver.h
{% if useNCP or useViscousFlux %}
  __assume_aligned(gradQ, ALIGNMENT);
{% endif %}

#endif

  // 0. Allocate local variable
  double new_lQi_slice[{{nDof*nVarPad}}] __attribute__((aligned(ALIGNMENT))); //for step 4 (computing new lQi value), doesn't update parameters
  const double dtBydx = inverseDx * dt; //Assume dx[0] == dx[1] == dx[2]
{% if useNCP or (useFlux and useCERKGuess)  or useViscousFlux %}
  double dudxT_by_dx[{{nDof*nDofPad}}] __attribute__((aligned(ALIGNMENT)));
  
  // 0. precompute 1/dx * dudx_T. Assume dx[0] == dx[1] == dx[2]
  #pragma omp simd aligned(dudxT_by_dx,dudx_T:ALIGNMENT)
  for(int it=0;it<{{nDof*nDofPad}};it++) {
    dudxT_by_dx[it] = inverseDx * dudx_T[it];
  }
{% if useLibxsmm %}
#if defined(USE_IPO) && ! defined(UNSAFE_IPO)
  volatile double doNotOptimizeAway_dudx_by_dt = dudxT_by_dx[0]; //used to prevent the compiler from optimizing temp array away. Needs to be volatile
#endif   
{% endif %}
{% endif %}

//TODO JMG Inital guess template
{% if not useCERKGuess or True %}{# fallback trivial guess #}
  // 1. Trivial initial guess
  std::memset(lQi, 0, sizeof(double)*{{nVarPad*(nDof**nDim)*nDof}});
{% if nPar > 0 %}
  std::memset(lPi, 0, sizeof(double)*{{nParPad*(nDof**nDim)}});
{% endif %}

  for (int zyx = 0; zyx < {{nDof**nDim}}; zyx++) {
    for (int t = 0; t < {{nDof}}; t++) {
      std::copy_n(&luh[{{idxLuh(0,0,zyx,0)}}], {{nVar}}, &lQi[{{idxLQi(t,0,0,zyx,0)}}]);
    }
{% if nPar > 0 %}
    std::copy_n(&luh[{{idxLuh(0,0,zyx,nVar)}}], {{nPar}}, &lPi[{{idxLPi(0,0,zyx,0)}}]);
{% endif %}
  }
{% else %}{# useCERKGuess #}
/*
  //1. Optimized initial guess, Continuous Extension Runga-Kutta.
  {
{% if useFlux %}{# use lFi as temp array, lFi total size = nVarPad*(nDof**(nDim+1))*nDim #}
    // use lFi as temporary storage for CERK's temporary arrays
    double* const lF_guess = lFi; // lF[0-2][z?][y][x][n]
    double* const K1 = lFi+{{nDim*(nDof**nDim)*nVarPad}}; // K1[z?][y][x][n]
    double* const K2 = lFi+{{(nDim+1)*(nDof**nDim)*nVarPad}}; // K2[z?][y][x][n]
    double* const lwh = lFi+{{(nDim+2)*(nDof**nDim)*nDataPad}}; // lwh[z?][y][x][n] (nData)
    std::memset(lFi+{{nDim*(nDof**nDim)*nVarPad}}, 0, {{2*(nDof**nDim)*nVarPad}} * sizeof(double)); //K1 and K2 must be set to 0
{% else %}{# no flux so use lSi instead, lSi total size = nVarPad*(nDof**(nDim+1)) #}
    // use lSi as temporary storage for CERK's temporary arrays
    double* const K1 = lSi; // K1[z?][y][x][n]
    double* const K2 = lSi+{{(nDof**nDim)*nVarPad}}; // K2[z?][y][x][n]
    double* const lwh = lSi+{{2*(nDof**nDim)*nDataPad}}; // lwh[z?][y][x][n] (nData)
    std::memset(lSi, 0, {{2*(nDof**nDim)*nVarPad}} * sizeof(double)); //K1 and K2 must be set to 0
{% endif %}
    //Note: temporary storage will be overwritten by user functions later, no need to reset them to 0

    // K1
{% with inputLuh='luh', outputKi='K1', inputLuh_dataSize=nData %}
{% filter indent(width=2, first=True) %}{% include 'subtemplates/RK_loop.template' %}{% endfilter %}
{% endwith %}
    
    // K2
    for (int zyx = 0; zyx < {{nDof**nDim}}; zyx++) {
      for (int n = 0; n < {{nVar}}; n++) {
        lwh[n+{{nData}}*zyx] = luh[n+{{nData}}*zyx] - dt * K1[n+{{nVarPad}}*zyx];
      }
{% if nPar != 0 %}
      for (int n = {{nVar}}; n < {{nData}}; n++) { //copy parameters
        lwh[n+{{nData}}*zyx] = luh[n+{{nData}}*zyx];
      }
{% endif %}
    }
{% with inputLuh='lwh', outputKi='K2', inputLuh_dataSize=nData %}
{% filter indent(width=2, first=True) %}{% include 'subtemplates/RK_loop.template' %}{% endfilter %}
{% endwith %}

    // Set initial guess using CERK
    for (int zyx = 0; zyx < {{nDof**nDim}}; zyx++) {
      for (int t = 0; t < {{nDof}}; t++) {
        for (int n = 0; n < {{nVar}}; n++) {
          lQi[n+{{nDataPad}}*(zyx+{{nDof**nDim}}*t)] = luh[n+{{nData}}*zyx] - (dt * nodes[t] * K1[n+{{nVarPad}}*zyx]) - (0.5*dt*nodes[t]*nodes[t]* (K2[n+{{nVarPad}}*zyx]-K1[n+{{nVarPad}}*zyx]));
        }
{% if nPar != 0 %}
        for (int n = {{nVar}}; n < {{nData}}; n++) { // copy parameters
          lQi[n+{{nDataPad}}*(zyx+{{nDof**nDim}}*t)] = luh[n+{{nData}}*zyx];
        }
{% endif %}
      }
    } 
    
  } // end initial guess
*/
{% endif %}{# useCERKGuess #}



  // 2. Discrete Picard iterations
  constexpr int MaxIterations = {% if useCERKGuess %}{% if nDof-3 <= 1 %}1; //cannot be lower than 1{% else %}{{nDof-3}}; //nDof-3{% endif %}{% else %}{{2*nDof+1}};{% endif %}

  int iter = 0;
  for (; iter < MaxIterations; iter++) {
    for (int t = 0; t < {{nDof}}; t++) {  // time DOF


{% if useNCP or useViscousFlux %}
      //set gradQ to 0
      std::memset(gradQ, 0, {{(nDof**nDim)*nVarPad*nDim}} * sizeof(double));
      
      // Compute the "derivatives" (contributions of the stiffness matrix)      
      // x direction (independent from the y and z derivatives)
      for (int zy = 0; zy < {{nDof3D*nDof}}; zy++) {
        {{ m.matmul('gradQ_x', 'lQi', 'dudxT_by_dx', 'gradQ', idxLQi(t,0,zy,0,0), '0', idxGradQ(0,0,zy,0,0)) | indent(8) }}{##}
      }
      
      // y direction (independent from the x and z derivatives)
      for (int z = 0; z < {{nDof3D}}; z++) {
        for (int x = 0; x < {{nDof}}; x++) {
          {{ m.matmul('gradQ_y', 'lQi', 'dudxT_by_dx', 'gradQ', idxLQi(t,z,0,x,0), '0', idxGradQ(1,z,0,x,0)) | indent(10) }}{##}
        }
      }
       
{% if nDim==3 %}
      // z direction (independent from the x and y derivatives)
      for (int yx = 0; yx < {{nDof*nDof}}; yx++) {
        {{ m.matmul('gradQ_z', 'lQi', 'dudxT_by_dx', 'gradQ', idxLQi(t,0,0,yx,0), '0', idxGradQ(2,0,0,yx,0)) | indent(8) }}{##}
      }
{% endif %}
{% endif %}{# useNCP or useViscousFlux #}

{% if useFlux %}
      { // Compute the fluxes
        
        for (int zyx = 0; zyx < {{nDof**nDim}}; zyx++) {
          // Call PDE fluxes
          double* F[{{nDim}}] = { lFhi+{{idxLFhi(0,0,0,zyx,0)}}, lFhi+{{idxLFhi(1,0,0,zyx,0)}}{{', lFhi+'~idxLFhi(2,0,0,zyx,0) if nDim == 3}} };

          {% if useViscousFlux %}
          // Remove padding to use the same user function as generic kernel
          double* gradQ_PDE[{{nDim}}] = { gradQ+{{idxGradQ(0,0,0,zyx,0)}}, gradQ+{{idxGradQ(1,0,0,zyx,0)}}{{', gradQ+'~idxGradQ(2,0,0,zyx,0) if nDim == 3}} };
          #ifdef USE_IPO
              #pragma forceinline recursive
          #endif
          solver.{{solverName}}::viscousFlux2(lQi+{{idxLQi(t,0,0,zyx,0)}}, {% if nPar != 0 %}lPi+{{idxLPi(0,0,zyx,0)}}{% else %}nullptr{%endif%}, gradQ_PDE, F);
          {% else %}
          #ifdef USE_IPO
              #pragma forceinline recursive
          #endif
          solver.{{solverName}}::flux2(lQi+{{idxLQi(t,0,0,zyx,0)}}, {% if nPar != 0 %}lPi+{{idxLPi(0,0,zyx,0)}}{% else %}nullptr{%endif%}, F);
          {% endif %}
        }
      }
{% endif %}{# useFlux #}

      // Compute the contribution of the initial condition uh to the right-hand side (rhs)
      for (int zyx = 0; zyx < {{nDof**nDim}}; zyx++) {
        const double weight = weights3[zyx] * FLCoeff[t];
        #pragma omp simd aligned(rhs,luh:ALIGNMENT)
        for (int n = 0; n < {{nVar}}; n++) {
          rhs[{{idxRhs(t,0,0,zyx,n)}}] = weight * luh[{{idxLuh(0,0,zyx,n)}}];
        }
      }
{% if useFlux %}
      // Compute the "derivatives" (contributions of the stiffness matrix)      
      // x direction (independent from the y and z derivatives)
      for (int zy = 0; zy < {{nDof3D*nDof}}; zy++) {
        {{ m.matmul('rhs_x', 'lFhi', 'coeffRhsX', 'rhs', idxLFhi(0,0,zy,0,0), '0', idxRhs(t,0,zy,0,0), trueB='Kxi', trueAlpha='- weights3[t*'~nDof3D*nDof~'+zy] * dtBydx') | indent(8) }}{##}
      }
      
      // y direction (independent from the x and z derivatives)
      for (int z = 0; z < {{nDof3D}}; z++) {
        for (int x = 0; x < {{nDof}}; x++) {
          {{ m.matmul('rhs_y', 'lFhi', 'coeffRhsY', 'rhs', idxLFhi(1,z,0,x,0), '0', idxRhs(t,z,0,x,0), trueB='Kxi', trueAlpha='- weights3[(t*'~nDof3D~'+z)*'~nDof~'+x] * dtBydx') | indent(10) }}{##}
        }
      }
       
{% if nDim==3 %}
      // z direction (independent from the x and y derivatives)
      for (int yx = 0; yx < {{nDof*nDof}}; yx++) {
        {{ m.matmul('rhs_z', 'lFhi','coeffRhsZ', 'rhs', idxLFhi(2,0,0,yx,0), '0', idxRhs(t,0,0,yx,0), trueB='Kxi', trueAlpha='- weights3[t*'~nDof3D*nDof~'+yx] * dtBydx') | indent(8) }}{##}
      }
{% endif %}
{% endif %}{# useFlux #}


{% if useSourceOrNCP %}
      {
{% if useNCP %}
        double tmp_ncp_output[{{nVarPad}}] __attribute__((aligned(ALIGNMENT))) = {0.}; //initialize for padding
{% endif %}
{% if not useFusedSource and useSource %}
        double tmp_source_output[{{nVarPad}}] __attribute__((aligned(ALIGNMENT))) = {0.}; //initialize for padding
{% endif %}
        for(int zyx = 0; zyx < {{nDof**nDim}}; zyx++) {
{% if useNCP or useFusedSource %}
          double* gradQ_PDE[{{nDim}}] = { gradQ+{{idxGradQ(0,0,0,zyx,0)}}, gradQ+{{idxGradQ(1,0,0,zyx,0)}}{{', gradQ+'~idxGradQ(2,0,0,zyx,0) if nDim == 3}} };
{% endif %}{# useNCP #}

{% if useFusedSource %}
          // FusedSource
          #ifdef USE_IPO
            #pragma forceinline recursive
          #endif
          solver.{{solverName}}::fusedSource2(lQi+{{idxLQi(t,0,0,zyx,0)}}, {% if nPar != 0 %}lPi+{{idxLPi(0,0,zyx,0)}}{% else %}nullptr{%endif%}, gradQ_PDE, tmp_ncp_output);
{% else %}{# useFusedSource #}
{% if useNCP %}
          // NCP
          #ifdef USE_IPO
            #pragma forceinline recursive
          #endif
          solver.{{solverName}}::nonConservativeProduct2(lQi+{{idxLQi(t,0,0,zyx,0)}}, {% if nPar != 0 %}lPi+{{idxLPi(0,0,zyx,0)}}{% else %}nullptr{%endif%}, gradQ_PDE, tmp_ncp_output);
{% endif %}
{% if useSource %}
          // Source
          #ifdef USE_IPO
            #pragma forceinline recursive
          #endif
          // TODO(JMG): Pass x/t here to enable spatio-temporal source terms.
          solver.{{solverName}}::algebraicSource2({0.0}, 0.0, lQi+{{idxLQi(t,0,0,zyx,0)}}, {% if nPar != 0 %}lPi+{{idxLPi(0,0,zyx,0)}}{% else %}nullptr{%endif%}, tmp_source_output);
{% endif %}
{% endif %}{# useFusedSource #}

          // Update rhs
          const double updateSize = weights1[t] * weights3[zyx] * dt;
          #pragma omp simd aligned(rhs:ALIGNMENT)
          for (int n = 0; n < {{nVarPad}}; n++) {
{% if useFusedSource or (useNCP and not useSource) %}
            rhs[{{idxRhs(t,0,0,zyx,n)}}] -= updateSize*tmp_ncp_output[n];
{% elif useSource and not useNCP%}
            rhs[{{idxRhs(t,0,0,zyx,n)}}] += updateSize*tmp_source_output[n];
{% else %}
            rhs[{{idxRhs(t,0,0,zyx,n)}}] += updateSize*(tmp_source_output[n]-tmp_ncp_output[n]);
{% endif %}
          }
        }
      }
{% endif %}{# useSourceOrNCP #}

    }  // end time dof

    // 3. Multiply with (K1)^(-1) to get the discrete time integral of the
    // discrete Picard iteration
    double sq_res = 0.0;
    for (int zyx = 0; zyx < {{nDof**nDim}}; zyx++) {
      {{ m.matmul('lqi', 'rhs', 's_m_QSlice', 'new_lQi_slice',idxRhs(0,0,0,zyx,0), '0', '0', trueB='iK1_T', trueAlpha='iweights3[zyx]') | indent(6) }}{##}
      for(int t = 0; t < {{nDof}}; t++) {
        for(int n=0; n<{{nVar}}; n++) { //only copy and change the variables, skip parameters
          sq_res += (new_lQi_slice[n+{{nVarPad}}*t] - lQi[{{idxLQi(t,0,0,zyx,n)}}]) * (new_lQi_slice[n+{{nVarPad}}*t] - lQi[{{idxLQi(t,0,0,zyx,n)}}]);
          lQi[{{idxLQi(t,0,0,zyx,n)}}] = new_lQi_slice[n+{{nVarPad}}*t];
        }
      }
    }

    // 4. Exit condition
    constexpr double tol2 = 1e-7 * 1e-7;
    if (sq_res < tol2) {
      break;
    }
  }  // end iter



// NEW PREDICTOR

#ifdef __INTEL_COMPILER
  __assume_aligned(lQhi, ALIGNMENT);
{% if useFlux %}
  __assume_aligned(lFhi, ALIGNMENT);
{% endif %}
{% if useSourceOrNCP %}
  __assume_aligned(lShi, ALIGNMENT);
{% endif %}

#endif


  std::memset(lQhi, 0, {{(nDof**nDim)*nVarPad    }} * sizeof(double));
{% if useFlux %}
  std::memset(lFhi, 0, {{nDim*(nDof**nDim)*nVarPad}} * sizeof(double));
{% endif %}
{% if useSourceOrNCP %}
  std::memset(lShi, 0, {{(nDof**nDim)*nVarPad     }} * sizeof(double));
{% endif %}

  for (int t = 0; t < {{nDof}}; t++) {  // time DOF

{% if useNCP or useViscousFlux %}
    // recompute gradQ if needed
    //set gradQ to 0
    std::memset(gradQ, 0, {{(nDof**nDim)*nVarPad*nDim}} * sizeof(double));
    
    // Compute the "derivatives" (contributions of the stiffness matrix)      
    // x direction (independent from the y and z derivatives)
    for (int zy = 0; zy < {{nDof3D*nDof}}; zy++) {
      {{ m.matmul('gradQ_x', 'lQi', 'dudxT_by_dx', 'gradQ', idxLQi(t,0,zy,0,0), '0', idxGradQ(0,0,zy,0,0)) | indent(8) }}{##}
    }
    
    // y direction (independent from the x and z derivatives)
    for (int z = 0; z < {{nDof3D}}; z++) {
      for (int x = 0; x < {{nDof}}; x++) {
        {{ m.matmul('gradQ_y', 'lQi', 'dudxT_by_dx', 'gradQ', idxLQi(t,z,0,x,0), '0', idxGradQ(1,z,0,x,0)) | indent(10) }}{##}
      }
    }
     
{% if nDim==3 %}
    // z direction (independent from the x and y derivatives)
    for (int yx = 0; yx < {{nDof*nDof}}; yx++) {
      {{ m.matmul('gradQ_z', 'lQi', 'dudxT_by_dx', 'gradQ', idxLQi(t,0,0,yx,0), '0', idxGradQ(2,0,0,yx,0)) | indent(8) }}{##}
    }
{% endif %}
{% endif %}


{% if useSourceOrNCP %}
    {
{% if useNCP %}
      double tmp_ncp_output[{{nVarPad}}] __attribute__((aligned(ALIGNMENT))) = {0.}; //initialize for padding
{% endif %}
{% if not useFusedSource and useSource %}
      double tmp_source_output[{{nVarPad}}] __attribute__((aligned(ALIGNMENT))) = {0.}; //initialize for padding
{% endif %}
      for(int zyx = 0; zyx < {{nDof**nDim}}; zyx++) {
{% if useNCP or useFusedSource %}
          double* gradQ_PDE[{{nDim}}] = { gradQ+{{idxGradQ(0,0,0,zyx,0)}}, gradQ+{{idxGradQ(1,0,0,zyx,0)}}{{', gradQ+'~idxGradQ(2,0,0,zyx,0) if nDim == 3}} };
{% endif %}{# useNCP #}

{% if useFusedSource %}
          // FusedSource
          #ifdef USE_IPO
            #pragma forceinline recursive
          #endif
          solver.{{solverName}}::fusedSource2(lQi+{{idxLQi(t,0,0,zyx,0)}}, {% if nPar != 0 %}lPi+{{idxLPi(0,0,zyx,0)}}{% else %}nullptr{%endif%}, gradQ_PDE, tmp_ncp_output);
{% else %}{# useFusedSource #}
{% if useNCP %}
          // NCP
          #ifdef USE_IPO
            #pragma forceinline recursive
          #endif
          solver.{{solverName}}::nonConservativeProduct2(lQi+{{idxLQi(t,0,0,zyx,0)}}, {% if nPar != 0 %}lPi+{{idxLPi(0,0,zyx,0)}}{% else %}nullptr{%endif%}, gradQ_PDE, tmp_ncp_output);
{% endif %}
{% if useSource %}
          // Source
          #ifdef USE_IPO
            #pragma forceinline recursive
          #endif
          // TODO(JMG): Pass x/t here to enable spatio-temporal source terms.
          solver.{{solverName}}::algebraicSource2({0.0}, 0.0, lQi+{{idxLQi(t,0,0,zyx,0)}}, {% if nPar != 0 %}lPi+{{idxLPi(0,0,zyx,0)}}{% else %}nullptr{%endif%}, tmp_source_output);
{% endif %}
{% endif %}{# useFusedSource #}

        #pragma omp simd aligned(lShi:ALIGNMENT)
        for (int n = 0; n < {{nVarPad}}; n++) {
{% if useFusedSource or (useNCP and not useSource) %}
          lShi[{{idx(0,0,zyx,n)}}] -= weights1[t]*tmp_ncp_output[n];
{% elif useSource and not useNCP%}
          lShi[{{idx(0,0,zyx,n)}}] += weights1[t]*tmp_source_output[n];
{% else %}
          lShi[{{idx(0,0,zyx,n)}}] += weights1[t]*(tmp_source_output[n]-tmp_ncp_output[n]);
{% endif %}
        }
      }
    }
{% endif %}{# useSourceOrNCP #}


{% if useFlux %}
    { // Compute the fluxes
      double Fx[{{nVarPad}}] __attribute__((aligned(ALIGNMENT))) = {0.};
      double Fy[{{nVarPad}}] __attribute__((aligned(ALIGNMENT))) = {0.};
{% if nDim ==3%}
      double Fz[{{nVarPad}}] __attribute__((aligned(ALIGNMENT))) = {0.};
      double* F[{{nDim}}] = {Fx, Fy, Fz};
{% else %}
      double* F[{{nDim}}] = {Fx, Fy};
{% endif %}
      for (int zyx = 0; zyx < {{nDof**nDim}}; zyx++) {
        // Call PDE fluxes
{% if useViscousFlux %}
        double* gradQ_PDE[{{nDim}}] = { gradQ+{{idxGradQ(0,0,0,zyx,0)}}, gradQ+{{idxGradQ(1,0,0,zyx,0)}}{{', gradQ+'~idxGradQ(2,0,0,zyx,0) if nDim == 3}} };
        #ifdef USE_IPO
            #pragma forceinline recursive
        #endif
        solver.{{solverName}}::viscousFlux2(lQi+{{idxLQi(t,0,0,zyx,0)}}, {% if nPar != 0 %}lPi+{{idxLPi(0,0,zyx,0)}}{% else %}nullptr{%endif%}, gradQ_PDE, F);
{% else %}
        #ifdef USE_IPO
          #pragma forceinline recursive
        #endif
        solver.{{solverName}}::flux2(lQi+{{idxLQi(t,0,0,zyx,0)}}, {% if nPar != 0 %}lPi+{{idxLPi(0,0,zyx,0)}}{% else %}nullptr{%endif%}, F);
{% endif %}
        #pragma omp simd aligned(lQhi,lFhi,lQi,Fx,Fy{{',Fz' if nDim==3}}:ALIGNMENT)
        for (int n=0; n<{{nVarPad}};n++) {
          lQhi[{{idxLQhi(0,0,zyx,n)}}]   += weights1[t] * lQi[{{idxLQi(t,0,0,zyx,n)}}];
          lFhi[{{idxLFhi(0,0,0,zyx,n)}}] += weights1[t] * Fx[n];
          lFhi[{{idxLFhi(1,0,0,zyx,n)}}] += weights1[t] * Fy[n];
{% if nDim ==3%}
          lFhi[{{idxLFhi(2,0,0,zyx,n)}}] += weights1[t] * Fz[n];
{% endif %}
        }
      }
    }
  } // t
{% endif %}{# useFlux #}



  //**************************
  //****** Extrapolator ******
  //**************************
  
#ifdef __INTEL_COMPILER
  __assume_aligned(lQhi, ALIGNMENT);
  __assume_aligned(lQhbnd, ALIGNMENT);
  __assume_aligned(lFhbnd, ALIGNMENT);
{% if useViscousFlux %}
  __assume_aligned(lGradQhbnd, ALIGNMENT);
{% endif %}
{% if useFlux %}
  __assume_aligned(lFhi, ALIGNMENT);
{% endif %}
  __assume_aligned(FRCoeff, ALIGNMENT);
  __assume_aligned(FLCoeff, ALIGNMENT);
#endif
  
  std::memset(lQhbnd, 0, {{2*nDim*nDataPad*nDof*nDof3D}} * sizeof(double));
  std::memset(lFhbnd, 0, {{2*nDim*nVarPad*nDof*nDof3D}} * sizeof(double));



  // x-direction: face 1 (left) and face 2 (right)
  for (int zy = 0; zy < {{nDof*nDof3D}}; zy++) {
    // Matrix-Vector Products
    for (int x = 0; x < {{nDof}}; x++) {
      #pragma omp simd aligned(lQhbnd,lQhi:ALIGNMENT)
      for (int n = 0; n < {{nVarPad}}; n++) {    
        // Fortran: lQhbnd(:,j,i,1) = lQhi(:,:,j,i) * FLCoeff(:)
        lQhbnd[{{idxLQhbnd(0,0,zy,n)}}] += lQhi[{{idx(0,zy,x,n)}}] * FLCoeff[x];

        // Fortran: lQhbnd(:,j,i,2) = lQhi(:,:,j,i) * FRCoeff(:)
        lQhbnd[{{idxLQhbnd(1,0,zy,n)}}] += lQhi[{{idx(0,zy,x,n)}}] * FRCoeff[x];
{% if useFlux %}

        // Fortran: lFhbnd(:,j,i,1) = lFhi_x(:,:,j,i) * FLCoeff(:)
        lFhbnd[{{idxLFhbnd(0,0,zy,n)}}] += lFhi[{{idxLFhi(0,0,zy,x,n)}}] * FLCoeff[x];

        // Fortran: lFhbnd(:,j,i,2) = lFhi_x(:,:,j,i) * FRCoeff(:)
        lFhbnd[{{idxLFhbnd(1,0,zy,n)}}] += lFhi[{{idxLFhi(0,0,zy,x,n)}}] * FRCoeff[x];
{% endif %}{# useFlux #}
      }
    }
  }

  // y-direction: face 3 (left) and face 4 (right)
  for (int z = 0; z < {{nDof3D}}; z++) {
    for (int x = 0; x < {{nDof}}; x++) {
      // Matrix-Vector Products
      for (int y = 0; y < {{nDof}}; y++) {
        #pragma omp simd aligned(lQhbnd,lQhi:ALIGNMENT)
        for (int n = 0; n < {{nVarPad}}; n++) {
          // Fortran: lQhbnd(:,j,i,3) = lQhi(:,j,:,i) * FLCoeff(:)
          lQhbnd[{{idxLQhbnd(2,z,x,n)}}] += lQhi[{{idx(z,y,x,n)}}] * FLCoeff[y];

          // Fortran: lQhbnd(:,j,i,4) = lQhi(:,j,:,i) * FRCoeff(:)
          lQhbnd[{{idxLQhbnd(3,z,x,n)}}] += lQhi[{{idx(z,y,x,n)}}] * FRCoeff[y];
{% if useFlux %}

          // Fortran: lFhbnd(:,j,i,3) = lFhi_y(:,:,j,i) * FLCoeff(:)
          lFhbnd[{{idxLFhbnd(2,z,x,n)}}] += lFhi[{{idxLFhi(1,z,y,x,n)}}] * FLCoeff[y];

          // Fortran: lFhbnd(:,j,i,4) = lFhi_y(:,:,j,i) * FRCoeff(:)
          lFhbnd[{{idxLFhbnd(3,z,x,n)}}] += lFhi[{{idxLFhi(1,z,y,x,n)}}] * FRCoeff[y];
{% endif %}{# useFlux #}
        }
      }
    }
  }

  
{% if nDim==3 %}
  // z-direction: face 5 (left) and face 6 (right)
  for (int yx = 0; yx < {{nDof*nDof}}; yx++) {
    // Matrix-Vector Products
    for (int z = 0; z < {{nDof}}; z++) {
      #pragma omp simd aligned(lQhbnd,lQhi:ALIGNMENT)
      for (int n = 0; n < {{nVarPad}}; n++) {
        // Fortran: lQhbnd(:,j,i,5) = lQhi(:,j,i,:) * FLCoeff(:)
        lQhbnd[{{idxLQhbnd(4,0,yx,n)}}] += lQhi[{{idx(z,0,yx,n)}}] * FLCoeff[z];

        // Fortran: lQhbnd(:,j,i,6) = lQhi(:,j,i,:) * FRCoeff(:)
        lQhbnd[{{idxLQhbnd(5,0,yx,n)}}] += lQhi[{{idx(z,0,yx,n)}}] * FRCoeff[z];
{% if useFlux %}

        // Fortran: lFhbnd(:,j,i,5) = lFhi_z(:,:,j,i) * FLCoeff(:)
        lFhbnd[{{idxLFhbnd(4,0,yx,n)}}] += lFhi[{{idxLFhi(2,z,0,yx,n)}}] * FLCoeff[z];

        // Fortran: lFhbnd(:,j,i,6) = lFhi_z(:,:,j,i) * FRCoeff(:)
        lFhbnd[{{idxLFhbnd(5,0,yx,n)}}] += lFhi[{{idxLFhi(2,z,0,yx,n)}}] * FRCoeff[z];
{% endif %}{# useFlux #}
      }
    }
  }
{% endif %}
{% if useViscousFlux %}
  // Compute time-avg gradQ
  std::memset(gradQ, 0, {{(nDof**nDim)*nVarPad*nDim}} * sizeof(double));
  
  // Compute the "derivatives" (contributions of the stiffness matrix)      
  // x direction (independent from the y and z derivatives)
  for (int zy = 0; zy < {{nDof3D*nDof}}; zy++) {
    {{ m.matmul('gradQ_x', 'lQhi', 'dudxT_by_dx', 'gradQ', idx(0,zy,0,0), '0', idxGradQ(0,0,zy,0,0)) | indent(4) }}{##}
  }
  
  // y direction (independent from the x and z derivatives)
  for (int z = 0; z < {{nDof3D}}; z++) {
    for (int x = 0; x < {{nDof}}; x++) {
      {{ m.matmul('gradQ_y', 'lQhi', 'dudxT_by_dx', 'gradQ', idx(z,0,x,0), '0', idxGradQ(1,z,0,x,0)) | indent(6) }}{##}
    }
  }
   
{% if nDim==3 %}
  // z direction (independent from the x and y derivatives)
  for (int yx = 0; yx < {{nDof*nDof}}; yx++) {
    {{ m.matmul('gradQ_z', 'lQhi', 'dudxT_by_dx', 'gradQ', idx(0,0,yx,0), '0', idxGradQ(2,0,0,yx,0)) | indent(4) }}{##}
  }
{% endif %}

  std::memset(lGradQhbnd, 0, {{2*nDim*nVarPad*nDof*nDof3D*nDim}} * sizeof(double));

  // x-direction: face 1 (left) and face 2 (right)
  for (int dzy = 0; dzy < {{nDof*nDof3D*nDim}}; dzy++) {
    // Matrix-Vector Products
    for (int x = 0; x < {{nDof}}; x++) {
      #pragma omp simd aligned(lGradQhbnd,gradQ:ALIGNMENT)
      for (int n = 0; n < {{nVarPad}}; n++) {
        lGradQhbnd[{{idxLGradQhbnd(0,0,0,dzy,n)}}] += gradQ[{{idxGradQ(0,0,dzy,x,n)}}] * FLCoeff[x];
        lGradQhbnd[{{idxLGradQhbnd(1,0,0,dzy,n)}}] += gradQ[{{idxGradQ(0,0,dzy,x,n)}}] * FRCoeff[x];
      }
    }
  }
  // y-direction: face 3 (left) and face 4 (right)
  for (int dz = 0; dz < {{nDof3D*nDim}}; dz++) {
    // Matrix-Vector Products
    for (int x = 0; x < {{nDof}}; x++) {
      for (int y = 0; y < {{nDof}}; y++) {
        #pragma omp simd aligned(lGradQhbnd,gradQ:ALIGNMENT)
        for (int n = 0; n < {{nVarPad}}; n++) {
          lGradQhbnd[{{idxLGradQhbnd(2,0,dz,x,n)}}] += gradQ[{{idxGradQ(0,dz,y,x,n)}}] * FLCoeff[y];
          lGradQhbnd[{{idxLGradQhbnd(3,0,dz,x,n)}}] += gradQ[{{idxGradQ(0,dz,y,x,n)}}] * FRCoeff[y];
        }
      }
    }
  }
{% if nDim==3 %}
  // z-direction: face 5 (left) and face 6 (right)
  for (int d = 0; d < {{nDim}}; d++) {
    // Matrix-Vector Products
    for (int yx = 0; yx < {{nDof*nDof}}; yx++) {
      for (int z = 0; z < {{nDof}}; z++) {
        #pragma omp simd aligned(lGradQhbnd,gradQ:ALIGNMENT)
        for (int n = 0; n < {{nVarPad}}; n++) {
          lGradQhbnd[{{idxLGradQhbnd(4,d,0,yx,n)}}] += gradQ[{{idxGradQ(d,z,0,yx,n)}}] * FLCoeff[z];
          lGradQhbnd[{{idxLGradQhbnd(5,d,0,yx,n)}}] += gradQ[{{idxGradQ(d,z,0,yx,n)}}] * FRCoeff[z];
        }
      }
    }
  }
{% endif %}{# nDim == 3#}
{% endif %}{# useViscousFlux #}
{% if nPar > 0 %}
  // x-direction: face 1 (left) and face 2 (right)
  for (int zy = 0; zy < {{nDof*nDof3D}}; zy++) {
    std::memset(lQhbnd+{{idxLQhbnd(0,0,zy,nVar)}}, 0, sizeof(double)*{{nPar}});
    std::memset(lQhbnd+{{idxLQhbnd(1,0,zy,nVar)}}, 0, sizeof(double)*{{nPar}});
    // Matrix-Vector Products
    for (int x = 0; x < {{nDof}}; x++) {
      #pragma omp simd aligned(lQhbnd,lQhi:ALIGNMENT)
      for (int n = 0; n < {{nVarPad}}; n++) {    
        lQhbnd[{{idxLQhbnd(0,0,zy,'n+'~nVar)}}] += lPi[{{idxLPi(0,zy,x,n)}}] * FLCoeff[x];
        lQhbnd[{{idxLQhbnd(1,0,zy,'n+'~nVar)}}] += lPi[{{idxLPi(0,zy,x,n)}}] * FRCoeff[x];
      }
    }
  }

  // y-direction: face 3 (left) and face 4 (right)
  for (int z = 0; z < {{nDof3D}}; z++) {
    for (int x = 0; x < {{nDof}}; x++) {
      std::memset(lQhbnd+{{idxLQhbnd(2,z,x,nVar)}}, 0, sizeof(double)*{{nPar}});
      std::memset(lQhbnd+{{idxLQhbnd(3,z,x,nVar)}}, 0, sizeof(double)*{{nPar}});
      // Matrix-Vector Products
      for (int y = 0; y < {{nDof}}; y++) {
        #pragma omp simd aligned(lQhbnd,lQhi:ALIGNMENT)
        for (int n = 0; n < {{nVarPad}}; n++) {
          lQhbnd[{{idxLQhbnd(2,z,x,'n+'~nVar)}}] += lPi[{{idxLPi(z,y,x,n)}}] * FLCoeff[y];
          lQhbnd[{{idxLQhbnd(3,z,x,'n+'~nVar)}}] += lPi[{{idxLPi(z,y,x,n)}}] * FRCoeff[y];
        }
      }
    }
  }
{% if nDim==3 %}
// z-direction: face 5 (left) and face 6 (right)
  for (int yx = 0; yx < {{nDof*nDof}}; yx++) {
    std::memset(lQhbnd+{{idxLQhbnd(4,0,yx,nVar)}}, 0, sizeof(double)*{{nPar}});
    std::memset(lQhbnd+{{idxLQhbnd(5,0,yx,nVar)}}, 0, sizeof(double)*{{nPar}});
    // Matrix-Vector Products
    for (int z = 0; z < {{nDof}}; z++) {
      #pragma omp simd aligned(lQhbnd,lPi:ALIGNMENT)
      for (int n = 0; n < {{nPar}}; n++) {
        lQhbnd[{{idxLQhbnd(4,0,yx,'n+'~nVar)}}] += lPi[{{idxLPi(z,0,yx,n)}}] * FLCoeff[z];
        lQhbnd[{{idxLQhbnd(5,0,yx,'n+'~nVar)}}] += lPi[{{idxLPi(z,0,yx,n)}}] * FRCoeff[z];
      }
    }
  }
{% endif %}
{% endif %}{# if nPar > 0 #}
  
  //*****************************
  //****** Volume Integral ******
  //*****************************

#ifdef __INTEL_COMPILER
{% if useFlux %}
  __assume_aligned(lFhi,     ALIGNMENT);
  __assume_aligned(Kxi_T,    ALIGNMENT);
  __assume_aligned(weights2, ALIGNMENT);
{% endif %}{# useFlux #}
  __assume_aligned(lduh,     ALIGNMENT); //lduh should be aligned, see Solver.h
{% if useSourceOrNCP %}
  __assume_aligned(weights3, ALIGNMENT);
  __assume_aligned(lShi,     ALIGNMENT);
{% endif %}
#endif
{% if useFlux %}

  memset(lduh, 0, {{nVarPad*(nDof**nDim)}}*sizeof(double));
  
  // Assume equispaced mesh, dx[0] == dx[1] == dx[2]
  for (int j=0; j<{{nDof3D}}; j++) {
    for (int i=0; i<{{nDof}}; i++) {
      double coeffVolume[{{nDof*nDofPad}}] __attribute__((aligned(ALIGNMENT)));
      #pragma omp simd aligned(coeffVolume,Kxi_T:ALIGNMENT)
      for (int it = 0; it < {{nDof*nDofPad}}; it++) {
        coeffVolume[it] = weights2[i+j*{{nDofPad}}] * inverseDx * Kxi_T[it];
      }
      //x
      {{ m.matmul('lduh_x', 'lFhi', 'coeffVolume', 'lduh', idxLFhi(0,'j','i',0,0), '0', idx('j','i',0,0)) | indent(6) }}{##}


      //y, reuse coeffVolume
      {{ m.matmul('lduh_y', 'lFhi', 'coeffVolume', 'lduh', idxLFhi(1,'j',0,'i',0), '0', idx('j',0,'i',0)) | indent(6) }}{##}
{% if nDim == 3 %}

      //z, reuse coeffVolume
      {{ m.matmul('lduh_z', 'lFhi', 'coeffVolume', 'lduh', idxLFhi(2,0,'j','i',0), '0', idx(0,'j','i',0)) | indent(6) }}{##}

{% endif %}
    }
  }
{% endif %}{# useFlux #}
{% if useSourceOrNCP %}
  // source
  for (int zyx = 0; zyx < {{nDof**nDim}}; zyx++) {
    // Fortran: lduh(:,k,j,i) += w * lShi(:,k,j,i)
    #pragma omp simd aligned(lduh,lShi:ALIGNMENT)
    for (int n = 0; n < {{nVarPad}}; n++) {
      lduh[{{idx(0,0,zyx,n)}}] += weights3[zyx] * lShi[{{idx(0,0,zyx,n)}}];
    }
  }
{% endif %}

  return std::min(iter+1, MaxIterations); //return number of Picard iterations, min to avoid doing a +1 if the loop wasn't exited early
}
