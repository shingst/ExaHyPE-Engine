// This file was generated by the ExaHyPE toolkit.
// It will NOT be regenerated or overwritten.
// Please adapt it to your own needs.
// 
// ========================
//   www.exahype.eu
// ========================

#include "{{solver}}.h"

#include "{{solver}}_Variables.h"

#include "kernels/KernelUtils.h"
#include "peano/utils/Loop.h"

tarch::logging::Log {{project}}::{{solver}}::_log( "{{project}}::{{solver}}" );


void {{project}}::{{solver}}::init(const std::vector<std::string>& cmdlineargs,const exahype::parser::ParserView& constants) {
  // Tip: You find documentation for this method in header file "{{project}}::{{solver}}.h".
  
  // @todo Please implement/augment if required

{% if usePointSources %}
  initPointSourceLocations(cmdlineargs,constants);	
{% endif %}    
}

{% if patchwiseAdjust %}
void {{project}}::{{solver}}::adjustSolution(double* const luh, const tarch::la::Vector<DIMENSIONS,double>& cellCentre, const tarch::la::Vector<DIMENSIONS,double>& cellSize,double t,double dt) {
  // Tip: You find documentation for this method in header file "{{project}}::{{solver}}.h".
  // Tip: See header file "{{project}}::{{abstractSolver}}.h" for toolkit generated compile-time 
  //      constants such as Order, NumberOfVariables, and NumberOfParameters.
  // Tip: See header file "peano/utils/Loop.h" for dimension-agnostic for loops.
  
  // @todo Please implement/augment if required
  if (tarch::la::equals(t,0.0)) {
    //initialise luh
    constexpr int sizeOfQ = NumberOfVariables+NumberOfParameters;
    dfor(i,Order+1) {
      const int iLinearised = dLinearised(i,Order+1);
      double* const Q = luh + iLinearised * sizeOfQ;  // pointwise state variables (plus parameters)
      
      {% for i in range_0_nVarParam %}
      Q[{{i}}] = 0.0;
      {% endfor %} 
    }
  }
}
{% else %}
void {{project}}::{{solver}}::adjustPointSolution(const double* const x,const double t,const double dt,double* const Q) {
  // Tip: You find documentation for this method in header file "{{project}}::{{solver}}.h".
  // Tip: See header file "{{project}}::{{abstractSolver}}.h" for toolkit generated compile-time 
  //      constants such as Order, NumberOfVariables, and NumberOfParameters.
  
  // @todo Please implement/augment if required
  if (tarch::la::equals(t,0.0)) {
    {% for i in range_0_nVarParam %}
    Q[{{i}}] = 0.0;
    {% endfor %}
  }
}
{% endif %}

void {{project}}::{{solver}}::boundaryValues(const double* const x,const double t,const double dt,const int faceIndex,const int direction,const double* const fluxIn,const double* const stateIn,const double* const gradStateIn,double* const fluxOut,double* const stateOut) {
  // Tip: You find documentation for this method in header file "{{project}}::{{solver}}.h".
  // Tip: See header file "{{project}}::{{abstractSolver}}.h" for toolkit generated compile-time 
  //      constants such as Order, NumberOfVariables, and NumberOfParameters.

  // @todo Please implement/augment if required
  {% for i in range_0_nVar %}
  stateOut[{{i}}] = 0.0;
  {% endfor %}

  {% for i in range_0_nVar %}
  fluxOut[{{i}}] = 0.0;
  {% endfor %}
}

exahype::solvers::Solver::RefinementControl {{project}}::{{solver}}::refinementCriterion(const double* const luh,const tarch::la::Vector<DIMENSIONS,double>& cellCentre,const tarch::la::Vector<DIMENSIONS,double>& cellSize,double t,const int level) {
  // Tip: You find documentation for this method in header file "{{project}}::{{solver}}.h".
  // Tip: See header file "{{project}}::{{abstractSolver}}.h" for toolkit generated compile-time 
  //      constants such as Order, NumberOfVariables, and NumberOfParameters.
  // Tip: See header file "peano/utils/Loop.h" for dimension-agnostic for loops.
  
  //  Example: Loop over all pointwise state variables (plus parameters)
  //
  //  constexpr int sizeOfQ = NumberOfVariables+NumberOfParameters;
  //  dfor(i,Order+1) {
  //    const int iLinearised = dLinearised(i,Order+1);
  //    const double* const Q = luh + iLinearised * sizeOfQ; // pointwise state variables (plus parameters)
  //    // use Q[0], Q[1], ... Q[sizeOfQ-1]
  //  }
  
  // @todo Please implement/augment if required
  return exahype::solvers::Solver::RefinementControl::Keep;
}

//*****************************************************************************
//******************************** PDE ****************************************
// To use other PDE terms, specify them in the specification file, delete this 
// file and its header and rerun the toolkit
//*****************************************************************************


void {{project}}::{{solver}}::eigenvalues(const double* const Q,const int direction,double* const lambda) {
  // Tip: You find documentation for this method in header file "{{project}}::{{solver}}.h".
  // Tip: See header file "{{project}}::{{abstractSolver}}.h" for toolkit generated compile-time 
  //      constants such as Order, NumberOfVariables, and NumberOfParameters.
  
  // @todo Please implement/augment if required
  {% for i in range_0_nVar %}
  lambda[{{i}}] = 1.0;
  {% endfor %}
}

{% if useViscousFlux %}
void {{project}}::{{solver}}::viscousEigenvalues(const double* const Q,const int direction,double* const lambda) {
  // Tip: You find documentation for this method in header file "{{project}}::{{solver}}.h".
  // Tip: See header file "{{project}}::{{abstractSolver}}.h" for toolkit generated compile-time 
  //      constants such as Order, NumberOfVariables, and NumberOfParameters.
  
  // @todo Please implement/augment if required
  {% for i in range_0_nVar %}
  lambda[{{i}}] = 1.0;
  {% endfor %}
}
{% endif %}


{% if useViscousFlux %}
void {{project}}::{{solver}}::viscousFlux(const double* const Q,const double* const gradQ,double** const F) {
  // Tip: You find documentation for this method in header file "{{project}}::{{solver}}.h".
  // Tip: See header file "{{project}}::{{abstractSolver}}.h" for toolkit generated compile-time 
  //      constants such as Order, NumberOfVariables, and NumberOfParameters.
  
  // @todo Please implement/augment if required
  {% for d in range_0_nDim %}
  {% for i in range_0_nVar %}
  F[{{d}}][{{i}}] = 0.0;
  {% endfor %}
  
  {% endfor %}
}
{% endif %}


{% if useFlux and not useViscousFlux %}
void {{project}}::{{solver}}::flux(const double* const Q,double** const F) {
  // Tip: You find documentation for this method in header file "{{project}}::{{solver}}.h".
  // Tip: See header file "{{project}}::{{abstractSolver}}.h" for toolkit generated compile-time 
  //      constants such as Order, NumberOfVariables, and NumberOfParameters.
  
  // @todo Please implement/augment if required
  {% for d in range_0_nDim %}
  {% for i in range_0_nVar %}
  F[{{d}}][{{i}}] = 0.0;
  {% endfor %}
  
  {% endfor %}
}
{% endif %}


{% if useSource %}
//You can either implement this method or modify fusedSource
void {{project}}::{{solver}}::algebraicSource(const tarch::la::Vector<DIMENSIONS, double>& x, double t, const double *const Q, double *S) {
  // Tip: You find documentation for this method in header file "{{project}}::{{solver}}.h".
  // Tip: See header file "{{project}}::{{abstractSolver}}.h" for toolkit generated compile-time 
  //      constants such as Order, NumberOfVariables, and NumberOfParameters.
  // @todo Please implement/augment if required
  {% for i in range_0_nVar %}
  S[{{i}}] = 0.0;
  {% endfor %}
}
{% endif %}

{% if useNCP %}
void  {{project}}::{{solver}}::nonConservativeProduct(const double* const Q,const double* const gradQ,double* const BgradQ) {
  // Tip: You find documentation for this method in header file "{{project}}::{{solver}}.h".
  // Tip: See header file "{{project}}::{{abstractSolver}}.h" for toolkit generated compile-time 
  //      constants such as Order, NumberOfVariables, and NumberOfParameters.
  
  // @todo Please implement/augment if required
  {% for i in range_0_nVar %}
  BgradQ[{{i}}] = 0.0;
  {% endfor %}
}
{% endif %}

{% if usePointSources %}

void  {{project}}::{{solver}}::initPointSourceLocations(const std::vector<std::string>& cmdlineargs,const exahype::parser::ParserView& constants){
  // Tip: You find documentation for this method in header file "{{project}}::{{solver}}.h".
  // Tip: See header file "{{project}}::{{abstractSolver}}.h" for toolkit generated compile-time 
  //      constants such as Order, NumberOfVariables, and NumberOfParameters.
  
  // @todo Please implement/augment if required

{% for i in range_0_nPointSources %}
{% for d in range_0_nDim %}
  pointSourceLocation[{{i}}][{{d}}]=0.0;
{% endfor %}
    
{% endfor %}
}

void  {{project}}::{{solver}}::pointSource(const double* const Q,const double* const x,const double t,const double dt, double* const forceVector, int n) {
  // Tip: You find documentation for this method in header file "{{project}}::{{solver}}.h".
  // Tip: See header file "{{project}}::{{abstractSolver}}.h" for toolkit generated compile-time 
  //      constants such as Order, NumberOfVariables, and NumberOfParameters.
  
  // @todo Please implement/augment if required
}
{% endif %}

{% if useMaterialParameters %}
    /**
     * @TODO LR : document
     */
void {{project}}::{{solver}}::multiplyMaterialParameterMatrix(const double* const Q, double* const rhs) {
  // Tip: You find documentation for this method in header file "{{project}}::{{solver}}.h".
  // Tip: See header file "{{project}}::{{abstractSolver}}.h" for toolkit generated compile-time 
  //      constants such as Order, NumberOfVariables, and NumberOfParameters.
  
  // @todo Please implement/augment if required
}
{% endif %}
