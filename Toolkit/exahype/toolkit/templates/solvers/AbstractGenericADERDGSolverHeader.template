// This file is generated by the ExaHyPE toolkit.
// Please do not modify - it will be overwritten by the next
// ExaHyPE toolkit call.
// 
// ========================
//   www.exahype.eu
// ========================
#ifndef __{{abstractSolver}}_CLASS_HEADER__
#define __{{abstractSolver}}_CLASS_HEADER__

#include <ostream>
#include <algorithm>

#include "exahype/solvers/ADERDGSolver.h"
#include "exahype/solvers/UserSolverInterface.h"
{% if enableProfiler %}
#include "exahype/profilers/Profiler.h"
{% endif %}

/**
 * We include Peano's assertion collection here.
 */
#include "tarch/Assertions.h"
#include "tarch/la/Vector.h"

namespace {{project}} {
  class {{solver}};
  class {{abstractSolver}};
}

class {{project}}::{{abstractSolver}}: public exahype::solvers::ADERDGSolver, public exahype::solvers::UserADERDGSolverInterface {
  public:
    static constexpr int Order                     = {{order}};
    static constexpr int NumberOfVariables         = {{numberOfVariables}};
    static constexpr int NumberOfParameters        = {{numberOfMaterialParameters}};
    static constexpr int NumberOfGlobalObservables = {{numberOfGlobalObservables}};
    static constexpr int NumberOfDMPObservables    = {{numberOfDMPObservables}}; // only of interest if this ADERDGSolver is a component of a LimitingADERDSolver 
    static constexpr int MaxPicardIterations       = {{maxPicardIterations}};
    static constexpr bool UseMaxPicardIterations   = {{"true" if useMaxPicardIterations else "false"}};
    static constexpr double CFL                    = 0.9;
{% if usePointSources %}
    static constexpr int NumberOfPointSources = {{numberOfPointSources}};
    double pointSourceLocation[NumberOfPointSources][DIMENSIONS];
{% endif %}
    
    // virtual getters for the constexpr's
    int constexpr_getNumberOfVariables()  const override { return NumberOfVariables; };
    int constexpr_getNumberOfParameters() const override { return NumberOfParameters; };
    int constexpr_getOrder()              const override { return Order; };
    double constexpr_getCFLNumber()       const override { return CFL; };  
  
    class VariableMetrics;
    class Variables;
    class ReadOnlyVariables;
    class Fluxes;
    class VariableShortcuts;
    class VariableMultiplicities;
    class VariableNames;
{% for className in namingSchemes %}
    class {{className}};
{% endfor %}
    
    {{abstractSolver}}(
      const double maximumMeshSize,
      const int maximumMeshDepth,
      const int haloCells,
      const int regularisedFineGridLevels,
      const exahype::solvers::Solver::TimeStepping timeStepping,
      const int limiterHelperLayers,
      const int DMPObservables
    {% if enableProfiler %},std::unique_ptr<exahype::profilers::Profiler> profiler{% endif %});

    /**
     * This operation should be overwritten in your application-specific 
     * solver. Alternatively, make your own subclass useConservativeFlux()
     * return false.
     */
    void flux(const double* const Q,double** F) override;

    /**
     * This operation should be overwritten in your application-specific 
     * solver.
     */
    void viscousFlux(const double* const Q,const double* const gradQ,double** F) override;

    /**
     * This operation should be overwritten in your application-specific 
     * solver.
     */
    void viscousEigenvalues(const double* const Q,const int d,double* lambda) override;

    
    /**
     * Default implementation. Has to be be overwritten by user's solver if you 
     * make the corresponding use operation activate the feature.
     *
     * See superclass for function's semantics.
     */
    void algebraicSource(const double* const Q,double* S) override;
        
    /**
     * Default implementation. Has to be be overwritten by user's solver if you 
     * make the corresponding use operation activate the feature.
     *
     * See superclass for function's semantics.
     */
    void nonConservativeProduct(const double* const Q,const double* const gradQ,double* BgradQ) override;
        
    /**
     * Default implementation. Has to be be overwritten by user's solver if you 
     * make the corresponding use operation activate the feature.
     *
     * See superclass for function's semantics.
     */
        
    /**
     * Default implementation. Has to be be overwritten by user's solver if you 
     * make the corresponding use operation activate the feature.
     *
     * See superclass for function's semantics.
     */
    void pointSource(const double* const Q,const double* const x,const double t,const double dt, double* forceVector,int n) override;
       
    /**
     * Default implementation. Please overwrite.
     *
     * See superclass for function's semantics.
     */
    bool isPhysicallyAdmissible(
      const double* const solution,
      const double* const observablesMin,const double* const observablesMax,
      const bool wasTroubledInPreviousTimeStep,
      const tarch::la::Vector<DIMENSIONS,double>& center,
      const tarch::la::Vector<DIMENSIONS,double>& dx,
      const double t, const double dt) const override { return true; }
    
    /**
     * Default implementation. Please overwrite.
     *
	 * See superclass for function's semantics.
	 */
    void mapDiscreteMaximumPrincipleObservables(double* observables,const int numberOfObservables,const double* const Q) const override {
      if (numberOfObservables>0) {
      	std::copy_n(Q,numberOfObservables,observables);
      }
  	}
     
    int fusedSpaceTimePredictorVolumeIntegral(double* lduh, double* lQhbnd, double* lFhbnd, const double* const luh, const tarch::la::Vector<DIMENSIONS, double>& center, const tarch::la::Vector<DIMENSIONS, double>& dx, const double t, const double dt) override;
    void solutionUpdate(double* luh,const double* const luhOld,const double* const lduh,const double dt) override;
    void riemannSolver(double* FL,double* FR,const double* const QL,const double* const QR,const double dt,const int direction, bool isBoundaryFace, int faceIndex) override;
    void boundaryConditions(double* const fluxIn,const double* const stateIn,const double* const luh,const tarch::la::Vector<DIMENSIONS,double>& cellCentre,const tarch::la::Vector<DIMENSIONS,double>& cellSize,const double t,const double dt,const int direction,const int orientation) override;
    void faceIntegral(double* const lduh,const double* const lFhbnd,const int direction, const int orientation,const tarch::la::Vector<DIMENSIONS-1,int>& subfaceIndex,const int levelDelta,const tarch::la::Vector<DIMENSIONS, double>& cellSize) override;    
    double stableTimeStepSize(const double* const luh,const tarch::la::Vector<DIMENSIONS,double>& dx) override;
{% if patchwiseAdjust %}
    // adjustSolution is implemented by the user solver as patchwise adjust option was used 
{% else %}
    void adjustSolution(double *luh,const tarch::la::Vector<DIMENSIONS,double>& center,const tarch::la::Vector<DIMENSIONS,double>& dx,const double t,const double dt) override; 
{% endif %}
    void faceUnknownsProlongation(double* lQhbndFine,double* lFhbndFine,const double* lQhbndCoarse,const double* lFhbndCoarse,const int coarseGridLevel,const int fineGridLevel,const tarch::la::Vector<DIMENSIONS-1,int>& subfaceIndex) override;
    void volumeUnknownsProlongation(double* luhFine,const double* luhCoarse,const int coarseGridLevel,const int fineGridLevel,const tarch::la::Vector<DIMENSIONS,int>& subcellIndex) override;
    void volumeUnknownsRestriction(double* luhCoarse,const double* luhFine,const int coarseGridLevel,const int fineGridLevel,const tarch::la::Vector<DIMENSIONS,int>& subcellIndex) override;

    static void constantsToString(std::ostream& os);
    static void abortWithMsg(const char* const msg);
    
    //override the size of unused data storage to -1 to not allocate it
{% if noTimeAveraging %}
    int getTempUnknownsSize()          const {return -1;} //lQhi not required
    int getTempFluxUnknownsSize()      const {return -1;} //lFhi not required
{% endif %}
{% if not usePointSources %}
    int getTempPointForceSourcesSize() const {return -1;} //pointSource not required
{% endif %}
{% if not useNCP %}
    int getTempSpaceTimeFluxUnknowns1Size() const {return -1;} //gradQ not required
{% endif %}
    
    //not used PDE terms
{% if not useMaterialParameters %}
    void multiplyMaterialParameterMatrix(const double* const Q, double* rhs) final {}
{% endif %}
{% if patchwiseAdjust %}
    void adjustPointSolution(const double* const x,const double t,const double dt,double* Q) final {};
{% endif %}
    
{% if isLinear %}
    // Override array size to adapt to the linear case (ADERDGSolver is by default configured for nonlinear), 
    // note: basisSize = number of degree of freedom = order+1 = _nodesPerCoordinateAxis
    
    // lQi, needs to be (basisSize + 1, basisSize, basisSize, basisSize, numberOfVariables+numberOfParameters) (note: one less basisSize in 2d)
    int getTempSpaceTimeUnknownsSize()      const {return (_numberOfVariables+_numberOfParameters) * power(_nodesPerCoordinateAxis, DIMENSIONS) * (1+_nodesPerCoordinateAxis); } 
    //lFi, needs to be (basisSize, basisSize, basisSize, basisSize, 2*DIMENSIONS+1, numberOfVariables) (note: one less basisSize in 2d)
    int getTempSpaceTimeFluxUnknowns0Size() const {return _numberOfVariables * power(_nodesPerCoordinateAxis, DIMENSIONS+1) * (2*DIMENSIONS+1);} 
{% endif %}
};

#endif // __{{abstractSolver}}_CLASS_HEADER__
