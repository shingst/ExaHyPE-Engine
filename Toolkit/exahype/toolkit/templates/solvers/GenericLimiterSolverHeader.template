#ifndef __{{solver}}_CLASS_HEADER__
#define __{{solver}}_CLASS_HEADER__

// This file is generated by the ExaHyPE toolkit.
// Please do not modify - it will be overwritten by the next
// ExaHyPE toolkit call.
// 
// ========================
//   www.exahype.eu
// ========================

#include <string>

#include "exahype/solvers/LimitingADERDGSolver.h"
#include "{{ADERDGSolver}}.h"
#include "{{FVSolver}}.h"

namespace {{project}}{
  class {{solver}};
}

class {{project}}::{{solver}}: public exahype::solvers::LimitingADERDGSolver {  
  public:
    static constexpr int NumberOfVariables         = {{project}}::{{ADERDGAbstractSolver}}::NumberOfVariables;
    static constexpr int NumberOfParameters        = {{project}}::{{ADERDGAbstractSolver}}::NumberOfParameters;
    static constexpr int Order                     = {{project}}::{{ADERDGAbstractSolver}}::Order;
    static constexpr int NumberOfGlobalObservables = {{project}}::{{ADERDGAbstractSolver}}::NumberOfGlobalObservables;
    static constexpr int NumberOfDMPObservables    = {{project}}::{{ADERDGAbstractSolver}}::NumberOfDMPObservables;
    static constexpr int GhostLayerWidth           = {{project}}::{{FVAbstractSolver}}::GhostLayerWidth;
      
    {{solver}}(
        const double maximumMeshSize,
        const int maximumMeshDepth,
        const int haloCells,
        const int regularisedFineGridLevels,
        const exahype::solvers::Solver::TimeStepping timeStepping,
        const int DMPObservables,
        const double DMPRelaxationParameter,
        const double DMPDifferenceScaling
        {% if enableProfiler %}, std::unique_ptr<exahype::profilers::Profiler> profiler{% endif %});
    
    void projectOnFVLimiterSpace(const double* const luh, double* const lim) const override;
    void projectOnDGSpace(const double* const lim, double* const luh) const override;
    bool discreteMaximumPrincipleAndMinAndMaxSearch(const double* const luh, double* const boundaryMinPerVariables, double* const boundaryMaxPerVariables) override;
    void findCellLocalMinAndMax(const double* const luh, double* const localMinPerVariables, double* const localMaxPerVariable) override;
    void findCellLocalLimiterMinAndMax(const double* const lim, double* const localMinPerObservable, double* const localMaxPerObservable) override;
};

#endif // __{{solver}}_CLASS_HEADER__
