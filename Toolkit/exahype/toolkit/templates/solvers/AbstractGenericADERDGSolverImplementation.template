// This file is generated by the ExaHyPE toolkit.
// Please do not modify - it will be overwritten by the next
// ExaHyPE toolkit call.
// 
// ========================
//   www.exahype.eu
// ========================
// ==============================================
// Please do not change the implementations below
// ==============================================
#include "{{abstractSolver}}.h"

#include "kernels/aderdg/generic/Kernels.h"

#include "{{solver}}.h" // Have to include a proper declaration. Cannot use forward declared classes in static_cast.

#include <stdio.h>

// We define the constructor of the actual solver here in order to regenerate it easily.
{{project}}::{{solver}}::{{solver}}(
  const double maximumMeshSize,
  const int maximumMeshDepth,
  const int haloCells,
  const int regularisedFineGridLevels,
  const exahype::solvers::Solver::TimeStepping timeStepping,
  const int limiterHelperLayers,
  const int DMPObservables
  {% if enableProfiler %},std::unique_ptr<exahype::profilers::Profiler> profiler{% endif %})
  :
  {{abstractSolver}}::{{abstractSolver}}(
      maximumMeshSize,
      maximumMeshDepth,
      haloCells,
      regularisedFineGridLevels,
      timeStepping,
      limiterHelperLayers,
      DMPObservables
      {% if enableProfiler %},std::move(profiler){% endif %}) {
}


{{project}}::{{abstractSolver}}::{{abstractSolver}}(
    const double maximumMeshSize,
    const int maximumMeshDepth,
    const int haloCells,
    const int regularisedFineGridLevels,
    const exahype::solvers::Solver::TimeStepping timeStepping,
    const int limiterHelperLayers,
    const int DMPObservables
    {% if enableProfiler %},std::unique_ptr<exahype::profilers::Profiler> profiler{% endif %})
  :
  exahype::solvers::ADERDGSolver(
      "{{solver}}",
      NumberOfVariables,
      NumberOfParameters,
      Order+1,
      maximumMeshSize,
      maximumMeshDepth,
      haloCells,
      regularisedFineGridLevels,
      timeStepping,
      limiterHelperLayers,
      DMPObservables
      {% if enableProfiler %},std::move(profiler){% endif %}) {
}

void {{project}}::{{abstractSolver}}::constantsToString(std::ostream& os) {
  // This string is used in the --version output to identify compile time constants
  os << "{{project}}::{{abstractSolver}}("
     << "nVar=" << NumberOfVariables << ", "
     << "nParam=" << NumberOfParameters << ", "
     << "Order=" << Order
     << ")";
}

void {{project}}::{{abstractSolver}}::abortWithMsg(const char* const msg) {
  // verbosily fail even without assertions turned on
  puts(msg);
  abort();
}

int {{project}}::{{abstractSolver}}::fusedSpaceTimePredictorVolumeIntegral(double* lduh, double* lQhbnd, double* lFhbnd, const double* const luh, const tarch::la::Vector<DIMENSIONS, double>& center, const tarch::la::Vector<DIMENSIONS, double>& dx, const double t ,const double dt) {
{% if enableProfiler %}
  _profiler->start("fusedSpaceTimePredictorVolumeIntegral");
{% endif %}
{% if dimensions==3 %}
  constexpr int spaceBasisSize     = (Order+1)*(Order+1)*(Order+1);
{% else %}
  constexpr int spaceBasisSize     = (Order+1)*(Order+1);
{% endif %}
  constexpr int spaceTimeBasisSize = spaceBasisSize*(Order+1);
{% if isLinear %}
  constexpr int sizeLQi                = (NumberOfVariables+NumberOfParameters)*spaceBasisSize*(Order+2);
  constexpr int sizeLFi                = (DIMENSIONS + 1)*NumberOfVariables*spaceTimeBasisSize;
  constexpr int sizeGradQ              = DIMENSIONS*NumberOfVariables*spaceBasisSize;
  constexpr int sizePSi                = NumberOfVariables*spaceBasisSize*(Order+2);
  constexpr int sizePSderivatives      = NumberOfVariables*spaceTimeBasisSize;
  constexpr int sizeTmp_PSderivatives  = sizePSderivatives;

  constexpr int sizeLQhi = (NumberOfVariables+NumberOfParameters)*spaceBasisSize;
  constexpr int sizeLFhi = (DIMENSIONS + 1)*NumberOfVariables*spaceBasisSize;
  
  constexpr int totalSize = sizeLQi + sizeLFi + sizeGradQ +
                            sizePSi + sizePSderivatives + sizeTmp_PSderivatives +
                            sizeLQhi + sizeLFhi;
{%   if tempVarsOnStack %}
  double block[totalSize];
{%   else %}  
  double* block = new double[totalSize]; 
{%   endif %}
  double* memory = block;
  
  double* lQi                = memory; memory+=sizeLQi;
  double* lFi                = memory; memory+=sizeLFi;
  double* gradQ              = memory; memory+=sizeGradQ;
  double* PSi                = memory; memory+=sizePSi;
  double* PSderivatives      = memory; memory+=sizePSderivatives;
  double* tmp_PSderivatives  = memory; memory+=sizeTmp_PSderivatives;
  
  double* lQhi               = memory; memory+=sizeLQhi;
  double* lFhi               = memory; memory+=sizeLFhi;

const int picardIterations = 1;

{%   if usePointSources %}
  std::vector<int>* pointSources= kernels::aderdg::generic::c::getPointSources<{{solver}}>(*static_cast<{{solver}}*>(this),center,dx);
   
  if(pointSources != nullptr) {
    kernels::aderdg::generic::c::deltaDistribution<{{solver}}>(*static_cast<{{solver}}*>(this), luh, t, dt, center, dx, pointSources, PSi);
    kernels::aderdg::generic::c::spaceTimePredictorLinear<true , {{useSource_s}}, {{useFlux_s}}, {{useNCP_s}}, {{useMaterialParameters_s}}, {{solver}}>(*static_cast<{{solver}}*>(this),lQhbnd,lFhbnd,lQi,lFi,gradQ,PSi,PSderivatives,tmp_PSderivatives,lQhi,lFhi,luh,tarch::la::invertEntries(dx), dt);
  }else{
    kernels::aderdg::generic::c::spaceTimePredictorLinear<false, {{useSource_s}}, {{useFlux_s}}, {{useNCP_s}}, {{useMaterialParameters_s}}, {{solver}}>(*static_cast<{{solver}}*>(this),lQhbnd,lFhbnd,lQi,lFi,gradQ,PSi,PSderivatives,tmp_PSderivatives,lQhi,lFhi,luh,tarch::la::invertEntries(dx), dt);
  }
{% else %}
  kernels::aderdg::generic::c::spaceTimePredictorLinear<{{usePointSources_s}}, {{useSource_s}}, {{useFlux_s}}, {{useNCP_s}}, {{useMaterialParameters_s}}, {{solver}}>(*static_cast<{{solver}}*>(this),lQhbnd,lFhbnd,lQi,lFi,gradQ,PSi,PSderivatives,tmp_PSderivatives,lQhi,lFhi,luh,tarch::la::invertEntries(dx), dt);
{%   endif %}
  kernels::aderdg::generic::c::volumeIntegralLinear<{{useSource_s}}, {{useFlux_s}}, NumberOfVariables, Order+1>(lduh,lFhi,dx);

{% else %}
  constexpr int sizeLQi   = (NumberOfVariables+NumberOfParameters)*spaceTimeBasisSize;
  constexpr int sizeRhs   = sizeLQi;
  constexpr int sizeLFi   = (DIMENSIONS + 1)*NumberOfVariables*spaceTimeBasisSize;
  constexpr int sizeGradQ = DIMENSIONS*NumberOfVariables*spaceBasisSize;
  
  constexpr int sizeLQhi = (NumberOfVariables+NumberOfParameters)*spaceBasisSize;
  constexpr int sizeLFhi = (DIMENSIONS + 1)*NumberOfVariables*spaceBasisSize;

{%   if noTimeAveraging %}
  constexpr int totalSize = sizeLQi + sizeRhs + sizeLFi + sizeGradQ;
{%   else %}  
  constexpr int totalSize = sizeLQi + sizeRhs + sizeLFi + sizeGradQ +
                        sizeLQhi + sizeLFhi;
{%   endif %}

{%   if tempVarsOnStack %}
  double block[totalSize];
{%   else %}  
  double* block = new double[totalSize];
{%   endif %}
  double* memory = block;
      
  double* lQi   = memory; memory+=sizeLQi;
  double* rhs   = memory; memory+=sizeRhs;
  double* lFi   = memory; memory+=sizeLFi;
  double* gradQ = memory; memory+=sizeGradQ;
  
{%   if noTimeAveraging %}
  double* lQhi = lQi;
  double* lFhi = lFi;
{%   else %}
  double* lQhi = memory; memory+=sizeLQhi;
  double* lFhi = memory; memory+=sizeLFhi;
{%   endif %}

  const int picardIterations = kernels::aderdg::generic::c::spaceTimePredictorNonlinear<{{useSource_s}}, {{useFlux_s}}, {{useViscousFlux_s}}, {{useNCP_s}}, {{noTimeAveraging_s}}, {{solver}}>(*static_cast<{{solver}}*>(this), lQhbnd, lFhbnd, lQi, rhs, lFi, gradQ, lQhi, lFhi, luh, tarch::la::invertEntries(dx), dt);
  kernels::aderdg::generic::c::volumeIntegralNonlinear<{{ 'true' if (useSource or useNCP) else 'false' }}, {{useFlux_s}}, {{noTimeAveraging_s}}, NumberOfVariables, Order+1>(lduh,lFhi,dx);

{% endif %}
{%if tempVarsOnStack==False %}
  delete[] block;
{% endif %}
{% if enableProfiler %}
  _profiler->stop("fusedSpaceTimePredictorVolumeIntegral");
{% endif %}
  return picardIterations;
}

void {{project}}::{{abstractSolver}}::solutionUpdate(double* luh,const double* const luhOld,const double* const lduh,const double dt) {
{% if enableProfiler %}
  _profiler->start("solutionUpdate");
{% endif %}
  kernels::aderdg::generic::{{language}}::solutionUpdate<{{solver}}>(*static_cast<{{solver}}*>(this),luh,luhOld,lduh,dt);
{% if enableProfiler %}
  _profiler->stop("solutionUpdate");
{% endif %}
}

void {{project}}::{{abstractSolver}}::faceIntegral(double* const lduh,const double* const lFhbnd,const int direction, const int orientation,const tarch::la::Vector<DIMENSIONS-1,int>& subfaceIndex,const int levelDelta,const tarch::la::Vector<DIMENSIONS, double>& cellSize) {
{% if enableProfiler %}
  _profiler->start("faceIntegral");
{% endif %}
  if ( levelDelta > 0 ) {
{% if dimensions==3 %}
    constexpr int basisSize = (Order+1)*(Order+1);
{% else %}
    constexpr int basisSize = (Order+1);
{% endif %}
    constexpr int sizeFlux  = NumberOfVariables*basisSize;
{% if tempVarsOnStack %}
    double lFhbndCoarse[sizeFlux];
{% else %}  
    double* lFhbndCoarse = new double[sizeFlux];
{% endif %}
    kernels::aderdg::generic::{{language}}::faceUnknownsRestriction<NumberOfVariables,Order+1>(lFhbndCoarse,lFhbnd,subfaceIndex,levelDelta);
    
    tarch::la::Vector<DIMENSIONS,double> coarseGridCellSize = tarch::la::aPowI(levelDelta,3) * 1.0 * cellSize;
    kernels::aderdg::generic::{{language}}::faceIntegral{{linearOrNonlinear}}<NumberOfVariables, Order+1>(lduh,lFhbndCoarse,direction,orientation,coarseGridCellSize);  
{%if tempVarsOnStack==False %}
    delete[] lFhbndCoarse;
{% endif %}    
  } else {
    kernels::aderdg::generic::{{language}}::faceIntegral{{linearOrNonlinear}}<NumberOfVariables, Order+1>(lduh,lFhbnd,direction,orientation,cellSize);
  }
  
{% if enableProfiler %}
  _profiler->stop("faceIntegral");
{% endif %}
}

void {{project}}::{{abstractSolver}}::riemannSolver(double* FL,double* FR,const double* const QL,const double* const QR,const double t,const double dt,const int direction,bool isBoundaryFace, int faceIndex) {
  assertion2(direction>=0,dt,direction);
  assertion2(direction<DIMENSIONS,dt,direction);
{% if enableProfiler %}
  _profiler->start("riemannSolver");
{% endif %}
{% if isFortran %}
  kernels::aderdg::generic::fortran::riemannSolver{{linearOrNonlinear}}<{{solver}}>(*static_cast<{{solver}}*>(this),FL,FR,QL,QR,t,dt,direction);
{% else %}
  {% if isLinear %}
    kernels::aderdg::generic::c::riemannSolverLinear<{{useFlux_s}},{{useNCP_s}},{{useMaterialParameters_s}},{{solver}}>(*static_cast<{{solver}}*>(this),FL,FR,QL,QR,t,dt,direction);
  {% else %}
    kernels::aderdg::generic::c::riemannSolverNonlinear<{{useNCP_s}},{{solver}}>(*static_cast<{{solver}}*>(this),FL,FR,QL,QR,t,dt,direction);
  {% endif %}
{% endif %}
{% if enableProfiler %}
  _profiler->stop("riemannSolver");
{% endif %}
}

void {{project}}::{{abstractSolver}}::boundaryConditions(double* const fluxIn,const double* const stateIn,const double* const luh,const tarch::la::Vector<DIMENSIONS,double>& cellCentre,const tarch::la::Vector<DIMENSIONS,double>& cellSize,const double t,const double dt,const int direction,const int orientation) {
{% if enableProfiler %}
  _profiler->start("boundaryConditions");
{% endif %}
{% if dimensions==3 %}
  constexpr int basisSize     = (Order+1)*(Order+1);
{% else %}
  constexpr int basisSize     = (Order+1);
{% endif %}
  constexpr int sizeStateOut = (NumberOfVariables+NumberOfParameters)*basisSize;
  constexpr int sizeFluxOut  = NumberOfVariables*basisSize;
  
  constexpr int totalSize = sizeStateOut + sizeFluxOut;
{% if tempVarsOnStack %}
  double block[totalSize];
{% else %}  
  double* block = new double[totalSize];
{% endif %}
  double* memory = block;

  double* stateOut = memory; memory+=sizeStateOut;
  double* fluxOut  = memory; memory+=sizeFluxOut;

  const int faceIndex = 2*direction+orientation;
  
  kernels::aderdg::generic::c::boundaryConditions<{{solver}}>(*static_cast<{{solver}}*>(this),fluxOut,stateOut,fluxIn,stateIn,cellCentre,cellSize,t,dt,faceIndex,direction);
  if ( orientation==0 ) {
    double* FL = fluxOut; const double* const QL = stateOut;
    double* FR = fluxIn;  const double* const QR = stateIn;
  
    riemannSolver(FL,FR,QL,QR,t,dt,direction,true,faceIndex);
  }
  else {
    double* FL = fluxIn;  const double* const QL = stateIn;
    double* FR = fluxOut; const double* const QR = stateOut;

    riemannSolver(FL,FR,QL,QR,t,dt,direction,true,faceIndex);
  }
{%if tempVarsOnStack==False %}
  delete[] block;
{% endif %}
{% if enableProfiler %}
  _profiler->stop("boundaryConditions");
{% endif %}
}

double {{project}}::{{abstractSolver}}::stableTimeStepSize(const double* const luh,const tarch::la::Vector<DIMENSIONS,double>& dx) {
{% if enableProfiler %}
  _profiler->start("stableTimeStepSize");
{% endif %}
  double d = kernels::aderdg::generic::{{language}}::stableTimeStepSize<{{solver}},{{useViscousFlux_s}}>(*static_cast<{{solver}}*>(this),luh,dx);
{% if enableProfiler %}
  _profiler->stop("stableTimeStepSize");
{% endif %}
  return d;
}

{%if patchwiseAdjust==False %}
void {{project}}::{{abstractSolver}}::adjustSolution(double *luh,const tarch::la::Vector<DIMENSIONS,double>& center,const tarch::la::Vector<DIMENSIONS,double>& dx,double t,double dt) {
{% if enableProfiler %}
  _profiler->start("solutionAdjustment");
{% endif %}
  kernels::aderdg::generic::{{language}}::solutionAdjustment<{{solver}}>(*static_cast<{{solver}}*>(this),luh,center,dx,t,dt);
{% if enableProfiler %}
  _profiler->stop("solutionAdjustment");
{% endif %}
}
{% endif %}

void {{project}}::{{abstractSolver}}::faceUnknownsProlongation(double* lQhbndFine,double* lFhbndFine,const double* lQhbndCoarse,const double* lFhbndCoarse,const int coarseGridLevel,const int fineGridLevel,const tarch::la::Vector<DIMENSIONS-1,int>& subfaceIndex) {
{% if enableProfiler %}
  _profiler->start("faceUnknownsProlongation");
{% endif %}
  kernels::aderdg::generic::c::faceUnknownsProlongation<NumberOfVariables,NumberOfParameters,Order+1>(lQhbndFine,lFhbndFine,lQhbndCoarse,lFhbndCoarse,coarseGridLevel,fineGridLevel,subfaceIndex);
{% if enableProfiler %}
  _profiler->start("false");
{% endif %}
}

void {{project}}::{{abstractSolver}}::volumeUnknownsProlongation(double* luhFine,const double* luhCoarse,const int coarseGridLevel,const int fineGridLevel,const tarch::la::Vector<DIMENSIONS,int>& subcellIndex) {
{% if enableProfiler %}
  _profiler->start("volumeUnknownsProlongation");
{% endif %}
  kernels::aderdg::generic::c::volumeUnknownsProlongation<NumberOfVariables,NumberOfParameters,Order+1>(luhFine,luhCoarse,coarseGridLevel,fineGridLevel,subcellIndex);
{% if enableProfiler %}
  _profiler->stop("volumeUnknownsProlongation");
{% endif %}
}

void {{project}}::{{abstractSolver}}::volumeUnknownsRestriction(double* luhCoarse,const double* luhFine,const int coarseGridLevel,const int fineGridLevel,const tarch::la::Vector<DIMENSIONS,int>& subcellIndex) {
{% if enableProfiler %}
  _profiler->start("volumeUnknownsRestriction");
{% endif %}
  kernels::aderdg::generic::c::volumeUnknownsRestriction<NumberOfVariables,NumberOfParameters,Order+1>(luhCoarse,luhFine,coarseGridLevel,fineGridLevel,subcellIndex);
{% if enableProfiler %}
  _profiler->stop("volumeUnknownsRestriction");
{% endif %}
}

void {{project}}::{{abstractSolver}}::flux(const double* const Q,double** F) {
      abortWithMsg("flux: If this operation is entered, you have activated the corresponding guard. Then you have to re-implement this routine, too." );
}

void {{project}}::{{abstractSolver}}::viscousFlux(const double* const Q,const double* const gradQ, double** F) {
      abortWithMsg("viscous flux: If this operation is entered, you have activated the corresponding guard. Then you have to re-implement this routine, too." );
}

void {{project}}::{{abstractSolver}}::viscousEigenvalues(const double* const Q,const int d,double* lambda) {
      abortWithMsg("viscous eigenvalues: If this operation is entered, you have activated the corresponding guard. Then you have to re-implement this routine, too." );
}

void {{project}}::{{abstractSolver}}::algebraicSource(const double* const Q,double* S) {
      abortWithMsg("algebraicSource: If this operation is entered, you have activated the corresponding guard. Then you have to re-implement this routine, too." );
}
        
void {{project}}::{{abstractSolver}}::nonConservativeProduct(const double* const Q,const double* const gradQ,double* BgradQ) {
      abortWithMsg("nonConservativeProduct: If this operation is entered, you have activated the corresponding guard. Then you have to re-implement this routine, too." );
}

void {{project}}::{{abstractSolver}}::multiplyMaterialParameterMatrix(const double* const Q, double* rhs) {
      abortWithMsg("multiplyMaterialParameterMatrix: If this operation is entered, you have activated the corresponding guard. Then you have to re-implement this routine, too." );
}

void {{project}}::{{abstractSolver}}::pointSource(const double* const Q,const double* const x,const double t,const double dt, double* forceVector,int n) {
      abortWithMsg("pointSource: If this operation is entered, you have activated the corresponding guard. Then you have to re-implement this routine, too." );
}

/**
 * Fallback implementations of joined functions. Users can either safely ignore this
 * or overwrite with their own implementations.
 **/
#include "kernels/fusedMethods.cpph"
